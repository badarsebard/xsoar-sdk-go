/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Argument Argument to a module command
type Argument struct {
	Auto         *string   `json:"auto,omitempty"`
	Default      *bool     `json:"default,omitempty"`
	DefaultValue *string   `json:"defaultValue,omitempty"`
	Deprecated   *bool     `json:"deprecated,omitempty"`
	Description  *string   `json:"description,omitempty"`
	IsArray      *bool     `json:"isArray,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Predefined   *[]string `json:"predefined,omitempty"`
	Required     *bool     `json:"required,omitempty"`
	Secret       *bool     `json:"secret,omitempty"`
}

// NewArgument instantiates a new Argument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArgument() *Argument {
	this := Argument{}
	return &this
}

// NewArgumentWithDefaults instantiates a new Argument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArgumentWithDefaults() *Argument {
	this := Argument{}
	return &this
}

// GetAuto returns the Auto field value if set, zero value otherwise.
func (o *Argument) GetAuto() string {
	if o == nil || o.Auto == nil {
		var ret string
		return ret
	}
	return *o.Auto
}

// GetAutoOk returns a tuple with the Auto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetAutoOk() (*string, bool) {
	if o == nil || o.Auto == nil {
		return nil, false
	}
	return o.Auto, true
}

// HasAuto returns a boolean if a field has been set.
func (o *Argument) HasAuto() bool {
	if o != nil && o.Auto != nil {
		return true
	}

	return false
}

// SetAuto gets a reference to the given string and assigns it to the Auto field.
func (o *Argument) SetAuto(v string) {
	o.Auto = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *Argument) GetDefault() bool {
	if o == nil || o.Default == nil {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetDefaultOk() (*bool, bool) {
	if o == nil || o.Default == nil {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *Argument) HasDefault() bool {
	if o != nil && o.Default != nil {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *Argument) SetDefault(v bool) {
	o.Default = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *Argument) GetDefaultValue() string {
	if o == nil || o.DefaultValue == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetDefaultValueOk() (*string, bool) {
	if o == nil || o.DefaultValue == nil {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *Argument) HasDefaultValue() bool {
	if o != nil && o.DefaultValue != nil {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *Argument) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *Argument) GetDeprecated() bool {
	if o == nil || o.Deprecated == nil {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetDeprecatedOk() (*bool, bool) {
	if o == nil || o.Deprecated == nil {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *Argument) HasDeprecated() bool {
	if o != nil && o.Deprecated != nil {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *Argument) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Argument) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Argument) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Argument) SetDescription(v string) {
	o.Description = &v
}

// GetIsArray returns the IsArray field value if set, zero value otherwise.
func (o *Argument) GetIsArray() bool {
	if o == nil || o.IsArray == nil {
		var ret bool
		return ret
	}
	return *o.IsArray
}

// GetIsArrayOk returns a tuple with the IsArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetIsArrayOk() (*bool, bool) {
	if o == nil || o.IsArray == nil {
		return nil, false
	}
	return o.IsArray, true
}

// HasIsArray returns a boolean if a field has been set.
func (o *Argument) HasIsArray() bool {
	if o != nil && o.IsArray != nil {
		return true
	}

	return false
}

// SetIsArray gets a reference to the given bool and assigns it to the IsArray field.
func (o *Argument) SetIsArray(v bool) {
	o.IsArray = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Argument) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Argument) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Argument) SetName(v string) {
	o.Name = &v
}

// GetPredefined returns the Predefined field value if set, zero value otherwise.
func (o *Argument) GetPredefined() []string {
	if o == nil || o.Predefined == nil {
		var ret []string
		return ret
	}
	return *o.Predefined
}

// GetPredefinedOk returns a tuple with the Predefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetPredefinedOk() (*[]string, bool) {
	if o == nil || o.Predefined == nil {
		return nil, false
	}
	return o.Predefined, true
}

// HasPredefined returns a boolean if a field has been set.
func (o *Argument) HasPredefined() bool {
	if o != nil && o.Predefined != nil {
		return true
	}

	return false
}

// SetPredefined gets a reference to the given []string and assigns it to the Predefined field.
func (o *Argument) SetPredefined(v []string) {
	o.Predefined = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *Argument) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *Argument) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *Argument) SetRequired(v bool) {
	o.Required = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *Argument) GetSecret() bool {
	if o == nil || o.Secret == nil {
		var ret bool
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Argument) GetSecretOk() (*bool, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *Argument) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given bool and assigns it to the Secret field.
func (o *Argument) SetSecret(v bool) {
	o.Secret = &v
}

func (o Argument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Auto != nil {
		toSerialize["auto"] = o.Auto
	}
	if o.Default != nil {
		toSerialize["default"] = o.Default
	}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if o.Deprecated != nil {
		toSerialize["deprecated"] = o.Deprecated
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.IsArray != nil {
		toSerialize["isArray"] = o.IsArray
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Predefined != nil {
		toSerialize["predefined"] = o.Predefined
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableArgument struct {
	value *Argument
	isSet bool
}

func (v NullableArgument) Get() *Argument {
	return v.value
}

func (v *NullableArgument) Set(val *Argument) {
	v.value = val
	v.isSet = true
}

func (v NullableArgument) IsSet() bool {
	return v.isSet
}

func (v *NullableArgument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArgument(val *Argument) *NullableArgument {
	return &NullableArgument{value: val, isSet: true}
}

func (v NullableArgument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArgument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
