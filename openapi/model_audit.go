/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Audit Audit holds the auditing details. This includes all common fields, the action in a string blob and the user who performed the action in a user struct.
type Audit struct {
	Action         *map[string]map[string]interface{} `json:"action,omitempty"`
	Highlight      *map[string][]string               `json:"highlight,omitempty"`
	Id             *string                            `json:"id,omitempty"`
	Identifier     *string                            `json:"identifier,omitempty"`
	Modified       *time.Time                         `json:"modified,omitempty"`
	NumericId      *int64                             `json:"numericId,omitempty"`
	Object         *string                            `json:"object,omitempty"`
	PrimaryTerm    *int64                             `json:"primaryTerm,omitempty"`
	SequenceNumber *int64                             `json:"sequenceNumber,omitempty"`
	SortValues     *[]string                          `json:"sortValues,omitempty"`
	Type           *string                            `json:"type,omitempty"`
	User           *string                            `json:"user,omitempty"`
	Version        *int64                             `json:"version,omitempty"`
}

// NewAudit instantiates a new Audit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudit() *Audit {
	this := Audit{}
	return &this
}

// NewAuditWithDefaults instantiates a new Audit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditWithDefaults() *Audit {
	this := Audit{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *Audit) GetAction() map[string]map[string]interface{} {
	if o == nil || o.Action == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetActionOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Audit) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given map[string]map[string]interface{} and assigns it to the Action field.
func (o *Audit) SetAction(v map[string]map[string]interface{}) {
	o.Action = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *Audit) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *Audit) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *Audit) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Audit) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Audit) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Audit) SetId(v string) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Audit) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Audit) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *Audit) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Audit) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Audit) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Audit) SetModified(v time.Time) {
	o.Modified = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *Audit) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *Audit) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *Audit) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *Audit) GetObject() string {
	if o == nil || o.Object == nil {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetObjectOk() (*string, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *Audit) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *Audit) SetObject(v string) {
	o.Object = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *Audit) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *Audit) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *Audit) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *Audit) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *Audit) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *Audit) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *Audit) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *Audit) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *Audit) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Audit) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Audit) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Audit) SetType(v string) {
	o.Type = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Audit) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Audit) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *Audit) SetUser(v string) {
	o.User = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Audit) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audit) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Audit) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *Audit) SetVersion(v int64) {
	o.Version = &v
}

func (o Audit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableAudit struct {
	value *Audit
	isSet bool
}

func (v NullableAudit) Get() *Audit {
	return v.value
}

func (v *NullableAudit) Set(val *Audit) {
	v.value = val
	v.isSet = true
}

func (v NullableAudit) IsSet() bool {
	return v.isSet
}

func (v *NullableAudit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudit(val *Audit) *NullableAudit {
	return &NullableAudit{value: val, isSet: true}
}

func (v NullableAudit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
