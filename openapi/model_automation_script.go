/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// AutomationScript AutomationScript represents a script that will run on  the system
type AutomationScript struct {
	AllRead       *bool       `json:"allRead,omitempty"`
	AllReadWrite  *bool       `json:"allReadWrite,omitempty"`
	Arguments     *[]Argument `json:"arguments,omitempty"`
	Comment       *string     `json:"comment,omitempty"`
	CommitMessage *string     `json:"commitMessage,omitempty"`
	ContextKeys   *[]string   `json:"contextKeys,omitempty"`
	// Who has created this event - relevant only for manual incidents
	DbotCreatedBy *string `json:"dbotCreatedBy,omitempty"`
	// This fields indicates which commands this script depends on
	DependsOn   *map[string][]string `json:"dependsOn,omitempty"`
	Deprecated  *bool                `json:"deprecated,omitempty"`
	Detached    *bool                `json:"detached,omitempty"`
	DockerImage *string              `json:"dockerImage,omitempty"`
	Enabled     *bool                `json:"enabled,omitempty"`
	// Engine that will run the script
	Engine *string `json:"engine,omitempty"`
	// EngineGroup that will run the script
	EngineGroup       *string `json:"engineGroup,omitempty"`
	FromServerVersion *string `json:"fromServerVersion,omitempty"`
	// Internal field to make queries on role faster
	HasRole               *bool                `json:"hasRole,omitempty"`
	Hidden                *bool                `json:"hidden,omitempty"`
	Highlight             *map[string][]string `json:"highlight,omitempty"`
	Id                    *string              `json:"id,omitempty"`
	Important             *[]Important         `json:"important,omitempty"`
	ItemVersion           *string              `json:"itemVersion,omitempty"`
	Locked                *bool                `json:"locked,omitempty"`
	Modified              *time.Time           `json:"modified,omitempty"`
	Name                  *string              `json:"name,omitempty"`
	NumericId             *int64               `json:"numericId,omitempty"`
	Outputs               *[]Output            `json:"outputs,omitempty"`
	PackID                *string              `json:"packID,omitempty"`
	PackPropagationLabels *[]string            `json:"packPropagationLabels,omitempty"`
	Polling               *bool                `json:"polling,omitempty"`
	PrevName              *string              `json:"prevName,omitempty"`
	PreviousAllRead       *bool                `json:"previousAllRead,omitempty"`
	PreviousAllReadWrite  *bool                `json:"previousAllReadWrite,omitempty"`
	// Do not change this field manually
	PreviousRoles     *[]string `json:"previousRoles,omitempty"`
	PrimaryTerm       *int64    `json:"primaryTerm,omitempty"`
	Private           *bool     `json:"private,omitempty"`
	PropagationLabels *[]string `json:"propagationLabels,omitempty"`
	Pswd              *string   `json:"pswd,omitempty"`
	RawTags           *[]string `json:"rawTags,omitempty"`
	// The role assigned to this investigation
	Roles   *[]string `json:"roles,omitempty"`
	RunAs   *string   `json:"runAs,omitempty"`
	RunOnce *bool     `json:"runOnce,omitempty"`
	Script  *string   `json:"script,omitempty"`
	// ScriptTarget represents the module where this script should run
	ScriptTarget   *int64    `json:"scriptTarget,omitempty"`
	SearchableName *string   `json:"searchableName,omitempty"`
	Sensitive      *bool     `json:"sensitive,omitempty"`
	SequenceNumber *int64    `json:"sequenceNumber,omitempty"`
	ShouldCommit   *bool     `json:"shouldCommit,omitempty"`
	SortValues     *[]string `json:"sortValues,omitempty"`
	SourceScripID  *string   `json:"sourceScripID,omitempty"`
	// ScriptSubType holds the script type version
	Subtype *string   `json:"subtype,omitempty"`
	System  *bool     `json:"system,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
	// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
	Timeout         *int64  `json:"timeout,omitempty"`
	ToServerVersion *string `json:"toServerVersion,omitempty"`
	// ScriptType holds the type of a script
	Type                              *string   `json:"type,omitempty"`
	User                              *string   `json:"user,omitempty"`
	VcShouldIgnore                    *bool     `json:"vcShouldIgnore,omitempty"`
	VcShouldKeepItemLegacyProdMachine *bool     `json:"vcShouldKeepItemLegacyProdMachine,omitempty"`
	Version                           *int64    `json:"version,omitempty"`
	VisualScript                      *string   `json:"visualScript,omitempty"`
	XsoarHasReadOnlyRole              *bool     `json:"xsoarHasReadOnlyRole,omitempty"`
	XsoarPreviousReadOnlyRoles        *[]string `json:"xsoarPreviousReadOnlyRoles,omitempty"`
	XsoarReadOnlyRoles                *[]string `json:"xsoarReadOnlyRoles,omitempty"`
}

// NewAutomationScript instantiates a new AutomationScript object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutomationScript() *AutomationScript {
	this := AutomationScript{}
	return &this
}

// NewAutomationScriptWithDefaults instantiates a new AutomationScript object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutomationScriptWithDefaults() *AutomationScript {
	this := AutomationScript{}
	return &this
}

// GetAllRead returns the AllRead field value if set, zero value otherwise.
func (o *AutomationScript) GetAllRead() bool {
	if o == nil || o.AllRead == nil {
		var ret bool
		return ret
	}
	return *o.AllRead
}

// GetAllReadOk returns a tuple with the AllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetAllReadOk() (*bool, bool) {
	if o == nil || o.AllRead == nil {
		return nil, false
	}
	return o.AllRead, true
}

// HasAllRead returns a boolean if a field has been set.
func (o *AutomationScript) HasAllRead() bool {
	if o != nil && o.AllRead != nil {
		return true
	}

	return false
}

// SetAllRead gets a reference to the given bool and assigns it to the AllRead field.
func (o *AutomationScript) SetAllRead(v bool) {
	o.AllRead = &v
}

// GetAllReadWrite returns the AllReadWrite field value if set, zero value otherwise.
func (o *AutomationScript) GetAllReadWrite() bool {
	if o == nil || o.AllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.AllReadWrite
}

// GetAllReadWriteOk returns a tuple with the AllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetAllReadWriteOk() (*bool, bool) {
	if o == nil || o.AllReadWrite == nil {
		return nil, false
	}
	return o.AllReadWrite, true
}

// HasAllReadWrite returns a boolean if a field has been set.
func (o *AutomationScript) HasAllReadWrite() bool {
	if o != nil && o.AllReadWrite != nil {
		return true
	}

	return false
}

// SetAllReadWrite gets a reference to the given bool and assigns it to the AllReadWrite field.
func (o *AutomationScript) SetAllReadWrite(v bool) {
	o.AllReadWrite = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *AutomationScript) GetArguments() []Argument {
	if o == nil || o.Arguments == nil {
		var ret []Argument
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetArgumentsOk() (*[]Argument, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *AutomationScript) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []Argument and assigns it to the Arguments field.
func (o *AutomationScript) SetArguments(v []Argument) {
	o.Arguments = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *AutomationScript) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *AutomationScript) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *AutomationScript) SetComment(v string) {
	o.Comment = &v
}

// GetCommitMessage returns the CommitMessage field value if set, zero value otherwise.
func (o *AutomationScript) GetCommitMessage() string {
	if o == nil || o.CommitMessage == nil {
		var ret string
		return ret
	}
	return *o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetCommitMessageOk() (*string, bool) {
	if o == nil || o.CommitMessage == nil {
		return nil, false
	}
	return o.CommitMessage, true
}

// HasCommitMessage returns a boolean if a field has been set.
func (o *AutomationScript) HasCommitMessage() bool {
	if o != nil && o.CommitMessage != nil {
		return true
	}

	return false
}

// SetCommitMessage gets a reference to the given string and assigns it to the CommitMessage field.
func (o *AutomationScript) SetCommitMessage(v string) {
	o.CommitMessage = &v
}

// GetContextKeys returns the ContextKeys field value if set, zero value otherwise.
func (o *AutomationScript) GetContextKeys() []string {
	if o == nil || o.ContextKeys == nil {
		var ret []string
		return ret
	}
	return *o.ContextKeys
}

// GetContextKeysOk returns a tuple with the ContextKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetContextKeysOk() (*[]string, bool) {
	if o == nil || o.ContextKeys == nil {
		return nil, false
	}
	return o.ContextKeys, true
}

// HasContextKeys returns a boolean if a field has been set.
func (o *AutomationScript) HasContextKeys() bool {
	if o != nil && o.ContextKeys != nil {
		return true
	}

	return false
}

// SetContextKeys gets a reference to the given []string and assigns it to the ContextKeys field.
func (o *AutomationScript) SetContextKeys(v []string) {
	o.ContextKeys = &v
}

// GetDbotCreatedBy returns the DbotCreatedBy field value if set, zero value otherwise.
func (o *AutomationScript) GetDbotCreatedBy() string {
	if o == nil || o.DbotCreatedBy == nil {
		var ret string
		return ret
	}
	return *o.DbotCreatedBy
}

// GetDbotCreatedByOk returns a tuple with the DbotCreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetDbotCreatedByOk() (*string, bool) {
	if o == nil || o.DbotCreatedBy == nil {
		return nil, false
	}
	return o.DbotCreatedBy, true
}

// HasDbotCreatedBy returns a boolean if a field has been set.
func (o *AutomationScript) HasDbotCreatedBy() bool {
	if o != nil && o.DbotCreatedBy != nil {
		return true
	}

	return false
}

// SetDbotCreatedBy gets a reference to the given string and assigns it to the DbotCreatedBy field.
func (o *AutomationScript) SetDbotCreatedBy(v string) {
	o.DbotCreatedBy = &v
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise.
func (o *AutomationScript) GetDependsOn() map[string][]string {
	if o == nil || o.DependsOn == nil {
		var ret map[string][]string
		return ret
	}
	return *o.DependsOn
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetDependsOnOk() (*map[string][]string, bool) {
	if o == nil || o.DependsOn == nil {
		return nil, false
	}
	return o.DependsOn, true
}

// HasDependsOn returns a boolean if a field has been set.
func (o *AutomationScript) HasDependsOn() bool {
	if o != nil && o.DependsOn != nil {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given map[string][]string and assigns it to the DependsOn field.
func (o *AutomationScript) SetDependsOn(v map[string][]string) {
	o.DependsOn = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *AutomationScript) GetDeprecated() bool {
	if o == nil || o.Deprecated == nil {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetDeprecatedOk() (*bool, bool) {
	if o == nil || o.Deprecated == nil {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *AutomationScript) HasDeprecated() bool {
	if o != nil && o.Deprecated != nil {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *AutomationScript) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetDetached returns the Detached field value if set, zero value otherwise.
func (o *AutomationScript) GetDetached() bool {
	if o == nil || o.Detached == nil {
		var ret bool
		return ret
	}
	return *o.Detached
}

// GetDetachedOk returns a tuple with the Detached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetDetachedOk() (*bool, bool) {
	if o == nil || o.Detached == nil {
		return nil, false
	}
	return o.Detached, true
}

// HasDetached returns a boolean if a field has been set.
func (o *AutomationScript) HasDetached() bool {
	if o != nil && o.Detached != nil {
		return true
	}

	return false
}

// SetDetached gets a reference to the given bool and assigns it to the Detached field.
func (o *AutomationScript) SetDetached(v bool) {
	o.Detached = &v
}

// GetDockerImage returns the DockerImage field value if set, zero value otherwise.
func (o *AutomationScript) GetDockerImage() string {
	if o == nil || o.DockerImage == nil {
		var ret string
		return ret
	}
	return *o.DockerImage
}

// GetDockerImageOk returns a tuple with the DockerImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetDockerImageOk() (*string, bool) {
	if o == nil || o.DockerImage == nil {
		return nil, false
	}
	return o.DockerImage, true
}

// HasDockerImage returns a boolean if a field has been set.
func (o *AutomationScript) HasDockerImage() bool {
	if o != nil && o.DockerImage != nil {
		return true
	}

	return false
}

// SetDockerImage gets a reference to the given string and assigns it to the DockerImage field.
func (o *AutomationScript) SetDockerImage(v string) {
	o.DockerImage = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AutomationScript) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AutomationScript) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AutomationScript) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEngine returns the Engine field value if set, zero value otherwise.
func (o *AutomationScript) GetEngine() string {
	if o == nil || o.Engine == nil {
		var ret string
		return ret
	}
	return *o.Engine
}

// GetEngineOk returns a tuple with the Engine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetEngineOk() (*string, bool) {
	if o == nil || o.Engine == nil {
		return nil, false
	}
	return o.Engine, true
}

// HasEngine returns a boolean if a field has been set.
func (o *AutomationScript) HasEngine() bool {
	if o != nil && o.Engine != nil {
		return true
	}

	return false
}

// SetEngine gets a reference to the given string and assigns it to the Engine field.
func (o *AutomationScript) SetEngine(v string) {
	o.Engine = &v
}

// GetEngineGroup returns the EngineGroup field value if set, zero value otherwise.
func (o *AutomationScript) GetEngineGroup() string {
	if o == nil || o.EngineGroup == nil {
		var ret string
		return ret
	}
	return *o.EngineGroup
}

// GetEngineGroupOk returns a tuple with the EngineGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetEngineGroupOk() (*string, bool) {
	if o == nil || o.EngineGroup == nil {
		return nil, false
	}
	return o.EngineGroup, true
}

// HasEngineGroup returns a boolean if a field has been set.
func (o *AutomationScript) HasEngineGroup() bool {
	if o != nil && o.EngineGroup != nil {
		return true
	}

	return false
}

// SetEngineGroup gets a reference to the given string and assigns it to the EngineGroup field.
func (o *AutomationScript) SetEngineGroup(v string) {
	o.EngineGroup = &v
}

// GetFromServerVersion returns the FromServerVersion field value if set, zero value otherwise.
func (o *AutomationScript) GetFromServerVersion() string {
	if o == nil || o.FromServerVersion == nil {
		var ret string
		return ret
	}
	return *o.FromServerVersion
}

// GetFromServerVersionOk returns a tuple with the FromServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetFromServerVersionOk() (*string, bool) {
	if o == nil || o.FromServerVersion == nil {
		return nil, false
	}
	return o.FromServerVersion, true
}

// HasFromServerVersion returns a boolean if a field has been set.
func (o *AutomationScript) HasFromServerVersion() bool {
	if o != nil && o.FromServerVersion != nil {
		return true
	}

	return false
}

// SetFromServerVersion gets a reference to the given string and assigns it to the FromServerVersion field.
func (o *AutomationScript) SetFromServerVersion(v string) {
	o.FromServerVersion = &v
}

// GetHasRole returns the HasRole field value if set, zero value otherwise.
func (o *AutomationScript) GetHasRole() bool {
	if o == nil || o.HasRole == nil {
		var ret bool
		return ret
	}
	return *o.HasRole
}

// GetHasRoleOk returns a tuple with the HasRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetHasRoleOk() (*bool, bool) {
	if o == nil || o.HasRole == nil {
		return nil, false
	}
	return o.HasRole, true
}

// HasHasRole returns a boolean if a field has been set.
func (o *AutomationScript) HasHasRole() bool {
	if o != nil && o.HasRole != nil {
		return true
	}

	return false
}

// SetHasRole gets a reference to the given bool and assigns it to the HasRole field.
func (o *AutomationScript) SetHasRole(v bool) {
	o.HasRole = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *AutomationScript) GetHidden() bool {
	if o == nil || o.Hidden == nil {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetHiddenOk() (*bool, bool) {
	if o == nil || o.Hidden == nil {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *AutomationScript) HasHidden() bool {
	if o != nil && o.Hidden != nil {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *AutomationScript) SetHidden(v bool) {
	o.Hidden = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *AutomationScript) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *AutomationScript) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *AutomationScript) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AutomationScript) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AutomationScript) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AutomationScript) SetId(v string) {
	o.Id = &v
}

// GetImportant returns the Important field value if set, zero value otherwise.
func (o *AutomationScript) GetImportant() []Important {
	if o == nil || o.Important == nil {
		var ret []Important
		return ret
	}
	return *o.Important
}

// GetImportantOk returns a tuple with the Important field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetImportantOk() (*[]Important, bool) {
	if o == nil || o.Important == nil {
		return nil, false
	}
	return o.Important, true
}

// HasImportant returns a boolean if a field has been set.
func (o *AutomationScript) HasImportant() bool {
	if o != nil && o.Important != nil {
		return true
	}

	return false
}

// SetImportant gets a reference to the given []Important and assigns it to the Important field.
func (o *AutomationScript) SetImportant(v []Important) {
	o.Important = &v
}

// GetItemVersion returns the ItemVersion field value if set, zero value otherwise.
func (o *AutomationScript) GetItemVersion() string {
	if o == nil || o.ItemVersion == nil {
		var ret string
		return ret
	}
	return *o.ItemVersion
}

// GetItemVersionOk returns a tuple with the ItemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetItemVersionOk() (*string, bool) {
	if o == nil || o.ItemVersion == nil {
		return nil, false
	}
	return o.ItemVersion, true
}

// HasItemVersion returns a boolean if a field has been set.
func (o *AutomationScript) HasItemVersion() bool {
	if o != nil && o.ItemVersion != nil {
		return true
	}

	return false
}

// SetItemVersion gets a reference to the given string and assigns it to the ItemVersion field.
func (o *AutomationScript) SetItemVersion(v string) {
	o.ItemVersion = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *AutomationScript) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *AutomationScript) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *AutomationScript) SetLocked(v bool) {
	o.Locked = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *AutomationScript) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *AutomationScript) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *AutomationScript) SetModified(v time.Time) {
	o.Modified = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AutomationScript) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AutomationScript) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AutomationScript) SetName(v string) {
	o.Name = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *AutomationScript) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *AutomationScript) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *AutomationScript) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *AutomationScript) GetOutputs() []Output {
	if o == nil || o.Outputs == nil {
		var ret []Output
		return ret
	}
	return *o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetOutputsOk() (*[]Output, bool) {
	if o == nil || o.Outputs == nil {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *AutomationScript) HasOutputs() bool {
	if o != nil && o.Outputs != nil {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []Output and assigns it to the Outputs field.
func (o *AutomationScript) SetOutputs(v []Output) {
	o.Outputs = &v
}

// GetPackID returns the PackID field value if set, zero value otherwise.
func (o *AutomationScript) GetPackID() string {
	if o == nil || o.PackID == nil {
		var ret string
		return ret
	}
	return *o.PackID
}

// GetPackIDOk returns a tuple with the PackID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetPackIDOk() (*string, bool) {
	if o == nil || o.PackID == nil {
		return nil, false
	}
	return o.PackID, true
}

// HasPackID returns a boolean if a field has been set.
func (o *AutomationScript) HasPackID() bool {
	if o != nil && o.PackID != nil {
		return true
	}

	return false
}

// SetPackID gets a reference to the given string and assigns it to the PackID field.
func (o *AutomationScript) SetPackID(v string) {
	o.PackID = &v
}

// GetPackPropagationLabels returns the PackPropagationLabels field value if set, zero value otherwise.
func (o *AutomationScript) GetPackPropagationLabels() []string {
	if o == nil || o.PackPropagationLabels == nil {
		var ret []string
		return ret
	}
	return *o.PackPropagationLabels
}

// GetPackPropagationLabelsOk returns a tuple with the PackPropagationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetPackPropagationLabelsOk() (*[]string, bool) {
	if o == nil || o.PackPropagationLabels == nil {
		return nil, false
	}
	return o.PackPropagationLabels, true
}

// HasPackPropagationLabels returns a boolean if a field has been set.
func (o *AutomationScript) HasPackPropagationLabels() bool {
	if o != nil && o.PackPropagationLabels != nil {
		return true
	}

	return false
}

// SetPackPropagationLabels gets a reference to the given []string and assigns it to the PackPropagationLabels field.
func (o *AutomationScript) SetPackPropagationLabels(v []string) {
	o.PackPropagationLabels = &v
}

// GetPolling returns the Polling field value if set, zero value otherwise.
func (o *AutomationScript) GetPolling() bool {
	if o == nil || o.Polling == nil {
		var ret bool
		return ret
	}
	return *o.Polling
}

// GetPollingOk returns a tuple with the Polling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetPollingOk() (*bool, bool) {
	if o == nil || o.Polling == nil {
		return nil, false
	}
	return o.Polling, true
}

// HasPolling returns a boolean if a field has been set.
func (o *AutomationScript) HasPolling() bool {
	if o != nil && o.Polling != nil {
		return true
	}

	return false
}

// SetPolling gets a reference to the given bool and assigns it to the Polling field.
func (o *AutomationScript) SetPolling(v bool) {
	o.Polling = &v
}

// GetPrevName returns the PrevName field value if set, zero value otherwise.
func (o *AutomationScript) GetPrevName() string {
	if o == nil || o.PrevName == nil {
		var ret string
		return ret
	}
	return *o.PrevName
}

// GetPrevNameOk returns a tuple with the PrevName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetPrevNameOk() (*string, bool) {
	if o == nil || o.PrevName == nil {
		return nil, false
	}
	return o.PrevName, true
}

// HasPrevName returns a boolean if a field has been set.
func (o *AutomationScript) HasPrevName() bool {
	if o != nil && o.PrevName != nil {
		return true
	}

	return false
}

// SetPrevName gets a reference to the given string and assigns it to the PrevName field.
func (o *AutomationScript) SetPrevName(v string) {
	o.PrevName = &v
}

// GetPreviousAllRead returns the PreviousAllRead field value if set, zero value otherwise.
func (o *AutomationScript) GetPreviousAllRead() bool {
	if o == nil || o.PreviousAllRead == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllRead
}

// GetPreviousAllReadOk returns a tuple with the PreviousAllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetPreviousAllReadOk() (*bool, bool) {
	if o == nil || o.PreviousAllRead == nil {
		return nil, false
	}
	return o.PreviousAllRead, true
}

// HasPreviousAllRead returns a boolean if a field has been set.
func (o *AutomationScript) HasPreviousAllRead() bool {
	if o != nil && o.PreviousAllRead != nil {
		return true
	}

	return false
}

// SetPreviousAllRead gets a reference to the given bool and assigns it to the PreviousAllRead field.
func (o *AutomationScript) SetPreviousAllRead(v bool) {
	o.PreviousAllRead = &v
}

// GetPreviousAllReadWrite returns the PreviousAllReadWrite field value if set, zero value otherwise.
func (o *AutomationScript) GetPreviousAllReadWrite() bool {
	if o == nil || o.PreviousAllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllReadWrite
}

// GetPreviousAllReadWriteOk returns a tuple with the PreviousAllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetPreviousAllReadWriteOk() (*bool, bool) {
	if o == nil || o.PreviousAllReadWrite == nil {
		return nil, false
	}
	return o.PreviousAllReadWrite, true
}

// HasPreviousAllReadWrite returns a boolean if a field has been set.
func (o *AutomationScript) HasPreviousAllReadWrite() bool {
	if o != nil && o.PreviousAllReadWrite != nil {
		return true
	}

	return false
}

// SetPreviousAllReadWrite gets a reference to the given bool and assigns it to the PreviousAllReadWrite field.
func (o *AutomationScript) SetPreviousAllReadWrite(v bool) {
	o.PreviousAllReadWrite = &v
}

// GetPreviousRoles returns the PreviousRoles field value if set, zero value otherwise.
func (o *AutomationScript) GetPreviousRoles() []string {
	if o == nil || o.PreviousRoles == nil {
		var ret []string
		return ret
	}
	return *o.PreviousRoles
}

// GetPreviousRolesOk returns a tuple with the PreviousRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetPreviousRolesOk() (*[]string, bool) {
	if o == nil || o.PreviousRoles == nil {
		return nil, false
	}
	return o.PreviousRoles, true
}

// HasPreviousRoles returns a boolean if a field has been set.
func (o *AutomationScript) HasPreviousRoles() bool {
	if o != nil && o.PreviousRoles != nil {
		return true
	}

	return false
}

// SetPreviousRoles gets a reference to the given []string and assigns it to the PreviousRoles field.
func (o *AutomationScript) SetPreviousRoles(v []string) {
	o.PreviousRoles = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *AutomationScript) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *AutomationScript) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *AutomationScript) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *AutomationScript) GetPrivate() bool {
	if o == nil || o.Private == nil {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetPrivateOk() (*bool, bool) {
	if o == nil || o.Private == nil {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *AutomationScript) HasPrivate() bool {
	if o != nil && o.Private != nil {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *AutomationScript) SetPrivate(v bool) {
	o.Private = &v
}

// GetPropagationLabels returns the PropagationLabels field value if set, zero value otherwise.
func (o *AutomationScript) GetPropagationLabels() []string {
	if o == nil || o.PropagationLabels == nil {
		var ret []string
		return ret
	}
	return *o.PropagationLabels
}

// GetPropagationLabelsOk returns a tuple with the PropagationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetPropagationLabelsOk() (*[]string, bool) {
	if o == nil || o.PropagationLabels == nil {
		return nil, false
	}
	return o.PropagationLabels, true
}

// HasPropagationLabels returns a boolean if a field has been set.
func (o *AutomationScript) HasPropagationLabels() bool {
	if o != nil && o.PropagationLabels != nil {
		return true
	}

	return false
}

// SetPropagationLabels gets a reference to the given []string and assigns it to the PropagationLabels field.
func (o *AutomationScript) SetPropagationLabels(v []string) {
	o.PropagationLabels = &v
}

// GetPswd returns the Pswd field value if set, zero value otherwise.
func (o *AutomationScript) GetPswd() string {
	if o == nil || o.Pswd == nil {
		var ret string
		return ret
	}
	return *o.Pswd
}

// GetPswdOk returns a tuple with the Pswd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetPswdOk() (*string, bool) {
	if o == nil || o.Pswd == nil {
		return nil, false
	}
	return o.Pswd, true
}

// HasPswd returns a boolean if a field has been set.
func (o *AutomationScript) HasPswd() bool {
	if o != nil && o.Pswd != nil {
		return true
	}

	return false
}

// SetPswd gets a reference to the given string and assigns it to the Pswd field.
func (o *AutomationScript) SetPswd(v string) {
	o.Pswd = &v
}

// GetRawTags returns the RawTags field value if set, zero value otherwise.
func (o *AutomationScript) GetRawTags() []string {
	if o == nil || o.RawTags == nil {
		var ret []string
		return ret
	}
	return *o.RawTags
}

// GetRawTagsOk returns a tuple with the RawTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetRawTagsOk() (*[]string, bool) {
	if o == nil || o.RawTags == nil {
		return nil, false
	}
	return o.RawTags, true
}

// HasRawTags returns a boolean if a field has been set.
func (o *AutomationScript) HasRawTags() bool {
	if o != nil && o.RawTags != nil {
		return true
	}

	return false
}

// SetRawTags gets a reference to the given []string and assigns it to the RawTags field.
func (o *AutomationScript) SetRawTags(v []string) {
	o.RawTags = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *AutomationScript) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *AutomationScript) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *AutomationScript) SetRoles(v []string) {
	o.Roles = &v
}

// GetRunAs returns the RunAs field value if set, zero value otherwise.
func (o *AutomationScript) GetRunAs() string {
	if o == nil || o.RunAs == nil {
		var ret string
		return ret
	}
	return *o.RunAs
}

// GetRunAsOk returns a tuple with the RunAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetRunAsOk() (*string, bool) {
	if o == nil || o.RunAs == nil {
		return nil, false
	}
	return o.RunAs, true
}

// HasRunAs returns a boolean if a field has been set.
func (o *AutomationScript) HasRunAs() bool {
	if o != nil && o.RunAs != nil {
		return true
	}

	return false
}

// SetRunAs gets a reference to the given string and assigns it to the RunAs field.
func (o *AutomationScript) SetRunAs(v string) {
	o.RunAs = &v
}

// GetRunOnce returns the RunOnce field value if set, zero value otherwise.
func (o *AutomationScript) GetRunOnce() bool {
	if o == nil || o.RunOnce == nil {
		var ret bool
		return ret
	}
	return *o.RunOnce
}

// GetRunOnceOk returns a tuple with the RunOnce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetRunOnceOk() (*bool, bool) {
	if o == nil || o.RunOnce == nil {
		return nil, false
	}
	return o.RunOnce, true
}

// HasRunOnce returns a boolean if a field has been set.
func (o *AutomationScript) HasRunOnce() bool {
	if o != nil && o.RunOnce != nil {
		return true
	}

	return false
}

// SetRunOnce gets a reference to the given bool and assigns it to the RunOnce field.
func (o *AutomationScript) SetRunOnce(v bool) {
	o.RunOnce = &v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *AutomationScript) GetScript() string {
	if o == nil || o.Script == nil {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetScriptOk() (*string, bool) {
	if o == nil || o.Script == nil {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *AutomationScript) HasScript() bool {
	if o != nil && o.Script != nil {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *AutomationScript) SetScript(v string) {
	o.Script = &v
}

// GetScriptTarget returns the ScriptTarget field value if set, zero value otherwise.
func (o *AutomationScript) GetScriptTarget() int64 {
	if o == nil || o.ScriptTarget == nil {
		var ret int64
		return ret
	}
	return *o.ScriptTarget
}

// GetScriptTargetOk returns a tuple with the ScriptTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetScriptTargetOk() (*int64, bool) {
	if o == nil || o.ScriptTarget == nil {
		return nil, false
	}
	return o.ScriptTarget, true
}

// HasScriptTarget returns a boolean if a field has been set.
func (o *AutomationScript) HasScriptTarget() bool {
	if o != nil && o.ScriptTarget != nil {
		return true
	}

	return false
}

// SetScriptTarget gets a reference to the given int64 and assigns it to the ScriptTarget field.
func (o *AutomationScript) SetScriptTarget(v int64) {
	o.ScriptTarget = &v
}

// GetSearchableName returns the SearchableName field value if set, zero value otherwise.
func (o *AutomationScript) GetSearchableName() string {
	if o == nil || o.SearchableName == nil {
		var ret string
		return ret
	}
	return *o.SearchableName
}

// GetSearchableNameOk returns a tuple with the SearchableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetSearchableNameOk() (*string, bool) {
	if o == nil || o.SearchableName == nil {
		return nil, false
	}
	return o.SearchableName, true
}

// HasSearchableName returns a boolean if a field has been set.
func (o *AutomationScript) HasSearchableName() bool {
	if o != nil && o.SearchableName != nil {
		return true
	}

	return false
}

// SetSearchableName gets a reference to the given string and assigns it to the SearchableName field.
func (o *AutomationScript) SetSearchableName(v string) {
	o.SearchableName = &v
}

// GetSensitive returns the Sensitive field value if set, zero value otherwise.
func (o *AutomationScript) GetSensitive() bool {
	if o == nil || o.Sensitive == nil {
		var ret bool
		return ret
	}
	return *o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetSensitiveOk() (*bool, bool) {
	if o == nil || o.Sensitive == nil {
		return nil, false
	}
	return o.Sensitive, true
}

// HasSensitive returns a boolean if a field has been set.
func (o *AutomationScript) HasSensitive() bool {
	if o != nil && o.Sensitive != nil {
		return true
	}

	return false
}

// SetSensitive gets a reference to the given bool and assigns it to the Sensitive field.
func (o *AutomationScript) SetSensitive(v bool) {
	o.Sensitive = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *AutomationScript) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *AutomationScript) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *AutomationScript) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetShouldCommit returns the ShouldCommit field value if set, zero value otherwise.
func (o *AutomationScript) GetShouldCommit() bool {
	if o == nil || o.ShouldCommit == nil {
		var ret bool
		return ret
	}
	return *o.ShouldCommit
}

// GetShouldCommitOk returns a tuple with the ShouldCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetShouldCommitOk() (*bool, bool) {
	if o == nil || o.ShouldCommit == nil {
		return nil, false
	}
	return o.ShouldCommit, true
}

// HasShouldCommit returns a boolean if a field has been set.
func (o *AutomationScript) HasShouldCommit() bool {
	if o != nil && o.ShouldCommit != nil {
		return true
	}

	return false
}

// SetShouldCommit gets a reference to the given bool and assigns it to the ShouldCommit field.
func (o *AutomationScript) SetShouldCommit(v bool) {
	o.ShouldCommit = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *AutomationScript) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *AutomationScript) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *AutomationScript) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetSourceScripID returns the SourceScripID field value if set, zero value otherwise.
func (o *AutomationScript) GetSourceScripID() string {
	if o == nil || o.SourceScripID == nil {
		var ret string
		return ret
	}
	return *o.SourceScripID
}

// GetSourceScripIDOk returns a tuple with the SourceScripID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetSourceScripIDOk() (*string, bool) {
	if o == nil || o.SourceScripID == nil {
		return nil, false
	}
	return o.SourceScripID, true
}

// HasSourceScripID returns a boolean if a field has been set.
func (o *AutomationScript) HasSourceScripID() bool {
	if o != nil && o.SourceScripID != nil {
		return true
	}

	return false
}

// SetSourceScripID gets a reference to the given string and assigns it to the SourceScripID field.
func (o *AutomationScript) SetSourceScripID(v string) {
	o.SourceScripID = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *AutomationScript) GetSubtype() string {
	if o == nil || o.Subtype == nil {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetSubtypeOk() (*string, bool) {
	if o == nil || o.Subtype == nil {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *AutomationScript) HasSubtype() bool {
	if o != nil && o.Subtype != nil {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *AutomationScript) SetSubtype(v string) {
	o.Subtype = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *AutomationScript) GetSystem() bool {
	if o == nil || o.System == nil {
		var ret bool
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetSystemOk() (*bool, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *AutomationScript) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given bool and assigns it to the System field.
func (o *AutomationScript) SetSystem(v bool) {
	o.System = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AutomationScript) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AutomationScript) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *AutomationScript) SetTags(v []string) {
	o.Tags = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *AutomationScript) GetTimeout() int64 {
	if o == nil || o.Timeout == nil {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetTimeoutOk() (*int64, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *AutomationScript) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *AutomationScript) SetTimeout(v int64) {
	o.Timeout = &v
}

// GetToServerVersion returns the ToServerVersion field value if set, zero value otherwise.
func (o *AutomationScript) GetToServerVersion() string {
	if o == nil || o.ToServerVersion == nil {
		var ret string
		return ret
	}
	return *o.ToServerVersion
}

// GetToServerVersionOk returns a tuple with the ToServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetToServerVersionOk() (*string, bool) {
	if o == nil || o.ToServerVersion == nil {
		return nil, false
	}
	return o.ToServerVersion, true
}

// HasToServerVersion returns a boolean if a field has been set.
func (o *AutomationScript) HasToServerVersion() bool {
	if o != nil && o.ToServerVersion != nil {
		return true
	}

	return false
}

// SetToServerVersion gets a reference to the given string and assigns it to the ToServerVersion field.
func (o *AutomationScript) SetToServerVersion(v string) {
	o.ToServerVersion = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AutomationScript) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AutomationScript) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AutomationScript) SetType(v string) {
	o.Type = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AutomationScript) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AutomationScript) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *AutomationScript) SetUser(v string) {
	o.User = &v
}

// GetVcShouldIgnore returns the VcShouldIgnore field value if set, zero value otherwise.
func (o *AutomationScript) GetVcShouldIgnore() bool {
	if o == nil || o.VcShouldIgnore == nil {
		var ret bool
		return ret
	}
	return *o.VcShouldIgnore
}

// GetVcShouldIgnoreOk returns a tuple with the VcShouldIgnore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetVcShouldIgnoreOk() (*bool, bool) {
	if o == nil || o.VcShouldIgnore == nil {
		return nil, false
	}
	return o.VcShouldIgnore, true
}

// HasVcShouldIgnore returns a boolean if a field has been set.
func (o *AutomationScript) HasVcShouldIgnore() bool {
	if o != nil && o.VcShouldIgnore != nil {
		return true
	}

	return false
}

// SetVcShouldIgnore gets a reference to the given bool and assigns it to the VcShouldIgnore field.
func (o *AutomationScript) SetVcShouldIgnore(v bool) {
	o.VcShouldIgnore = &v
}

// GetVcShouldKeepItemLegacyProdMachine returns the VcShouldKeepItemLegacyProdMachine field value if set, zero value otherwise.
func (o *AutomationScript) GetVcShouldKeepItemLegacyProdMachine() bool {
	if o == nil || o.VcShouldKeepItemLegacyProdMachine == nil {
		var ret bool
		return ret
	}
	return *o.VcShouldKeepItemLegacyProdMachine
}

// GetVcShouldKeepItemLegacyProdMachineOk returns a tuple with the VcShouldKeepItemLegacyProdMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetVcShouldKeepItemLegacyProdMachineOk() (*bool, bool) {
	if o == nil || o.VcShouldKeepItemLegacyProdMachine == nil {
		return nil, false
	}
	return o.VcShouldKeepItemLegacyProdMachine, true
}

// HasVcShouldKeepItemLegacyProdMachine returns a boolean if a field has been set.
func (o *AutomationScript) HasVcShouldKeepItemLegacyProdMachine() bool {
	if o != nil && o.VcShouldKeepItemLegacyProdMachine != nil {
		return true
	}

	return false
}

// SetVcShouldKeepItemLegacyProdMachine gets a reference to the given bool and assigns it to the VcShouldKeepItemLegacyProdMachine field.
func (o *AutomationScript) SetVcShouldKeepItemLegacyProdMachine(v bool) {
	o.VcShouldKeepItemLegacyProdMachine = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AutomationScript) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AutomationScript) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *AutomationScript) SetVersion(v int64) {
	o.Version = &v
}

// GetVisualScript returns the VisualScript field value if set, zero value otherwise.
func (o *AutomationScript) GetVisualScript() string {
	if o == nil || o.VisualScript == nil {
		var ret string
		return ret
	}
	return *o.VisualScript
}

// GetVisualScriptOk returns a tuple with the VisualScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetVisualScriptOk() (*string, bool) {
	if o == nil || o.VisualScript == nil {
		return nil, false
	}
	return o.VisualScript, true
}

// HasVisualScript returns a boolean if a field has been set.
func (o *AutomationScript) HasVisualScript() bool {
	if o != nil && o.VisualScript != nil {
		return true
	}

	return false
}

// SetVisualScript gets a reference to the given string and assigns it to the VisualScript field.
func (o *AutomationScript) SetVisualScript(v string) {
	o.VisualScript = &v
}

// GetXsoarHasReadOnlyRole returns the XsoarHasReadOnlyRole field value if set, zero value otherwise.
func (o *AutomationScript) GetXsoarHasReadOnlyRole() bool {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		var ret bool
		return ret
	}
	return *o.XsoarHasReadOnlyRole
}

// GetXsoarHasReadOnlyRoleOk returns a tuple with the XsoarHasReadOnlyRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetXsoarHasReadOnlyRoleOk() (*bool, bool) {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		return nil, false
	}
	return o.XsoarHasReadOnlyRole, true
}

// HasXsoarHasReadOnlyRole returns a boolean if a field has been set.
func (o *AutomationScript) HasXsoarHasReadOnlyRole() bool {
	if o != nil && o.XsoarHasReadOnlyRole != nil {
		return true
	}

	return false
}

// SetXsoarHasReadOnlyRole gets a reference to the given bool and assigns it to the XsoarHasReadOnlyRole field.
func (o *AutomationScript) SetXsoarHasReadOnlyRole(v bool) {
	o.XsoarHasReadOnlyRole = &v
}

// GetXsoarPreviousReadOnlyRoles returns the XsoarPreviousReadOnlyRoles field value if set, zero value otherwise.
func (o *AutomationScript) GetXsoarPreviousReadOnlyRoles() []string {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarPreviousReadOnlyRoles
}

// GetXsoarPreviousReadOnlyRolesOk returns a tuple with the XsoarPreviousReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetXsoarPreviousReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarPreviousReadOnlyRoles, true
}

// HasXsoarPreviousReadOnlyRoles returns a boolean if a field has been set.
func (o *AutomationScript) HasXsoarPreviousReadOnlyRoles() bool {
	if o != nil && o.XsoarPreviousReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarPreviousReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarPreviousReadOnlyRoles field.
func (o *AutomationScript) SetXsoarPreviousReadOnlyRoles(v []string) {
	o.XsoarPreviousReadOnlyRoles = &v
}

// GetXsoarReadOnlyRoles returns the XsoarReadOnlyRoles field value if set, zero value otherwise.
func (o *AutomationScript) GetXsoarReadOnlyRoles() []string {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarReadOnlyRoles
}

// GetXsoarReadOnlyRolesOk returns a tuple with the XsoarReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationScript) GetXsoarReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarReadOnlyRoles, true
}

// HasXsoarReadOnlyRoles returns a boolean if a field has been set.
func (o *AutomationScript) HasXsoarReadOnlyRoles() bool {
	if o != nil && o.XsoarReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarReadOnlyRoles field.
func (o *AutomationScript) SetXsoarReadOnlyRoles(v []string) {
	o.XsoarReadOnlyRoles = &v
}

func (o AutomationScript) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllRead != nil {
		toSerialize["allRead"] = o.AllRead
	}
	if o.AllReadWrite != nil {
		toSerialize["allReadWrite"] = o.AllReadWrite
	}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.CommitMessage != nil {
		toSerialize["commitMessage"] = o.CommitMessage
	}
	if o.ContextKeys != nil {
		toSerialize["contextKeys"] = o.ContextKeys
	}
	if o.DbotCreatedBy != nil {
		toSerialize["dbotCreatedBy"] = o.DbotCreatedBy
	}
	if o.DependsOn != nil {
		toSerialize["dependsOn"] = o.DependsOn
	}
	if o.Deprecated != nil {
		toSerialize["deprecated"] = o.Deprecated
	}
	if o.Detached != nil {
		toSerialize["detached"] = o.Detached
	}
	if o.DockerImage != nil {
		toSerialize["dockerImage"] = o.DockerImage
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Engine != nil {
		toSerialize["engine"] = o.Engine
	}
	if o.EngineGroup != nil {
		toSerialize["engineGroup"] = o.EngineGroup
	}
	if o.FromServerVersion != nil {
		toSerialize["fromServerVersion"] = o.FromServerVersion
	}
	if o.HasRole != nil {
		toSerialize["hasRole"] = o.HasRole
	}
	if o.Hidden != nil {
		toSerialize["hidden"] = o.Hidden
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Important != nil {
		toSerialize["important"] = o.Important
	}
	if o.ItemVersion != nil {
		toSerialize["itemVersion"] = o.ItemVersion
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.Outputs != nil {
		toSerialize["outputs"] = o.Outputs
	}
	if o.PackID != nil {
		toSerialize["packID"] = o.PackID
	}
	if o.PackPropagationLabels != nil {
		toSerialize["packPropagationLabels"] = o.PackPropagationLabels
	}
	if o.Polling != nil {
		toSerialize["polling"] = o.Polling
	}
	if o.PrevName != nil {
		toSerialize["prevName"] = o.PrevName
	}
	if o.PreviousAllRead != nil {
		toSerialize["previousAllRead"] = o.PreviousAllRead
	}
	if o.PreviousAllReadWrite != nil {
		toSerialize["previousAllReadWrite"] = o.PreviousAllReadWrite
	}
	if o.PreviousRoles != nil {
		toSerialize["previousRoles"] = o.PreviousRoles
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.Private != nil {
		toSerialize["private"] = o.Private
	}
	if o.PropagationLabels != nil {
		toSerialize["propagationLabels"] = o.PropagationLabels
	}
	if o.Pswd != nil {
		toSerialize["pswd"] = o.Pswd
	}
	if o.RawTags != nil {
		toSerialize["rawTags"] = o.RawTags
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.RunAs != nil {
		toSerialize["runAs"] = o.RunAs
	}
	if o.RunOnce != nil {
		toSerialize["runOnce"] = o.RunOnce
	}
	if o.Script != nil {
		toSerialize["script"] = o.Script
	}
	if o.ScriptTarget != nil {
		toSerialize["scriptTarget"] = o.ScriptTarget
	}
	if o.SearchableName != nil {
		toSerialize["searchableName"] = o.SearchableName
	}
	if o.Sensitive != nil {
		toSerialize["sensitive"] = o.Sensitive
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.ShouldCommit != nil {
		toSerialize["shouldCommit"] = o.ShouldCommit
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.SourceScripID != nil {
		toSerialize["sourceScripID"] = o.SourceScripID
	}
	if o.Subtype != nil {
		toSerialize["subtype"] = o.Subtype
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Timeout != nil {
		toSerialize["timeout"] = o.Timeout
	}
	if o.ToServerVersion != nil {
		toSerialize["toServerVersion"] = o.ToServerVersion
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.VcShouldIgnore != nil {
		toSerialize["vcShouldIgnore"] = o.VcShouldIgnore
	}
	if o.VcShouldKeepItemLegacyProdMachine != nil {
		toSerialize["vcShouldKeepItemLegacyProdMachine"] = o.VcShouldKeepItemLegacyProdMachine
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.VisualScript != nil {
		toSerialize["visualScript"] = o.VisualScript
	}
	if o.XsoarHasReadOnlyRole != nil {
		toSerialize["xsoarHasReadOnlyRole"] = o.XsoarHasReadOnlyRole
	}
	if o.XsoarPreviousReadOnlyRoles != nil {
		toSerialize["xsoarPreviousReadOnlyRoles"] = o.XsoarPreviousReadOnlyRoles
	}
	if o.XsoarReadOnlyRoles != nil {
		toSerialize["xsoarReadOnlyRoles"] = o.XsoarReadOnlyRoles
	}
	return json.Marshal(toSerialize)
}

type NullableAutomationScript struct {
	value *AutomationScript
	isSet bool
}

func (v NullableAutomationScript) Get() *AutomationScript {
	return v.value
}

func (v *NullableAutomationScript) Set(val *AutomationScript) {
	v.value = val
	v.isSet = true
}

func (v NullableAutomationScript) IsSet() bool {
	return v.isSet
}

func (v *NullableAutomationScript) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutomationScript(val *AutomationScript) *NullableAutomationScript {
	return &NullableAutomationScript{value: val, isSet: true}
}

func (v NullableAutomationScript) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutomationScript) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
