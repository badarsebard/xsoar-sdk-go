/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Command Command supported by a module
type Command struct {
	Arguments       *[]Argument  `json:"arguments,omitempty"`
	Cartesian       *bool        `json:"cartesian,omitempty"`
	Deprecated      *bool        `json:"deprecated,omitempty"`
	Description     *string      `json:"description,omitempty"`
	DocsHidden      *bool        `json:"docsHidden,omitempty"`
	Execution       *bool        `json:"execution,omitempty"`
	Hidden          *bool        `json:"hidden,omitempty"`
	Important       *[]Important `json:"important,omitempty"`
	IndicatorAction *bool        `json:"indicatorAction,omitempty"`
	Name            *string      `json:"name,omitempty"`
	Outputs         *[]Output    `json:"outputs,omitempty"`
	Permitted       *bool        `json:"permitted,omitempty"`
	Polling         *bool        `json:"polling,omitempty"`
	Sensitive       *bool        `json:"sensitive,omitempty"`
	Timeout         *int64       `json:"timeout,omitempty"`
}

// NewCommand instantiates a new Command object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommand() *Command {
	this := Command{}
	return &this
}

// NewCommandWithDefaults instantiates a new Command object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandWithDefaults() *Command {
	this := Command{}
	return &this
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *Command) GetArguments() []Argument {
	if o == nil || o.Arguments == nil {
		var ret []Argument
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetArgumentsOk() (*[]Argument, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *Command) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []Argument and assigns it to the Arguments field.
func (o *Command) SetArguments(v []Argument) {
	o.Arguments = &v
}

// GetCartesian returns the Cartesian field value if set, zero value otherwise.
func (o *Command) GetCartesian() bool {
	if o == nil || o.Cartesian == nil {
		var ret bool
		return ret
	}
	return *o.Cartesian
}

// GetCartesianOk returns a tuple with the Cartesian field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetCartesianOk() (*bool, bool) {
	if o == nil || o.Cartesian == nil {
		return nil, false
	}
	return o.Cartesian, true
}

// HasCartesian returns a boolean if a field has been set.
func (o *Command) HasCartesian() bool {
	if o != nil && o.Cartesian != nil {
		return true
	}

	return false
}

// SetCartesian gets a reference to the given bool and assigns it to the Cartesian field.
func (o *Command) SetCartesian(v bool) {
	o.Cartesian = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *Command) GetDeprecated() bool {
	if o == nil || o.Deprecated == nil {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetDeprecatedOk() (*bool, bool) {
	if o == nil || o.Deprecated == nil {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *Command) HasDeprecated() bool {
	if o != nil && o.Deprecated != nil {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *Command) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Command) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Command) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Command) SetDescription(v string) {
	o.Description = &v
}

// GetDocsHidden returns the DocsHidden field value if set, zero value otherwise.
func (o *Command) GetDocsHidden() bool {
	if o == nil || o.DocsHidden == nil {
		var ret bool
		return ret
	}
	return *o.DocsHidden
}

// GetDocsHiddenOk returns a tuple with the DocsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetDocsHiddenOk() (*bool, bool) {
	if o == nil || o.DocsHidden == nil {
		return nil, false
	}
	return o.DocsHidden, true
}

// HasDocsHidden returns a boolean if a field has been set.
func (o *Command) HasDocsHidden() bool {
	if o != nil && o.DocsHidden != nil {
		return true
	}

	return false
}

// SetDocsHidden gets a reference to the given bool and assigns it to the DocsHidden field.
func (o *Command) SetDocsHidden(v bool) {
	o.DocsHidden = &v
}

// GetExecution returns the Execution field value if set, zero value otherwise.
func (o *Command) GetExecution() bool {
	if o == nil || o.Execution == nil {
		var ret bool
		return ret
	}
	return *o.Execution
}

// GetExecutionOk returns a tuple with the Execution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetExecutionOk() (*bool, bool) {
	if o == nil || o.Execution == nil {
		return nil, false
	}
	return o.Execution, true
}

// HasExecution returns a boolean if a field has been set.
func (o *Command) HasExecution() bool {
	if o != nil && o.Execution != nil {
		return true
	}

	return false
}

// SetExecution gets a reference to the given bool and assigns it to the Execution field.
func (o *Command) SetExecution(v bool) {
	o.Execution = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *Command) GetHidden() bool {
	if o == nil || o.Hidden == nil {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetHiddenOk() (*bool, bool) {
	if o == nil || o.Hidden == nil {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *Command) HasHidden() bool {
	if o != nil && o.Hidden != nil {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *Command) SetHidden(v bool) {
	o.Hidden = &v
}

// GetImportant returns the Important field value if set, zero value otherwise.
func (o *Command) GetImportant() []Important {
	if o == nil || o.Important == nil {
		var ret []Important
		return ret
	}
	return *o.Important
}

// GetImportantOk returns a tuple with the Important field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetImportantOk() (*[]Important, bool) {
	if o == nil || o.Important == nil {
		return nil, false
	}
	return o.Important, true
}

// HasImportant returns a boolean if a field has been set.
func (o *Command) HasImportant() bool {
	if o != nil && o.Important != nil {
		return true
	}

	return false
}

// SetImportant gets a reference to the given []Important and assigns it to the Important field.
func (o *Command) SetImportant(v []Important) {
	o.Important = &v
}

// GetIndicatorAction returns the IndicatorAction field value if set, zero value otherwise.
func (o *Command) GetIndicatorAction() bool {
	if o == nil || o.IndicatorAction == nil {
		var ret bool
		return ret
	}
	return *o.IndicatorAction
}

// GetIndicatorActionOk returns a tuple with the IndicatorAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetIndicatorActionOk() (*bool, bool) {
	if o == nil || o.IndicatorAction == nil {
		return nil, false
	}
	return o.IndicatorAction, true
}

// HasIndicatorAction returns a boolean if a field has been set.
func (o *Command) HasIndicatorAction() bool {
	if o != nil && o.IndicatorAction != nil {
		return true
	}

	return false
}

// SetIndicatorAction gets a reference to the given bool and assigns it to the IndicatorAction field.
func (o *Command) SetIndicatorAction(v bool) {
	o.IndicatorAction = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Command) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Command) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Command) SetName(v string) {
	o.Name = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *Command) GetOutputs() []Output {
	if o == nil || o.Outputs == nil {
		var ret []Output
		return ret
	}
	return *o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetOutputsOk() (*[]Output, bool) {
	if o == nil || o.Outputs == nil {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *Command) HasOutputs() bool {
	if o != nil && o.Outputs != nil {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []Output and assigns it to the Outputs field.
func (o *Command) SetOutputs(v []Output) {
	o.Outputs = &v
}

// GetPermitted returns the Permitted field value if set, zero value otherwise.
func (o *Command) GetPermitted() bool {
	if o == nil || o.Permitted == nil {
		var ret bool
		return ret
	}
	return *o.Permitted
}

// GetPermittedOk returns a tuple with the Permitted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetPermittedOk() (*bool, bool) {
	if o == nil || o.Permitted == nil {
		return nil, false
	}
	return o.Permitted, true
}

// HasPermitted returns a boolean if a field has been set.
func (o *Command) HasPermitted() bool {
	if o != nil && o.Permitted != nil {
		return true
	}

	return false
}

// SetPermitted gets a reference to the given bool and assigns it to the Permitted field.
func (o *Command) SetPermitted(v bool) {
	o.Permitted = &v
}

// GetPolling returns the Polling field value if set, zero value otherwise.
func (o *Command) GetPolling() bool {
	if o == nil || o.Polling == nil {
		var ret bool
		return ret
	}
	return *o.Polling
}

// GetPollingOk returns a tuple with the Polling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetPollingOk() (*bool, bool) {
	if o == nil || o.Polling == nil {
		return nil, false
	}
	return o.Polling, true
}

// HasPolling returns a boolean if a field has been set.
func (o *Command) HasPolling() bool {
	if o != nil && o.Polling != nil {
		return true
	}

	return false
}

// SetPolling gets a reference to the given bool and assigns it to the Polling field.
func (o *Command) SetPolling(v bool) {
	o.Polling = &v
}

// GetSensitive returns the Sensitive field value if set, zero value otherwise.
func (o *Command) GetSensitive() bool {
	if o == nil || o.Sensitive == nil {
		var ret bool
		return ret
	}
	return *o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetSensitiveOk() (*bool, bool) {
	if o == nil || o.Sensitive == nil {
		return nil, false
	}
	return o.Sensitive, true
}

// HasSensitive returns a boolean if a field has been set.
func (o *Command) HasSensitive() bool {
	if o != nil && o.Sensitive != nil {
		return true
	}

	return false
}

// SetSensitive gets a reference to the given bool and assigns it to the Sensitive field.
func (o *Command) SetSensitive(v bool) {
	o.Sensitive = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *Command) GetTimeout() int64 {
	if o == nil || o.Timeout == nil {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetTimeoutOk() (*int64, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *Command) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *Command) SetTimeout(v int64) {
	o.Timeout = &v
}

func (o Command) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	if o.Cartesian != nil {
		toSerialize["cartesian"] = o.Cartesian
	}
	if o.Deprecated != nil {
		toSerialize["deprecated"] = o.Deprecated
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DocsHidden != nil {
		toSerialize["docsHidden"] = o.DocsHidden
	}
	if o.Execution != nil {
		toSerialize["execution"] = o.Execution
	}
	if o.Hidden != nil {
		toSerialize["hidden"] = o.Hidden
	}
	if o.Important != nil {
		toSerialize["important"] = o.Important
	}
	if o.IndicatorAction != nil {
		toSerialize["indicatorAction"] = o.IndicatorAction
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Outputs != nil {
		toSerialize["outputs"] = o.Outputs
	}
	if o.Permitted != nil {
		toSerialize["permitted"] = o.Permitted
	}
	if o.Polling != nil {
		toSerialize["polling"] = o.Polling
	}
	if o.Sensitive != nil {
		toSerialize["sensitive"] = o.Sensitive
	}
	if o.Timeout != nil {
		toSerialize["timeout"] = o.Timeout
	}
	return json.Marshal(toSerialize)
}

type NullableCommand struct {
	value *Command
	isSet bool
}

func (v NullableCommand) Get() *Command {
	return v.value
}

func (v *NullableCommand) Set(val *Command) {
	v.value = val
	v.isSet = true
}

func (v NullableCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommand(val *Command) *NullableCommand {
	return &NullableCommand{value: val, isSet: true}
}

func (v NullableCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
