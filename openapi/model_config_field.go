/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfigField ConfigField holds a configuration field
type ConfigField struct {
	DefaultValue    *string   `json:"defaultValue,omitempty"`
	Display         *string   `json:"display,omitempty"`
	DisplayPassword *string   `json:"displayPassword,omitempty"`
	Hidden          *bool     `json:"hidden,omitempty"`
	HiddenPassword  *bool     `json:"hiddenPassword,omitempty"`
	HiddenUsername  *bool     `json:"hiddenUsername,omitempty"`
	Info            *string   `json:"info,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Options         *[]string `json:"options,omitempty"`
	Required        *bool     `json:"required,omitempty"`
	// ConfigDataType holds the type of a configuration field or command argument
	Type *float64 `json:"type,omitempty"`
}

// NewConfigField instantiates a new ConfigField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigField() *ConfigField {
	this := ConfigField{}
	return &this
}

// NewConfigFieldWithDefaults instantiates a new ConfigField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigFieldWithDefaults() *ConfigField {
	this := ConfigField{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *ConfigField) GetDefaultValue() string {
	if o == nil || o.DefaultValue == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigField) GetDefaultValueOk() (*string, bool) {
	if o == nil || o.DefaultValue == nil {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *ConfigField) HasDefaultValue() bool {
	if o != nil && o.DefaultValue != nil {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *ConfigField) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *ConfigField) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigField) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *ConfigField) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *ConfigField) SetDisplay(v string) {
	o.Display = &v
}

// GetDisplayPassword returns the DisplayPassword field value if set, zero value otherwise.
func (o *ConfigField) GetDisplayPassword() string {
	if o == nil || o.DisplayPassword == nil {
		var ret string
		return ret
	}
	return *o.DisplayPassword
}

// GetDisplayPasswordOk returns a tuple with the DisplayPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigField) GetDisplayPasswordOk() (*string, bool) {
	if o == nil || o.DisplayPassword == nil {
		return nil, false
	}
	return o.DisplayPassword, true
}

// HasDisplayPassword returns a boolean if a field has been set.
func (o *ConfigField) HasDisplayPassword() bool {
	if o != nil && o.DisplayPassword != nil {
		return true
	}

	return false
}

// SetDisplayPassword gets a reference to the given string and assigns it to the DisplayPassword field.
func (o *ConfigField) SetDisplayPassword(v string) {
	o.DisplayPassword = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *ConfigField) GetHidden() bool {
	if o == nil || o.Hidden == nil {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigField) GetHiddenOk() (*bool, bool) {
	if o == nil || o.Hidden == nil {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *ConfigField) HasHidden() bool {
	if o != nil && o.Hidden != nil {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *ConfigField) SetHidden(v bool) {
	o.Hidden = &v
}

// GetHiddenPassword returns the HiddenPassword field value if set, zero value otherwise.
func (o *ConfigField) GetHiddenPassword() bool {
	if o == nil || o.HiddenPassword == nil {
		var ret bool
		return ret
	}
	return *o.HiddenPassword
}

// GetHiddenPasswordOk returns a tuple with the HiddenPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigField) GetHiddenPasswordOk() (*bool, bool) {
	if o == nil || o.HiddenPassword == nil {
		return nil, false
	}
	return o.HiddenPassword, true
}

// HasHiddenPassword returns a boolean if a field has been set.
func (o *ConfigField) HasHiddenPassword() bool {
	if o != nil && o.HiddenPassword != nil {
		return true
	}

	return false
}

// SetHiddenPassword gets a reference to the given bool and assigns it to the HiddenPassword field.
func (o *ConfigField) SetHiddenPassword(v bool) {
	o.HiddenPassword = &v
}

// GetHiddenUsername returns the HiddenUsername field value if set, zero value otherwise.
func (o *ConfigField) GetHiddenUsername() bool {
	if o == nil || o.HiddenUsername == nil {
		var ret bool
		return ret
	}
	return *o.HiddenUsername
}

// GetHiddenUsernameOk returns a tuple with the HiddenUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigField) GetHiddenUsernameOk() (*bool, bool) {
	if o == nil || o.HiddenUsername == nil {
		return nil, false
	}
	return o.HiddenUsername, true
}

// HasHiddenUsername returns a boolean if a field has been set.
func (o *ConfigField) HasHiddenUsername() bool {
	if o != nil && o.HiddenUsername != nil {
		return true
	}

	return false
}

// SetHiddenUsername gets a reference to the given bool and assigns it to the HiddenUsername field.
func (o *ConfigField) SetHiddenUsername(v bool) {
	o.HiddenUsername = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ConfigField) GetInfo() string {
	if o == nil || o.Info == nil {
		var ret string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigField) GetInfoOk() (*string, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ConfigField) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given string and assigns it to the Info field.
func (o *ConfigField) SetInfo(v string) {
	o.Info = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigField) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigField) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigField) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigField) SetName(v string) {
	o.Name = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ConfigField) GetOptions() []string {
	if o == nil || o.Options == nil {
		var ret []string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigField) GetOptionsOk() (*[]string, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ConfigField) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *ConfigField) SetOptions(v []string) {
	o.Options = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ConfigField) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigField) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ConfigField) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ConfigField) SetRequired(v bool) {
	o.Required = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConfigField) GetType() float64 {
	if o == nil || o.Type == nil {
		var ret float64
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigField) GetTypeOk() (*float64, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConfigField) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given float64 and assigns it to the Type field.
func (o *ConfigField) SetType(v float64) {
	o.Type = &v
}

func (o ConfigField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if o.DisplayPassword != nil {
		toSerialize["displayPassword"] = o.DisplayPassword
	}
	if o.Hidden != nil {
		toSerialize["hidden"] = o.Hidden
	}
	if o.HiddenPassword != nil {
		toSerialize["hiddenPassword"] = o.HiddenPassword
	}
	if o.HiddenUsername != nil {
		toSerialize["hiddenUsername"] = o.HiddenUsername
	}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableConfigField struct {
	value *ConfigField
	isSet bool
}

func (v NullableConfigField) Get() *ConfigField {
	return v.value
}

func (v *NullableConfigField) Set(val *ConfigField) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigField) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigField(val *ConfigField) *NullableConfigField {
	return &NullableConfigField{value: val, isSet: true}
}

func (v NullableConfigField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
