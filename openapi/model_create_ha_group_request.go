/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateHAGroupRequest Request body to create HA group
type CreateHAGroupRequest struct {
	Name                 *string `json:"name,omitempty"`
	ElasticsearchAddress *string `json:"elasticsearchAddress,omitempty"`
	ElasticIndexPrefix   *string `json:"elasticIndexPrefix,omitempty"`
	Id                   *string `json:"id,omitempty"`
}

// NewCreateHAGroupRequest instantiates a new CreateHAGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateHAGroupRequest() *CreateHAGroupRequest {
	this := CreateHAGroupRequest{}
	return &this
}

// NewCreateHAGroupRequestWithDefaults instantiates a new CreateHAGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateHAGroupRequestWithDefaults() *CreateHAGroupRequest {
	this := CreateHAGroupRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateHAGroupRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHAGroupRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateHAGroupRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateHAGroupRequest) SetName(v string) {
	o.Name = &v
}

// GetElasticsearchAddress returns the ElasticsearchAddress field value if set, zero value otherwise.
func (o *CreateHAGroupRequest) GetElasticsearchAddress() string {
	if o == nil || o.ElasticsearchAddress == nil {
		var ret string
		return ret
	}
	return *o.ElasticsearchAddress
}

// GetElasticsearchAddressOk returns a tuple with the ElasticsearchAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHAGroupRequest) GetElasticsearchAddressOk() (*string, bool) {
	if o == nil || o.ElasticsearchAddress == nil {
		return nil, false
	}
	return o.ElasticsearchAddress, true
}

// HasElasticsearchAddress returns a boolean if a field has been set.
func (o *CreateHAGroupRequest) HasElasticsearchAddress() bool {
	if o != nil && o.ElasticsearchAddress != nil {
		return true
	}

	return false
}

// SetElasticsearchAddress gets a reference to the given string and assigns it to the ElasticsearchAddress field.
func (o *CreateHAGroupRequest) SetElasticsearchAddress(v string) {
	o.ElasticsearchAddress = &v
}

// GetElasticIndexPrefix returns the ElasticIndexPrefix field value if set, zero value otherwise.
func (o *CreateHAGroupRequest) GetElasticIndexPrefix() string {
	if o == nil || o.ElasticIndexPrefix == nil {
		var ret string
		return ret
	}
	return *o.ElasticIndexPrefix
}

// GetElasticIndexPrefixOk returns a tuple with the ElasticIndexPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHAGroupRequest) GetElasticIndexPrefixOk() (*string, bool) {
	if o == nil || o.ElasticIndexPrefix == nil {
		return nil, false
	}
	return o.ElasticIndexPrefix, true
}

// HasElasticIndexPrefix returns a boolean if a field has been set.
func (o *CreateHAGroupRequest) HasElasticIndexPrefix() bool {
	if o != nil && o.ElasticIndexPrefix != nil {
		return true
	}

	return false
}

// SetElasticIndexPrefix gets a reference to the given string and assigns it to the ElasticIndexPrefix field.
func (o *CreateHAGroupRequest) SetElasticIndexPrefix(v string) {
	o.ElasticIndexPrefix = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CreateHAGroupRequest) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHAGroupRequest) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreateHAGroupRequest) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CreateHAGroupRequest) SetId(v string) {
	o.Id = &v
}

func (o CreateHAGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ElasticsearchAddress != nil {
		toSerialize["elasticsearchAddress"] = o.ElasticsearchAddress
	}
	if o.ElasticIndexPrefix != nil {
		toSerialize["elasticIndexPrefix"] = o.ElasticIndexPrefix
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableCreateHAGroupRequest struct {
	value *CreateHAGroupRequest
	isSet bool
}

func (v NullableCreateHAGroupRequest) Get() *CreateHAGroupRequest {
	return v.value
}

func (v *NullableCreateHAGroupRequest) Set(val *CreateHAGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateHAGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateHAGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateHAGroupRequest(val *CreateHAGroupRequest) *NullableCreateHAGroupRequest {
	return &NullableCreateHAGroupRequest{value: val, isSet: true}
}

func (v NullableCreateHAGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateHAGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
