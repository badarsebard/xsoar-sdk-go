/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Entry Entry holds a single entry in an investigation. Entries entered within a short amount of time by the same user are combined
type Entry struct {
	IndicatorTimeline *[]IndicatorTimelineFromEntry `json:"IndicatorTimeline,omitempty"`
	InstanceID        *string                       `json:"InstanceID,omitempty"`
	Relationships     *[]RelationshipAPI            `json:"Relationships,omitempty"`
	ShardID           *int64                        `json:"ShardID,omitempty"`
	AllRead           *bool                         `json:"allRead,omitempty"`
	AllReadWrite      *bool                         `json:"allReadWrite,omitempty"`
	Brand             *string                       `json:"brand,omitempty"`
	Category          *string                       `json:"category,omitempty"`
	// The contents of the entry that is actually indexed - should not be used
	Contents *map[string]interface{} `json:"contents,omitempty"`
	// ContentsSize the total size of the contents
	ContentsSize *int64 `json:"contentsSize,omitempty"`
	// When it was taken
	Created  *time.Time `json:"created,omitempty"`
	Cron     *string    `json:"cron,omitempty"`
	CronView *bool      `json:"cronView,omitempty"`
	// Who has created this event - relevant only for manual incidents
	DbotCreatedBy *string    `json:"dbotCreatedBy,omitempty"`
	Deleted       *bool      `json:"deleted,omitempty"`
	DeletedBy     *string    `json:"deletedBy,omitempty"`
	DeletedFromFS *bool      `json:"deletedFromFS,omitempty"`
	EndingDate    *time.Time `json:"endingDate,omitempty"`
	// EndingType holds the type of schedule Ending
	EndingType *string    `json:"endingType,omitempty"`
	EntryTask  *EntryTask `json:"entryTask,omitempty"`
	// Source of the error
	ErrorSource *string `json:"errorSource,omitempty"`
	// Filename of associated content
	File *string `json:"file,omitempty"`
	// FileID is the file name when saved in the server
	FileID       *string       `json:"fileID,omitempty"`
	FileMetadata *FileMetadata `json:"fileMetadata,omitempty"`
	// Holds information on how content is formatted
	Format *string `json:"format,omitempty"`
	// Internal field to make queries on role faster
	HasRole   *bool                `json:"hasRole,omitempty"`
	Highlight *map[string][]string `json:"highlight,omitempty"`
	// Edit history
	History   *[]EntryHistory `json:"history,omitempty"`
	HumanCron *HumanCron      `json:"humanCron,omitempty"`
	Id        *string         `json:"id,omitempty"`
	// store the entry based on IncidentCreationTime
	IncidentCreationTime *time.Time `json:"incidentCreationTime,omitempty"`
	Instance             *string    `json:"instance,omitempty"`
	// The id of the investigation it belongs to
	InvestigationId *string `json:"investigationId,omitempty"`
	// IsTodo
	IsTodo *bool `json:"isTodo,omitempty"`
	// Only used for outbound mirroring to mark that it is already mirrored to remote system
	Mirrored *bool      `json:"mirrored,omitempty"`
	Modified *time.Time `json:"modified,omitempty"`
	// Note
	Note      *bool  `json:"note,omitempty"`
	NumericId *int64 `json:"numericId,omitempty"`
	// ParentEntry content - for reference
	ParentContent *map[string]interface{} `json:"parentContent,omitempty"`
	// ParentEntryTruncated - indicates weather entry content was truncated
	ParentEntryTruncated *bool `json:"parentEntryTruncated,omitempty"`
	// ParentId is the ID of the parent entry
	ParentId *string `json:"parentId,omitempty"`
	// Mark entry as pinned = evidence
	Pinned *bool `json:"pinned,omitempty"`
	// PlaybookID - if the entry is assigned as note to a playbook task, it will hold the playbook
	PlaybookId *string `json:"playbookId,omitempty"`
	// Only used for polling entries
	Polling *bool `json:"polling,omitempty"`
	// ModuleArgs represents module args
	PollingArgs          *map[string]map[string]interface{} `json:"pollingArgs,omitempty"`
	PollingCommand       *string                            `json:"pollingCommand,omitempty"`
	PreviousAllRead      *bool                              `json:"previousAllRead,omitempty"`
	PreviousAllReadWrite *bool                              `json:"previousAllReadWrite,omitempty"`
	// Do not change this field manually
	PreviousRoles *[]string `json:"previousRoles,omitempty"`
	PrimaryTerm   *int64    `json:"primaryTerm,omitempty"`
	// ReadOnly
	ReadOnly  *bool `json:"readOnly,omitempty"`
	Recurrent *bool `json:"recurrent,omitempty"`
	// ReputationSize the total size of the reputation
	ReputationSize *int64 `json:"reputationSize,omitempty"`
	// EntryReputations the reputations calculated by regex match
	Reputations *[]EntryReputation `json:"reputations,omitempty"`
	// When retry took place
	RetryTime *time.Time `json:"retryTime,omitempty"`
	// The role assigned to this investigation
	Roles *[]string `json:"roles,omitempty"`
	// is it scheduled
	Scheduled      *bool      `json:"scheduled,omitempty"`
	SequenceNumber *int64     `json:"sequenceNumber,omitempty"`
	SortValues     *[]string  `json:"sortValues,omitempty"`
	StartDate      *time.Time `json:"startDate,omitempty"`
	// The name of the system associated with this entry
	System *string `json:"system,omitempty"`
	// Tags
	Tags *[]string `json:"tags,omitempty"`
	// TagsRaw
	TagsRaw *[]string `json:"tagsRaw,omitempty"`
	// TaskID - used if the entry is assigned as note to a playbook task
	TaskId         *string `json:"taskId,omitempty"`
	Times          *int64  `json:"times,omitempty"`
	TimesRan       *int64  `json:"timesRan,omitempty"`
	Timezone       *string `json:"timezone,omitempty"`
	TimezoneOffset *int64  `json:"timezoneOffset,omitempty"`
	// EntryType specifies the type of the entry
	Type *float64 `json:"type,omitempty"`
	// The user who created  the entry
	User                       *string   `json:"user,omitempty"`
	Version                    *int64    `json:"version,omitempty"`
	XsoarHasReadOnlyRole       *bool     `json:"xsoarHasReadOnlyRole,omitempty"`
	XsoarPreviousReadOnlyRoles *[]string `json:"xsoarPreviousReadOnlyRoles,omitempty"`
	XsoarReadOnlyRoles         *[]string `json:"xsoarReadOnlyRoles,omitempty"`
}

// NewEntry instantiates a new Entry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntry() *Entry {
	this := Entry{}
	return &this
}

// NewEntryWithDefaults instantiates a new Entry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryWithDefaults() *Entry {
	this := Entry{}
	return &this
}

// GetIndicatorTimeline returns the IndicatorTimeline field value if set, zero value otherwise.
func (o *Entry) GetIndicatorTimeline() []IndicatorTimelineFromEntry {
	if o == nil || o.IndicatorTimeline == nil {
		var ret []IndicatorTimelineFromEntry
		return ret
	}
	return *o.IndicatorTimeline
}

// GetIndicatorTimelineOk returns a tuple with the IndicatorTimeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetIndicatorTimelineOk() (*[]IndicatorTimelineFromEntry, bool) {
	if o == nil || o.IndicatorTimeline == nil {
		return nil, false
	}
	return o.IndicatorTimeline, true
}

// HasIndicatorTimeline returns a boolean if a field has been set.
func (o *Entry) HasIndicatorTimeline() bool {
	if o != nil && o.IndicatorTimeline != nil {
		return true
	}

	return false
}

// SetIndicatorTimeline gets a reference to the given []IndicatorTimelineFromEntry and assigns it to the IndicatorTimeline field.
func (o *Entry) SetIndicatorTimeline(v []IndicatorTimelineFromEntry) {
	o.IndicatorTimeline = &v
}

// GetInstanceID returns the InstanceID field value if set, zero value otherwise.
func (o *Entry) GetInstanceID() string {
	if o == nil || o.InstanceID == nil {
		var ret string
		return ret
	}
	return *o.InstanceID
}

// GetInstanceIDOk returns a tuple with the InstanceID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetInstanceIDOk() (*string, bool) {
	if o == nil || o.InstanceID == nil {
		return nil, false
	}
	return o.InstanceID, true
}

// HasInstanceID returns a boolean if a field has been set.
func (o *Entry) HasInstanceID() bool {
	if o != nil && o.InstanceID != nil {
		return true
	}

	return false
}

// SetInstanceID gets a reference to the given string and assigns it to the InstanceID field.
func (o *Entry) SetInstanceID(v string) {
	o.InstanceID = &v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *Entry) GetRelationships() []RelationshipAPI {
	if o == nil || o.Relationships == nil {
		var ret []RelationshipAPI
		return ret
	}
	return *o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetRelationshipsOk() (*[]RelationshipAPI, bool) {
	if o == nil || o.Relationships == nil {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *Entry) HasRelationships() bool {
	if o != nil && o.Relationships != nil {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given []RelationshipAPI and assigns it to the Relationships field.
func (o *Entry) SetRelationships(v []RelationshipAPI) {
	o.Relationships = &v
}

// GetShardID returns the ShardID field value if set, zero value otherwise.
func (o *Entry) GetShardID() int64 {
	if o == nil || o.ShardID == nil {
		var ret int64
		return ret
	}
	return *o.ShardID
}

// GetShardIDOk returns a tuple with the ShardID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetShardIDOk() (*int64, bool) {
	if o == nil || o.ShardID == nil {
		return nil, false
	}
	return o.ShardID, true
}

// HasShardID returns a boolean if a field has been set.
func (o *Entry) HasShardID() bool {
	if o != nil && o.ShardID != nil {
		return true
	}

	return false
}

// SetShardID gets a reference to the given int64 and assigns it to the ShardID field.
func (o *Entry) SetShardID(v int64) {
	o.ShardID = &v
}

// GetAllRead returns the AllRead field value if set, zero value otherwise.
func (o *Entry) GetAllRead() bool {
	if o == nil || o.AllRead == nil {
		var ret bool
		return ret
	}
	return *o.AllRead
}

// GetAllReadOk returns a tuple with the AllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetAllReadOk() (*bool, bool) {
	if o == nil || o.AllRead == nil {
		return nil, false
	}
	return o.AllRead, true
}

// HasAllRead returns a boolean if a field has been set.
func (o *Entry) HasAllRead() bool {
	if o != nil && o.AllRead != nil {
		return true
	}

	return false
}

// SetAllRead gets a reference to the given bool and assigns it to the AllRead field.
func (o *Entry) SetAllRead(v bool) {
	o.AllRead = &v
}

// GetAllReadWrite returns the AllReadWrite field value if set, zero value otherwise.
func (o *Entry) GetAllReadWrite() bool {
	if o == nil || o.AllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.AllReadWrite
}

// GetAllReadWriteOk returns a tuple with the AllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetAllReadWriteOk() (*bool, bool) {
	if o == nil || o.AllReadWrite == nil {
		return nil, false
	}
	return o.AllReadWrite, true
}

// HasAllReadWrite returns a boolean if a field has been set.
func (o *Entry) HasAllReadWrite() bool {
	if o != nil && o.AllReadWrite != nil {
		return true
	}

	return false
}

// SetAllReadWrite gets a reference to the given bool and assigns it to the AllReadWrite field.
func (o *Entry) SetAllReadWrite(v bool) {
	o.AllReadWrite = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *Entry) GetBrand() string {
	if o == nil || o.Brand == nil {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetBrandOk() (*string, bool) {
	if o == nil || o.Brand == nil {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *Entry) HasBrand() bool {
	if o != nil && o.Brand != nil {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *Entry) SetBrand(v string) {
	o.Brand = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Entry) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Entry) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Entry) SetCategory(v string) {
	o.Category = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *Entry) GetContents() map[string]interface{} {
	if o == nil || o.Contents == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetContentsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Contents == nil {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *Entry) HasContents() bool {
	if o != nil && o.Contents != nil {
		return true
	}

	return false
}

// SetContents gets a reference to the given map[string]interface{} and assigns it to the Contents field.
func (o *Entry) SetContents(v map[string]interface{}) {
	o.Contents = &v
}

// GetContentsSize returns the ContentsSize field value if set, zero value otherwise.
func (o *Entry) GetContentsSize() int64 {
	if o == nil || o.ContentsSize == nil {
		var ret int64
		return ret
	}
	return *o.ContentsSize
}

// GetContentsSizeOk returns a tuple with the ContentsSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetContentsSizeOk() (*int64, bool) {
	if o == nil || o.ContentsSize == nil {
		return nil, false
	}
	return o.ContentsSize, true
}

// HasContentsSize returns a boolean if a field has been set.
func (o *Entry) HasContentsSize() bool {
	if o != nil && o.ContentsSize != nil {
		return true
	}

	return false
}

// SetContentsSize gets a reference to the given int64 and assigns it to the ContentsSize field.
func (o *Entry) SetContentsSize(v int64) {
	o.ContentsSize = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Entry) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Entry) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Entry) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *Entry) GetCron() string {
	if o == nil || o.Cron == nil {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetCronOk() (*string, bool) {
	if o == nil || o.Cron == nil {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *Entry) HasCron() bool {
	if o != nil && o.Cron != nil {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *Entry) SetCron(v string) {
	o.Cron = &v
}

// GetCronView returns the CronView field value if set, zero value otherwise.
func (o *Entry) GetCronView() bool {
	if o == nil || o.CronView == nil {
		var ret bool
		return ret
	}
	return *o.CronView
}

// GetCronViewOk returns a tuple with the CronView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetCronViewOk() (*bool, bool) {
	if o == nil || o.CronView == nil {
		return nil, false
	}
	return o.CronView, true
}

// HasCronView returns a boolean if a field has been set.
func (o *Entry) HasCronView() bool {
	if o != nil && o.CronView != nil {
		return true
	}

	return false
}

// SetCronView gets a reference to the given bool and assigns it to the CronView field.
func (o *Entry) SetCronView(v bool) {
	o.CronView = &v
}

// GetDbotCreatedBy returns the DbotCreatedBy field value if set, zero value otherwise.
func (o *Entry) GetDbotCreatedBy() string {
	if o == nil || o.DbotCreatedBy == nil {
		var ret string
		return ret
	}
	return *o.DbotCreatedBy
}

// GetDbotCreatedByOk returns a tuple with the DbotCreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetDbotCreatedByOk() (*string, bool) {
	if o == nil || o.DbotCreatedBy == nil {
		return nil, false
	}
	return o.DbotCreatedBy, true
}

// HasDbotCreatedBy returns a boolean if a field has been set.
func (o *Entry) HasDbotCreatedBy() bool {
	if o != nil && o.DbotCreatedBy != nil {
		return true
	}

	return false
}

// SetDbotCreatedBy gets a reference to the given string and assigns it to the DbotCreatedBy field.
func (o *Entry) SetDbotCreatedBy(v string) {
	o.DbotCreatedBy = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Entry) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Entry) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Entry) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *Entry) GetDeletedBy() string {
	if o == nil || o.DeletedBy == nil {
		var ret string
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetDeletedByOk() (*string, bool) {
	if o == nil || o.DeletedBy == nil {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *Entry) HasDeletedBy() bool {
	if o != nil && o.DeletedBy != nil {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given string and assigns it to the DeletedBy field.
func (o *Entry) SetDeletedBy(v string) {
	o.DeletedBy = &v
}

// GetDeletedFromFS returns the DeletedFromFS field value if set, zero value otherwise.
func (o *Entry) GetDeletedFromFS() bool {
	if o == nil || o.DeletedFromFS == nil {
		var ret bool
		return ret
	}
	return *o.DeletedFromFS
}

// GetDeletedFromFSOk returns a tuple with the DeletedFromFS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetDeletedFromFSOk() (*bool, bool) {
	if o == nil || o.DeletedFromFS == nil {
		return nil, false
	}
	return o.DeletedFromFS, true
}

// HasDeletedFromFS returns a boolean if a field has been set.
func (o *Entry) HasDeletedFromFS() bool {
	if o != nil && o.DeletedFromFS != nil {
		return true
	}

	return false
}

// SetDeletedFromFS gets a reference to the given bool and assigns it to the DeletedFromFS field.
func (o *Entry) SetDeletedFromFS(v bool) {
	o.DeletedFromFS = &v
}

// GetEndingDate returns the EndingDate field value if set, zero value otherwise.
func (o *Entry) GetEndingDate() time.Time {
	if o == nil || o.EndingDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndingDate
}

// GetEndingDateOk returns a tuple with the EndingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetEndingDateOk() (*time.Time, bool) {
	if o == nil || o.EndingDate == nil {
		return nil, false
	}
	return o.EndingDate, true
}

// HasEndingDate returns a boolean if a field has been set.
func (o *Entry) HasEndingDate() bool {
	if o != nil && o.EndingDate != nil {
		return true
	}

	return false
}

// SetEndingDate gets a reference to the given time.Time and assigns it to the EndingDate field.
func (o *Entry) SetEndingDate(v time.Time) {
	o.EndingDate = &v
}

// GetEndingType returns the EndingType field value if set, zero value otherwise.
func (o *Entry) GetEndingType() string {
	if o == nil || o.EndingType == nil {
		var ret string
		return ret
	}
	return *o.EndingType
}

// GetEndingTypeOk returns a tuple with the EndingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetEndingTypeOk() (*string, bool) {
	if o == nil || o.EndingType == nil {
		return nil, false
	}
	return o.EndingType, true
}

// HasEndingType returns a boolean if a field has been set.
func (o *Entry) HasEndingType() bool {
	if o != nil && o.EndingType != nil {
		return true
	}

	return false
}

// SetEndingType gets a reference to the given string and assigns it to the EndingType field.
func (o *Entry) SetEndingType(v string) {
	o.EndingType = &v
}

// GetEntryTask returns the EntryTask field value if set, zero value otherwise.
func (o *Entry) GetEntryTask() EntryTask {
	if o == nil || o.EntryTask == nil {
		var ret EntryTask
		return ret
	}
	return *o.EntryTask
}

// GetEntryTaskOk returns a tuple with the EntryTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetEntryTaskOk() (*EntryTask, bool) {
	if o == nil || o.EntryTask == nil {
		return nil, false
	}
	return o.EntryTask, true
}

// HasEntryTask returns a boolean if a field has been set.
func (o *Entry) HasEntryTask() bool {
	if o != nil && o.EntryTask != nil {
		return true
	}

	return false
}

// SetEntryTask gets a reference to the given EntryTask and assigns it to the EntryTask field.
func (o *Entry) SetEntryTask(v EntryTask) {
	o.EntryTask = &v
}

// GetErrorSource returns the ErrorSource field value if set, zero value otherwise.
func (o *Entry) GetErrorSource() string {
	if o == nil || o.ErrorSource == nil {
		var ret string
		return ret
	}
	return *o.ErrorSource
}

// GetErrorSourceOk returns a tuple with the ErrorSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetErrorSourceOk() (*string, bool) {
	if o == nil || o.ErrorSource == nil {
		return nil, false
	}
	return o.ErrorSource, true
}

// HasErrorSource returns a boolean if a field has been set.
func (o *Entry) HasErrorSource() bool {
	if o != nil && o.ErrorSource != nil {
		return true
	}

	return false
}

// SetErrorSource gets a reference to the given string and assigns it to the ErrorSource field.
func (o *Entry) SetErrorSource(v string) {
	o.ErrorSource = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *Entry) GetFile() string {
	if o == nil || o.File == nil {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetFileOk() (*string, bool) {
	if o == nil || o.File == nil {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *Entry) HasFile() bool {
	if o != nil && o.File != nil {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *Entry) SetFile(v string) {
	o.File = &v
}

// GetFileID returns the FileID field value if set, zero value otherwise.
func (o *Entry) GetFileID() string {
	if o == nil || o.FileID == nil {
		var ret string
		return ret
	}
	return *o.FileID
}

// GetFileIDOk returns a tuple with the FileID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetFileIDOk() (*string, bool) {
	if o == nil || o.FileID == nil {
		return nil, false
	}
	return o.FileID, true
}

// HasFileID returns a boolean if a field has been set.
func (o *Entry) HasFileID() bool {
	if o != nil && o.FileID != nil {
		return true
	}

	return false
}

// SetFileID gets a reference to the given string and assigns it to the FileID field.
func (o *Entry) SetFileID(v string) {
	o.FileID = &v
}

// GetFileMetadata returns the FileMetadata field value if set, zero value otherwise.
func (o *Entry) GetFileMetadata() FileMetadata {
	if o == nil || o.FileMetadata == nil {
		var ret FileMetadata
		return ret
	}
	return *o.FileMetadata
}

// GetFileMetadataOk returns a tuple with the FileMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetFileMetadataOk() (*FileMetadata, bool) {
	if o == nil || o.FileMetadata == nil {
		return nil, false
	}
	return o.FileMetadata, true
}

// HasFileMetadata returns a boolean if a field has been set.
func (o *Entry) HasFileMetadata() bool {
	if o != nil && o.FileMetadata != nil {
		return true
	}

	return false
}

// SetFileMetadata gets a reference to the given FileMetadata and assigns it to the FileMetadata field.
func (o *Entry) SetFileMetadata(v FileMetadata) {
	o.FileMetadata = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *Entry) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *Entry) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *Entry) SetFormat(v string) {
	o.Format = &v
}

// GetHasRole returns the HasRole field value if set, zero value otherwise.
func (o *Entry) GetHasRole() bool {
	if o == nil || o.HasRole == nil {
		var ret bool
		return ret
	}
	return *o.HasRole
}

// GetHasRoleOk returns a tuple with the HasRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetHasRoleOk() (*bool, bool) {
	if o == nil || o.HasRole == nil {
		return nil, false
	}
	return o.HasRole, true
}

// HasHasRole returns a boolean if a field has been set.
func (o *Entry) HasHasRole() bool {
	if o != nil && o.HasRole != nil {
		return true
	}

	return false
}

// SetHasRole gets a reference to the given bool and assigns it to the HasRole field.
func (o *Entry) SetHasRole(v bool) {
	o.HasRole = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *Entry) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *Entry) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *Entry) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *Entry) GetHistory() []EntryHistory {
	if o == nil || o.History == nil {
		var ret []EntryHistory
		return ret
	}
	return *o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetHistoryOk() (*[]EntryHistory, bool) {
	if o == nil || o.History == nil {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *Entry) HasHistory() bool {
	if o != nil && o.History != nil {
		return true
	}

	return false
}

// SetHistory gets a reference to the given []EntryHistory and assigns it to the History field.
func (o *Entry) SetHistory(v []EntryHistory) {
	o.History = &v
}

// GetHumanCron returns the HumanCron field value if set, zero value otherwise.
func (o *Entry) GetHumanCron() HumanCron {
	if o == nil || o.HumanCron == nil {
		var ret HumanCron
		return ret
	}
	return *o.HumanCron
}

// GetHumanCronOk returns a tuple with the HumanCron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetHumanCronOk() (*HumanCron, bool) {
	if o == nil || o.HumanCron == nil {
		return nil, false
	}
	return o.HumanCron, true
}

// HasHumanCron returns a boolean if a field has been set.
func (o *Entry) HasHumanCron() bool {
	if o != nil && o.HumanCron != nil {
		return true
	}

	return false
}

// SetHumanCron gets a reference to the given HumanCron and assigns it to the HumanCron field.
func (o *Entry) SetHumanCron(v HumanCron) {
	o.HumanCron = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Entry) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Entry) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Entry) SetId(v string) {
	o.Id = &v
}

// GetIncidentCreationTime returns the IncidentCreationTime field value if set, zero value otherwise.
func (o *Entry) GetIncidentCreationTime() time.Time {
	if o == nil || o.IncidentCreationTime == nil {
		var ret time.Time
		return ret
	}
	return *o.IncidentCreationTime
}

// GetIncidentCreationTimeOk returns a tuple with the IncidentCreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetIncidentCreationTimeOk() (*time.Time, bool) {
	if o == nil || o.IncidentCreationTime == nil {
		return nil, false
	}
	return o.IncidentCreationTime, true
}

// HasIncidentCreationTime returns a boolean if a field has been set.
func (o *Entry) HasIncidentCreationTime() bool {
	if o != nil && o.IncidentCreationTime != nil {
		return true
	}

	return false
}

// SetIncidentCreationTime gets a reference to the given time.Time and assigns it to the IncidentCreationTime field.
func (o *Entry) SetIncidentCreationTime(v time.Time) {
	o.IncidentCreationTime = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *Entry) GetInstance() string {
	if o == nil || o.Instance == nil {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetInstanceOk() (*string, bool) {
	if o == nil || o.Instance == nil {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *Entry) HasInstance() bool {
	if o != nil && o.Instance != nil {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *Entry) SetInstance(v string) {
	o.Instance = &v
}

// GetInvestigationId returns the InvestigationId field value if set, zero value otherwise.
func (o *Entry) GetInvestigationId() string {
	if o == nil || o.InvestigationId == nil {
		var ret string
		return ret
	}
	return *o.InvestigationId
}

// GetInvestigationIdOk returns a tuple with the InvestigationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetInvestigationIdOk() (*string, bool) {
	if o == nil || o.InvestigationId == nil {
		return nil, false
	}
	return o.InvestigationId, true
}

// HasInvestigationId returns a boolean if a field has been set.
func (o *Entry) HasInvestigationId() bool {
	if o != nil && o.InvestigationId != nil {
		return true
	}

	return false
}

// SetInvestigationId gets a reference to the given string and assigns it to the InvestigationId field.
func (o *Entry) SetInvestigationId(v string) {
	o.InvestigationId = &v
}

// GetIsTodo returns the IsTodo field value if set, zero value otherwise.
func (o *Entry) GetIsTodo() bool {
	if o == nil || o.IsTodo == nil {
		var ret bool
		return ret
	}
	return *o.IsTodo
}

// GetIsTodoOk returns a tuple with the IsTodo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetIsTodoOk() (*bool, bool) {
	if o == nil || o.IsTodo == nil {
		return nil, false
	}
	return o.IsTodo, true
}

// HasIsTodo returns a boolean if a field has been set.
func (o *Entry) HasIsTodo() bool {
	if o != nil && o.IsTodo != nil {
		return true
	}

	return false
}

// SetIsTodo gets a reference to the given bool and assigns it to the IsTodo field.
func (o *Entry) SetIsTodo(v bool) {
	o.IsTodo = &v
}

// GetMirrored returns the Mirrored field value if set, zero value otherwise.
func (o *Entry) GetMirrored() bool {
	if o == nil || o.Mirrored == nil {
		var ret bool
		return ret
	}
	return *o.Mirrored
}

// GetMirroredOk returns a tuple with the Mirrored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetMirroredOk() (*bool, bool) {
	if o == nil || o.Mirrored == nil {
		return nil, false
	}
	return o.Mirrored, true
}

// HasMirrored returns a boolean if a field has been set.
func (o *Entry) HasMirrored() bool {
	if o != nil && o.Mirrored != nil {
		return true
	}

	return false
}

// SetMirrored gets a reference to the given bool and assigns it to the Mirrored field.
func (o *Entry) SetMirrored(v bool) {
	o.Mirrored = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Entry) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Entry) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Entry) SetModified(v time.Time) {
	o.Modified = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *Entry) GetNote() bool {
	if o == nil || o.Note == nil {
		var ret bool
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetNoteOk() (*bool, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *Entry) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given bool and assigns it to the Note field.
func (o *Entry) SetNote(v bool) {
	o.Note = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *Entry) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *Entry) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *Entry) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetParentContent returns the ParentContent field value if set, zero value otherwise.
func (o *Entry) GetParentContent() map[string]interface{} {
	if o == nil || o.ParentContent == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ParentContent
}

// GetParentContentOk returns a tuple with the ParentContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetParentContentOk() (*map[string]interface{}, bool) {
	if o == nil || o.ParentContent == nil {
		return nil, false
	}
	return o.ParentContent, true
}

// HasParentContent returns a boolean if a field has been set.
func (o *Entry) HasParentContent() bool {
	if o != nil && o.ParentContent != nil {
		return true
	}

	return false
}

// SetParentContent gets a reference to the given map[string]interface{} and assigns it to the ParentContent field.
func (o *Entry) SetParentContent(v map[string]interface{}) {
	o.ParentContent = &v
}

// GetParentEntryTruncated returns the ParentEntryTruncated field value if set, zero value otherwise.
func (o *Entry) GetParentEntryTruncated() bool {
	if o == nil || o.ParentEntryTruncated == nil {
		var ret bool
		return ret
	}
	return *o.ParentEntryTruncated
}

// GetParentEntryTruncatedOk returns a tuple with the ParentEntryTruncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetParentEntryTruncatedOk() (*bool, bool) {
	if o == nil || o.ParentEntryTruncated == nil {
		return nil, false
	}
	return o.ParentEntryTruncated, true
}

// HasParentEntryTruncated returns a boolean if a field has been set.
func (o *Entry) HasParentEntryTruncated() bool {
	if o != nil && o.ParentEntryTruncated != nil {
		return true
	}

	return false
}

// SetParentEntryTruncated gets a reference to the given bool and assigns it to the ParentEntryTruncated field.
func (o *Entry) SetParentEntryTruncated(v bool) {
	o.ParentEntryTruncated = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Entry) GetParentId() string {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetParentIdOk() (*string, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Entry) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *Entry) SetParentId(v string) {
	o.ParentId = &v
}

// GetPinned returns the Pinned field value if set, zero value otherwise.
func (o *Entry) GetPinned() bool {
	if o == nil || o.Pinned == nil {
		var ret bool
		return ret
	}
	return *o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetPinnedOk() (*bool, bool) {
	if o == nil || o.Pinned == nil {
		return nil, false
	}
	return o.Pinned, true
}

// HasPinned returns a boolean if a field has been set.
func (o *Entry) HasPinned() bool {
	if o != nil && o.Pinned != nil {
		return true
	}

	return false
}

// SetPinned gets a reference to the given bool and assigns it to the Pinned field.
func (o *Entry) SetPinned(v bool) {
	o.Pinned = &v
}

// GetPlaybookId returns the PlaybookId field value if set, zero value otherwise.
func (o *Entry) GetPlaybookId() string {
	if o == nil || o.PlaybookId == nil {
		var ret string
		return ret
	}
	return *o.PlaybookId
}

// GetPlaybookIdOk returns a tuple with the PlaybookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetPlaybookIdOk() (*string, bool) {
	if o == nil || o.PlaybookId == nil {
		return nil, false
	}
	return o.PlaybookId, true
}

// HasPlaybookId returns a boolean if a field has been set.
func (o *Entry) HasPlaybookId() bool {
	if o != nil && o.PlaybookId != nil {
		return true
	}

	return false
}

// SetPlaybookId gets a reference to the given string and assigns it to the PlaybookId field.
func (o *Entry) SetPlaybookId(v string) {
	o.PlaybookId = &v
}

// GetPolling returns the Polling field value if set, zero value otherwise.
func (o *Entry) GetPolling() bool {
	if o == nil || o.Polling == nil {
		var ret bool
		return ret
	}
	return *o.Polling
}

// GetPollingOk returns a tuple with the Polling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetPollingOk() (*bool, bool) {
	if o == nil || o.Polling == nil {
		return nil, false
	}
	return o.Polling, true
}

// HasPolling returns a boolean if a field has been set.
func (o *Entry) HasPolling() bool {
	if o != nil && o.Polling != nil {
		return true
	}

	return false
}

// SetPolling gets a reference to the given bool and assigns it to the Polling field.
func (o *Entry) SetPolling(v bool) {
	o.Polling = &v
}

// GetPollingArgs returns the PollingArgs field value if set, zero value otherwise.
func (o *Entry) GetPollingArgs() map[string]map[string]interface{} {
	if o == nil || o.PollingArgs == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.PollingArgs
}

// GetPollingArgsOk returns a tuple with the PollingArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetPollingArgsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.PollingArgs == nil {
		return nil, false
	}
	return o.PollingArgs, true
}

// HasPollingArgs returns a boolean if a field has been set.
func (o *Entry) HasPollingArgs() bool {
	if o != nil && o.PollingArgs != nil {
		return true
	}

	return false
}

// SetPollingArgs gets a reference to the given map[string]map[string]interface{} and assigns it to the PollingArgs field.
func (o *Entry) SetPollingArgs(v map[string]map[string]interface{}) {
	o.PollingArgs = &v
}

// GetPollingCommand returns the PollingCommand field value if set, zero value otherwise.
func (o *Entry) GetPollingCommand() string {
	if o == nil || o.PollingCommand == nil {
		var ret string
		return ret
	}
	return *o.PollingCommand
}

// GetPollingCommandOk returns a tuple with the PollingCommand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetPollingCommandOk() (*string, bool) {
	if o == nil || o.PollingCommand == nil {
		return nil, false
	}
	return o.PollingCommand, true
}

// HasPollingCommand returns a boolean if a field has been set.
func (o *Entry) HasPollingCommand() bool {
	if o != nil && o.PollingCommand != nil {
		return true
	}

	return false
}

// SetPollingCommand gets a reference to the given string and assigns it to the PollingCommand field.
func (o *Entry) SetPollingCommand(v string) {
	o.PollingCommand = &v
}

// GetPreviousAllRead returns the PreviousAllRead field value if set, zero value otherwise.
func (o *Entry) GetPreviousAllRead() bool {
	if o == nil || o.PreviousAllRead == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllRead
}

// GetPreviousAllReadOk returns a tuple with the PreviousAllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetPreviousAllReadOk() (*bool, bool) {
	if o == nil || o.PreviousAllRead == nil {
		return nil, false
	}
	return o.PreviousAllRead, true
}

// HasPreviousAllRead returns a boolean if a field has been set.
func (o *Entry) HasPreviousAllRead() bool {
	if o != nil && o.PreviousAllRead != nil {
		return true
	}

	return false
}

// SetPreviousAllRead gets a reference to the given bool and assigns it to the PreviousAllRead field.
func (o *Entry) SetPreviousAllRead(v bool) {
	o.PreviousAllRead = &v
}

// GetPreviousAllReadWrite returns the PreviousAllReadWrite field value if set, zero value otherwise.
func (o *Entry) GetPreviousAllReadWrite() bool {
	if o == nil || o.PreviousAllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllReadWrite
}

// GetPreviousAllReadWriteOk returns a tuple with the PreviousAllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetPreviousAllReadWriteOk() (*bool, bool) {
	if o == nil || o.PreviousAllReadWrite == nil {
		return nil, false
	}
	return o.PreviousAllReadWrite, true
}

// HasPreviousAllReadWrite returns a boolean if a field has been set.
func (o *Entry) HasPreviousAllReadWrite() bool {
	if o != nil && o.PreviousAllReadWrite != nil {
		return true
	}

	return false
}

// SetPreviousAllReadWrite gets a reference to the given bool and assigns it to the PreviousAllReadWrite field.
func (o *Entry) SetPreviousAllReadWrite(v bool) {
	o.PreviousAllReadWrite = &v
}

// GetPreviousRoles returns the PreviousRoles field value if set, zero value otherwise.
func (o *Entry) GetPreviousRoles() []string {
	if o == nil || o.PreviousRoles == nil {
		var ret []string
		return ret
	}
	return *o.PreviousRoles
}

// GetPreviousRolesOk returns a tuple with the PreviousRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetPreviousRolesOk() (*[]string, bool) {
	if o == nil || o.PreviousRoles == nil {
		return nil, false
	}
	return o.PreviousRoles, true
}

// HasPreviousRoles returns a boolean if a field has been set.
func (o *Entry) HasPreviousRoles() bool {
	if o != nil && o.PreviousRoles != nil {
		return true
	}

	return false
}

// SetPreviousRoles gets a reference to the given []string and assigns it to the PreviousRoles field.
func (o *Entry) SetPreviousRoles(v []string) {
	o.PreviousRoles = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *Entry) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *Entry) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *Entry) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *Entry) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *Entry) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *Entry) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetRecurrent returns the Recurrent field value if set, zero value otherwise.
func (o *Entry) GetRecurrent() bool {
	if o == nil || o.Recurrent == nil {
		var ret bool
		return ret
	}
	return *o.Recurrent
}

// GetRecurrentOk returns a tuple with the Recurrent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetRecurrentOk() (*bool, bool) {
	if o == nil || o.Recurrent == nil {
		return nil, false
	}
	return o.Recurrent, true
}

// HasRecurrent returns a boolean if a field has been set.
func (o *Entry) HasRecurrent() bool {
	if o != nil && o.Recurrent != nil {
		return true
	}

	return false
}

// SetRecurrent gets a reference to the given bool and assigns it to the Recurrent field.
func (o *Entry) SetRecurrent(v bool) {
	o.Recurrent = &v
}

// GetReputationSize returns the ReputationSize field value if set, zero value otherwise.
func (o *Entry) GetReputationSize() int64 {
	if o == nil || o.ReputationSize == nil {
		var ret int64
		return ret
	}
	return *o.ReputationSize
}

// GetReputationSizeOk returns a tuple with the ReputationSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetReputationSizeOk() (*int64, bool) {
	if o == nil || o.ReputationSize == nil {
		return nil, false
	}
	return o.ReputationSize, true
}

// HasReputationSize returns a boolean if a field has been set.
func (o *Entry) HasReputationSize() bool {
	if o != nil && o.ReputationSize != nil {
		return true
	}

	return false
}

// SetReputationSize gets a reference to the given int64 and assigns it to the ReputationSize field.
func (o *Entry) SetReputationSize(v int64) {
	o.ReputationSize = &v
}

// GetReputations returns the Reputations field value if set, zero value otherwise.
func (o *Entry) GetReputations() []EntryReputation {
	if o == nil || o.Reputations == nil {
		var ret []EntryReputation
		return ret
	}
	return *o.Reputations
}

// GetReputationsOk returns a tuple with the Reputations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetReputationsOk() (*[]EntryReputation, bool) {
	if o == nil || o.Reputations == nil {
		return nil, false
	}
	return o.Reputations, true
}

// HasReputations returns a boolean if a field has been set.
func (o *Entry) HasReputations() bool {
	if o != nil && o.Reputations != nil {
		return true
	}

	return false
}

// SetReputations gets a reference to the given []EntryReputation and assigns it to the Reputations field.
func (o *Entry) SetReputations(v []EntryReputation) {
	o.Reputations = &v
}

// GetRetryTime returns the RetryTime field value if set, zero value otherwise.
func (o *Entry) GetRetryTime() time.Time {
	if o == nil || o.RetryTime == nil {
		var ret time.Time
		return ret
	}
	return *o.RetryTime
}

// GetRetryTimeOk returns a tuple with the RetryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetRetryTimeOk() (*time.Time, bool) {
	if o == nil || o.RetryTime == nil {
		return nil, false
	}
	return o.RetryTime, true
}

// HasRetryTime returns a boolean if a field has been set.
func (o *Entry) HasRetryTime() bool {
	if o != nil && o.RetryTime != nil {
		return true
	}

	return false
}

// SetRetryTime gets a reference to the given time.Time and assigns it to the RetryTime field.
func (o *Entry) SetRetryTime(v time.Time) {
	o.RetryTime = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Entry) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Entry) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *Entry) SetRoles(v []string) {
	o.Roles = &v
}

// GetScheduled returns the Scheduled field value if set, zero value otherwise.
func (o *Entry) GetScheduled() bool {
	if o == nil || o.Scheduled == nil {
		var ret bool
		return ret
	}
	return *o.Scheduled
}

// GetScheduledOk returns a tuple with the Scheduled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetScheduledOk() (*bool, bool) {
	if o == nil || o.Scheduled == nil {
		return nil, false
	}
	return o.Scheduled, true
}

// HasScheduled returns a boolean if a field has been set.
func (o *Entry) HasScheduled() bool {
	if o != nil && o.Scheduled != nil {
		return true
	}

	return false
}

// SetScheduled gets a reference to the given bool and assigns it to the Scheduled field.
func (o *Entry) SetScheduled(v bool) {
	o.Scheduled = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *Entry) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *Entry) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *Entry) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *Entry) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *Entry) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *Entry) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Entry) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Entry) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Entry) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *Entry) GetSystem() string {
	if o == nil || o.System == nil {
		var ret string
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetSystemOk() (*string, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *Entry) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given string and assigns it to the System field.
func (o *Entry) SetSystem(v string) {
	o.System = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Entry) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Entry) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Entry) SetTags(v []string) {
	o.Tags = &v
}

// GetTagsRaw returns the TagsRaw field value if set, zero value otherwise.
func (o *Entry) GetTagsRaw() []string {
	if o == nil || o.TagsRaw == nil {
		var ret []string
		return ret
	}
	return *o.TagsRaw
}

// GetTagsRawOk returns a tuple with the TagsRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetTagsRawOk() (*[]string, bool) {
	if o == nil || o.TagsRaw == nil {
		return nil, false
	}
	return o.TagsRaw, true
}

// HasTagsRaw returns a boolean if a field has been set.
func (o *Entry) HasTagsRaw() bool {
	if o != nil && o.TagsRaw != nil {
		return true
	}

	return false
}

// SetTagsRaw gets a reference to the given []string and assigns it to the TagsRaw field.
func (o *Entry) SetTagsRaw(v []string) {
	o.TagsRaw = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *Entry) GetTaskId() string {
	if o == nil || o.TaskId == nil {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetTaskIdOk() (*string, bool) {
	if o == nil || o.TaskId == nil {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *Entry) HasTaskId() bool {
	if o != nil && o.TaskId != nil {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *Entry) SetTaskId(v string) {
	o.TaskId = &v
}

// GetTimes returns the Times field value if set, zero value otherwise.
func (o *Entry) GetTimes() int64 {
	if o == nil || o.Times == nil {
		var ret int64
		return ret
	}
	return *o.Times
}

// GetTimesOk returns a tuple with the Times field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetTimesOk() (*int64, bool) {
	if o == nil || o.Times == nil {
		return nil, false
	}
	return o.Times, true
}

// HasTimes returns a boolean if a field has been set.
func (o *Entry) HasTimes() bool {
	if o != nil && o.Times != nil {
		return true
	}

	return false
}

// SetTimes gets a reference to the given int64 and assigns it to the Times field.
func (o *Entry) SetTimes(v int64) {
	o.Times = &v
}

// GetTimesRan returns the TimesRan field value if set, zero value otherwise.
func (o *Entry) GetTimesRan() int64 {
	if o == nil || o.TimesRan == nil {
		var ret int64
		return ret
	}
	return *o.TimesRan
}

// GetTimesRanOk returns a tuple with the TimesRan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetTimesRanOk() (*int64, bool) {
	if o == nil || o.TimesRan == nil {
		return nil, false
	}
	return o.TimesRan, true
}

// HasTimesRan returns a boolean if a field has been set.
func (o *Entry) HasTimesRan() bool {
	if o != nil && o.TimesRan != nil {
		return true
	}

	return false
}

// SetTimesRan gets a reference to the given int64 and assigns it to the TimesRan field.
func (o *Entry) SetTimesRan(v int64) {
	o.TimesRan = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *Entry) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *Entry) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *Entry) SetTimezone(v string) {
	o.Timezone = &v
}

// GetTimezoneOffset returns the TimezoneOffset field value if set, zero value otherwise.
func (o *Entry) GetTimezoneOffset() int64 {
	if o == nil || o.TimezoneOffset == nil {
		var ret int64
		return ret
	}
	return *o.TimezoneOffset
}

// GetTimezoneOffsetOk returns a tuple with the TimezoneOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetTimezoneOffsetOk() (*int64, bool) {
	if o == nil || o.TimezoneOffset == nil {
		return nil, false
	}
	return o.TimezoneOffset, true
}

// HasTimezoneOffset returns a boolean if a field has been set.
func (o *Entry) HasTimezoneOffset() bool {
	if o != nil && o.TimezoneOffset != nil {
		return true
	}

	return false
}

// SetTimezoneOffset gets a reference to the given int64 and assigns it to the TimezoneOffset field.
func (o *Entry) SetTimezoneOffset(v int64) {
	o.TimezoneOffset = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Entry) GetType() float64 {
	if o == nil || o.Type == nil {
		var ret float64
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetTypeOk() (*float64, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Entry) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given float64 and assigns it to the Type field.
func (o *Entry) SetType(v float64) {
	o.Type = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Entry) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Entry) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *Entry) SetUser(v string) {
	o.User = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Entry) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Entry) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *Entry) SetVersion(v int64) {
	o.Version = &v
}

// GetXsoarHasReadOnlyRole returns the XsoarHasReadOnlyRole field value if set, zero value otherwise.
func (o *Entry) GetXsoarHasReadOnlyRole() bool {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		var ret bool
		return ret
	}
	return *o.XsoarHasReadOnlyRole
}

// GetXsoarHasReadOnlyRoleOk returns a tuple with the XsoarHasReadOnlyRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetXsoarHasReadOnlyRoleOk() (*bool, bool) {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		return nil, false
	}
	return o.XsoarHasReadOnlyRole, true
}

// HasXsoarHasReadOnlyRole returns a boolean if a field has been set.
func (o *Entry) HasXsoarHasReadOnlyRole() bool {
	if o != nil && o.XsoarHasReadOnlyRole != nil {
		return true
	}

	return false
}

// SetXsoarHasReadOnlyRole gets a reference to the given bool and assigns it to the XsoarHasReadOnlyRole field.
func (o *Entry) SetXsoarHasReadOnlyRole(v bool) {
	o.XsoarHasReadOnlyRole = &v
}

// GetXsoarPreviousReadOnlyRoles returns the XsoarPreviousReadOnlyRoles field value if set, zero value otherwise.
func (o *Entry) GetXsoarPreviousReadOnlyRoles() []string {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarPreviousReadOnlyRoles
}

// GetXsoarPreviousReadOnlyRolesOk returns a tuple with the XsoarPreviousReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetXsoarPreviousReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarPreviousReadOnlyRoles, true
}

// HasXsoarPreviousReadOnlyRoles returns a boolean if a field has been set.
func (o *Entry) HasXsoarPreviousReadOnlyRoles() bool {
	if o != nil && o.XsoarPreviousReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarPreviousReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarPreviousReadOnlyRoles field.
func (o *Entry) SetXsoarPreviousReadOnlyRoles(v []string) {
	o.XsoarPreviousReadOnlyRoles = &v
}

// GetXsoarReadOnlyRoles returns the XsoarReadOnlyRoles field value if set, zero value otherwise.
func (o *Entry) GetXsoarReadOnlyRoles() []string {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarReadOnlyRoles
}

// GetXsoarReadOnlyRolesOk returns a tuple with the XsoarReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetXsoarReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarReadOnlyRoles, true
}

// HasXsoarReadOnlyRoles returns a boolean if a field has been set.
func (o *Entry) HasXsoarReadOnlyRoles() bool {
	if o != nil && o.XsoarReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarReadOnlyRoles field.
func (o *Entry) SetXsoarReadOnlyRoles(v []string) {
	o.XsoarReadOnlyRoles = &v
}

func (o Entry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IndicatorTimeline != nil {
		toSerialize["IndicatorTimeline"] = o.IndicatorTimeline
	}
	if o.InstanceID != nil {
		toSerialize["InstanceID"] = o.InstanceID
	}
	if o.Relationships != nil {
		toSerialize["Relationships"] = o.Relationships
	}
	if o.ShardID != nil {
		toSerialize["ShardID"] = o.ShardID
	}
	if o.AllRead != nil {
		toSerialize["allRead"] = o.AllRead
	}
	if o.AllReadWrite != nil {
		toSerialize["allReadWrite"] = o.AllReadWrite
	}
	if o.Brand != nil {
		toSerialize["brand"] = o.Brand
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Contents != nil {
		toSerialize["contents"] = o.Contents
	}
	if o.ContentsSize != nil {
		toSerialize["contentsSize"] = o.ContentsSize
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Cron != nil {
		toSerialize["cron"] = o.Cron
	}
	if o.CronView != nil {
		toSerialize["cronView"] = o.CronView
	}
	if o.DbotCreatedBy != nil {
		toSerialize["dbotCreatedBy"] = o.DbotCreatedBy
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.DeletedBy != nil {
		toSerialize["deletedBy"] = o.DeletedBy
	}
	if o.DeletedFromFS != nil {
		toSerialize["deletedFromFS"] = o.DeletedFromFS
	}
	if o.EndingDate != nil {
		toSerialize["endingDate"] = o.EndingDate
	}
	if o.EndingType != nil {
		toSerialize["endingType"] = o.EndingType
	}
	if o.EntryTask != nil {
		toSerialize["entryTask"] = o.EntryTask
	}
	if o.ErrorSource != nil {
		toSerialize["errorSource"] = o.ErrorSource
	}
	if o.File != nil {
		toSerialize["file"] = o.File
	}
	if o.FileID != nil {
		toSerialize["fileID"] = o.FileID
	}
	if o.FileMetadata != nil {
		toSerialize["fileMetadata"] = o.FileMetadata
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.HasRole != nil {
		toSerialize["hasRole"] = o.HasRole
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.History != nil {
		toSerialize["history"] = o.History
	}
	if o.HumanCron != nil {
		toSerialize["humanCron"] = o.HumanCron
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IncidentCreationTime != nil {
		toSerialize["incidentCreationTime"] = o.IncidentCreationTime
	}
	if o.Instance != nil {
		toSerialize["instance"] = o.Instance
	}
	if o.InvestigationId != nil {
		toSerialize["investigationId"] = o.InvestigationId
	}
	if o.IsTodo != nil {
		toSerialize["isTodo"] = o.IsTodo
	}
	if o.Mirrored != nil {
		toSerialize["mirrored"] = o.Mirrored
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.ParentContent != nil {
		toSerialize["parentContent"] = o.ParentContent
	}
	if o.ParentEntryTruncated != nil {
		toSerialize["parentEntryTruncated"] = o.ParentEntryTruncated
	}
	if o.ParentId != nil {
		toSerialize["parentId"] = o.ParentId
	}
	if o.Pinned != nil {
		toSerialize["pinned"] = o.Pinned
	}
	if o.PlaybookId != nil {
		toSerialize["playbookId"] = o.PlaybookId
	}
	if o.Polling != nil {
		toSerialize["polling"] = o.Polling
	}
	if o.PollingArgs != nil {
		toSerialize["pollingArgs"] = o.PollingArgs
	}
	if o.PollingCommand != nil {
		toSerialize["pollingCommand"] = o.PollingCommand
	}
	if o.PreviousAllRead != nil {
		toSerialize["previousAllRead"] = o.PreviousAllRead
	}
	if o.PreviousAllReadWrite != nil {
		toSerialize["previousAllReadWrite"] = o.PreviousAllReadWrite
	}
	if o.PreviousRoles != nil {
		toSerialize["previousRoles"] = o.PreviousRoles
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.Recurrent != nil {
		toSerialize["recurrent"] = o.Recurrent
	}
	if o.ReputationSize != nil {
		toSerialize["reputationSize"] = o.ReputationSize
	}
	if o.Reputations != nil {
		toSerialize["reputations"] = o.Reputations
	}
	if o.RetryTime != nil {
		toSerialize["retryTime"] = o.RetryTime
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.Scheduled != nil {
		toSerialize["scheduled"] = o.Scheduled
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TagsRaw != nil {
		toSerialize["tagsRaw"] = o.TagsRaw
	}
	if o.TaskId != nil {
		toSerialize["taskId"] = o.TaskId
	}
	if o.Times != nil {
		toSerialize["times"] = o.Times
	}
	if o.TimesRan != nil {
		toSerialize["timesRan"] = o.TimesRan
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.TimezoneOffset != nil {
		toSerialize["timezoneOffset"] = o.TimezoneOffset
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.XsoarHasReadOnlyRole != nil {
		toSerialize["xsoarHasReadOnlyRole"] = o.XsoarHasReadOnlyRole
	}
	if o.XsoarPreviousReadOnlyRoles != nil {
		toSerialize["xsoarPreviousReadOnlyRoles"] = o.XsoarPreviousReadOnlyRoles
	}
	if o.XsoarReadOnlyRoles != nil {
		toSerialize["xsoarReadOnlyRoles"] = o.XsoarReadOnlyRoles
	}
	return json.Marshal(toSerialize)
}

type NullableEntry struct {
	value *Entry
	isSet bool
}

func (v NullableEntry) Get() *Entry {
	return v.value
}

func (v *NullableEntry) Set(val *Entry) {
	v.value = val
	v.isSet = true
}

func (v NullableEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntry(val *Entry) *NullableEntry {
	return &NullableEntry{value: val, isSet: true}
}

func (v NullableEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
