/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// EntryHistory struct for EntryHistory
type EntryHistory struct {
	ContentDate    *time.Time `json:"contentDate,omitempty"`
	Contents       *string    `json:"contents,omitempty"`
	ContentsFormat *string    `json:"contentsFormat,omitempty"`
	User           *string    `json:"user,omitempty"`
}

// NewEntryHistory instantiates a new EntryHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryHistory() *EntryHistory {
	this := EntryHistory{}
	return &this
}

// NewEntryHistoryWithDefaults instantiates a new EntryHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryHistoryWithDefaults() *EntryHistory {
	this := EntryHistory{}
	return &this
}

// GetContentDate returns the ContentDate field value if set, zero value otherwise.
func (o *EntryHistory) GetContentDate() time.Time {
	if o == nil || o.ContentDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ContentDate
}

// GetContentDateOk returns a tuple with the ContentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryHistory) GetContentDateOk() (*time.Time, bool) {
	if o == nil || o.ContentDate == nil {
		return nil, false
	}
	return o.ContentDate, true
}

// HasContentDate returns a boolean if a field has been set.
func (o *EntryHistory) HasContentDate() bool {
	if o != nil && o.ContentDate != nil {
		return true
	}

	return false
}

// SetContentDate gets a reference to the given time.Time and assigns it to the ContentDate field.
func (o *EntryHistory) SetContentDate(v time.Time) {
	o.ContentDate = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *EntryHistory) GetContents() string {
	if o == nil || o.Contents == nil {
		var ret string
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryHistory) GetContentsOk() (*string, bool) {
	if o == nil || o.Contents == nil {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *EntryHistory) HasContents() bool {
	if o != nil && o.Contents != nil {
		return true
	}

	return false
}

// SetContents gets a reference to the given string and assigns it to the Contents field.
func (o *EntryHistory) SetContents(v string) {
	o.Contents = &v
}

// GetContentsFormat returns the ContentsFormat field value if set, zero value otherwise.
func (o *EntryHistory) GetContentsFormat() string {
	if o == nil || o.ContentsFormat == nil {
		var ret string
		return ret
	}
	return *o.ContentsFormat
}

// GetContentsFormatOk returns a tuple with the ContentsFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryHistory) GetContentsFormatOk() (*string, bool) {
	if o == nil || o.ContentsFormat == nil {
		return nil, false
	}
	return o.ContentsFormat, true
}

// HasContentsFormat returns a boolean if a field has been set.
func (o *EntryHistory) HasContentsFormat() bool {
	if o != nil && o.ContentsFormat != nil {
		return true
	}

	return false
}

// SetContentsFormat gets a reference to the given string and assigns it to the ContentsFormat field.
func (o *EntryHistory) SetContentsFormat(v string) {
	o.ContentsFormat = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *EntryHistory) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryHistory) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *EntryHistory) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *EntryHistory) SetUser(v string) {
	o.User = &v
}

func (o EntryHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContentDate != nil {
		toSerialize["contentDate"] = o.ContentDate
	}
	if o.Contents != nil {
		toSerialize["contents"] = o.Contents
	}
	if o.ContentsFormat != nil {
		toSerialize["contentsFormat"] = o.ContentsFormat
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableEntryHistory struct {
	value *EntryHistory
	isSet bool
}

func (v NullableEntryHistory) Get() *EntryHistory {
	return v.value
}

func (v *NullableEntryHistory) Set(val *EntryHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryHistory(val *EntryHistory) *NullableEntryHistory {
	return &NullableEntryHistory{value: val, isSet: true}
}

func (v NullableEntryHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
