/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EntryReputation EntryReputation holds the entry reputations and the highlights
type EntryReputation struct {
	Highlights      *FieldTermLocationMap `json:"highlights,omitempty"`
	ReputationsData *[]ReputationData     `json:"reputationsData,omitempty"`
}

// NewEntryReputation instantiates a new EntryReputation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryReputation() *EntryReputation {
	this := EntryReputation{}
	return &this
}

// NewEntryReputationWithDefaults instantiates a new EntryReputation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryReputationWithDefaults() *EntryReputation {
	this := EntryReputation{}
	return &this
}

// GetHighlights returns the Highlights field value if set, zero value otherwise.
func (o *EntryReputation) GetHighlights() FieldTermLocationMap {
	if o == nil || o.Highlights == nil {
		var ret FieldTermLocationMap
		return ret
	}
	return *o.Highlights
}

// GetHighlightsOk returns a tuple with the Highlights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryReputation) GetHighlightsOk() (*FieldTermLocationMap, bool) {
	if o == nil || o.Highlights == nil {
		return nil, false
	}
	return o.Highlights, true
}

// HasHighlights returns a boolean if a field has been set.
func (o *EntryReputation) HasHighlights() bool {
	if o != nil && o.Highlights != nil {
		return true
	}

	return false
}

// SetHighlights gets a reference to the given FieldTermLocationMap and assigns it to the Highlights field.
func (o *EntryReputation) SetHighlights(v FieldTermLocationMap) {
	o.Highlights = &v
}

// GetReputationsData returns the ReputationsData field value if set, zero value otherwise.
func (o *EntryReputation) GetReputationsData() []ReputationData {
	if o == nil || o.ReputationsData == nil {
		var ret []ReputationData
		return ret
	}
	return *o.ReputationsData
}

// GetReputationsDataOk returns a tuple with the ReputationsData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryReputation) GetReputationsDataOk() (*[]ReputationData, bool) {
	if o == nil || o.ReputationsData == nil {
		return nil, false
	}
	return o.ReputationsData, true
}

// HasReputationsData returns a boolean if a field has been set.
func (o *EntryReputation) HasReputationsData() bool {
	if o != nil && o.ReputationsData != nil {
		return true
	}

	return false
}

// SetReputationsData gets a reference to the given []ReputationData and assigns it to the ReputationsData field.
func (o *EntryReputation) SetReputationsData(v []ReputationData) {
	o.ReputationsData = &v
}

func (o EntryReputation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Highlights != nil {
		toSerialize["highlights"] = o.Highlights
	}
	if o.ReputationsData != nil {
		toSerialize["reputationsData"] = o.ReputationsData
	}
	return json.Marshal(toSerialize)
}

type NullableEntryReputation struct {
	value *EntryReputation
	isSet bool
}

func (v NullableEntryReputation) Get() *EntryReputation {
	return v.value
}

func (v *NullableEntryReputation) Set(val *EntryReputation) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryReputation) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryReputation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryReputation(val *EntryReputation) *NullableEntryReputation {
	return &NullableEntryReputation{value: val, isSet: true}
}

func (v NullableEntryReputation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryReputation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
