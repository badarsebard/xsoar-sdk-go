/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Evidence struct for Evidence
type Evidence struct {
	ShardID      *int64 `json:"ShardID,omitempty"`
	AllRead      *bool  `json:"allRead,omitempty"`
	AllReadWrite *bool  `json:"allReadWrite,omitempty"`
	// Who has created this event - relevant only for manual incidents
	DbotCreatedBy *string `json:"dbotCreatedBy,omitempty"`
	// The description for the resolve
	Description *string `json:"description,omitempty"`
	// The entry ID
	EntryId *string `json:"entryId,omitempty"`
	// when the evidence entry was fetched
	Fetched *time.Time `json:"fetched,omitempty"`
	// Internal field to make queries on role faster
	HasRole   *bool                `json:"hasRole,omitempty"`
	Highlight *map[string][]string `json:"highlight,omitempty"`
	Id        *string              `json:"id,omitempty"`
	// The incident ID
	IncidentId *string `json:"incidentId,omitempty"`
	// the user that marked this evidence
	MarkedBy *string `json:"markedBy,omitempty"`
	// when this evidence was marked
	MarkedDate *time.Time `json:"markedDate,omitempty"`
	Modified   *time.Time `json:"modified,omitempty"`
	NumericId  *int64     `json:"numericId,omitempty"`
	// When this evidence has occurred
	Occurred             *time.Time `json:"occurred,omitempty"`
	PreviousAllRead      *bool      `json:"previousAllRead,omitempty"`
	PreviousAllReadWrite *bool      `json:"previousAllReadWrite,omitempty"`
	// Do not change this field manually
	PreviousRoles *[]string `json:"previousRoles,omitempty"`
	PrimaryTerm   *int64    `json:"primaryTerm,omitempty"`
	// The role assigned to this investigation
	Roles          *[]string `json:"roles,omitempty"`
	SequenceNumber *int64    `json:"sequenceNumber,omitempty"`
	SortValues     *[]string `json:"sortValues,omitempty"`
	// Tags
	Tags *[]string `json:"tags,omitempty"`
	// TagsRaw
	TagsRaw *[]string `json:"tagsRaw,omitempty"`
	// when the evidence entry was fetched
	TaskId                     *string   `json:"taskId,omitempty"`
	Version                    *int64    `json:"version,omitempty"`
	XsoarHasReadOnlyRole       *bool     `json:"xsoarHasReadOnlyRole,omitempty"`
	XsoarPreviousReadOnlyRoles *[]string `json:"xsoarPreviousReadOnlyRoles,omitempty"`
	XsoarReadOnlyRoles         *[]string `json:"xsoarReadOnlyRoles,omitempty"`
}

// NewEvidence instantiates a new Evidence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvidence() *Evidence {
	this := Evidence{}
	return &this
}

// NewEvidenceWithDefaults instantiates a new Evidence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvidenceWithDefaults() *Evidence {
	this := Evidence{}
	return &this
}

// GetShardID returns the ShardID field value if set, zero value otherwise.
func (o *Evidence) GetShardID() int64 {
	if o == nil || o.ShardID == nil {
		var ret int64
		return ret
	}
	return *o.ShardID
}

// GetShardIDOk returns a tuple with the ShardID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetShardIDOk() (*int64, bool) {
	if o == nil || o.ShardID == nil {
		return nil, false
	}
	return o.ShardID, true
}

// HasShardID returns a boolean if a field has been set.
func (o *Evidence) HasShardID() bool {
	if o != nil && o.ShardID != nil {
		return true
	}

	return false
}

// SetShardID gets a reference to the given int64 and assigns it to the ShardID field.
func (o *Evidence) SetShardID(v int64) {
	o.ShardID = &v
}

// GetAllRead returns the AllRead field value if set, zero value otherwise.
func (o *Evidence) GetAllRead() bool {
	if o == nil || o.AllRead == nil {
		var ret bool
		return ret
	}
	return *o.AllRead
}

// GetAllReadOk returns a tuple with the AllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetAllReadOk() (*bool, bool) {
	if o == nil || o.AllRead == nil {
		return nil, false
	}
	return o.AllRead, true
}

// HasAllRead returns a boolean if a field has been set.
func (o *Evidence) HasAllRead() bool {
	if o != nil && o.AllRead != nil {
		return true
	}

	return false
}

// SetAllRead gets a reference to the given bool and assigns it to the AllRead field.
func (o *Evidence) SetAllRead(v bool) {
	o.AllRead = &v
}

// GetAllReadWrite returns the AllReadWrite field value if set, zero value otherwise.
func (o *Evidence) GetAllReadWrite() bool {
	if o == nil || o.AllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.AllReadWrite
}

// GetAllReadWriteOk returns a tuple with the AllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetAllReadWriteOk() (*bool, bool) {
	if o == nil || o.AllReadWrite == nil {
		return nil, false
	}
	return o.AllReadWrite, true
}

// HasAllReadWrite returns a boolean if a field has been set.
func (o *Evidence) HasAllReadWrite() bool {
	if o != nil && o.AllReadWrite != nil {
		return true
	}

	return false
}

// SetAllReadWrite gets a reference to the given bool and assigns it to the AllReadWrite field.
func (o *Evidence) SetAllReadWrite(v bool) {
	o.AllReadWrite = &v
}

// GetDbotCreatedBy returns the DbotCreatedBy field value if set, zero value otherwise.
func (o *Evidence) GetDbotCreatedBy() string {
	if o == nil || o.DbotCreatedBy == nil {
		var ret string
		return ret
	}
	return *o.DbotCreatedBy
}

// GetDbotCreatedByOk returns a tuple with the DbotCreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetDbotCreatedByOk() (*string, bool) {
	if o == nil || o.DbotCreatedBy == nil {
		return nil, false
	}
	return o.DbotCreatedBy, true
}

// HasDbotCreatedBy returns a boolean if a field has been set.
func (o *Evidence) HasDbotCreatedBy() bool {
	if o != nil && o.DbotCreatedBy != nil {
		return true
	}

	return false
}

// SetDbotCreatedBy gets a reference to the given string and assigns it to the DbotCreatedBy field.
func (o *Evidence) SetDbotCreatedBy(v string) {
	o.DbotCreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Evidence) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Evidence) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Evidence) SetDescription(v string) {
	o.Description = &v
}

// GetEntryId returns the EntryId field value if set, zero value otherwise.
func (o *Evidence) GetEntryId() string {
	if o == nil || o.EntryId == nil {
		var ret string
		return ret
	}
	return *o.EntryId
}

// GetEntryIdOk returns a tuple with the EntryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetEntryIdOk() (*string, bool) {
	if o == nil || o.EntryId == nil {
		return nil, false
	}
	return o.EntryId, true
}

// HasEntryId returns a boolean if a field has been set.
func (o *Evidence) HasEntryId() bool {
	if o != nil && o.EntryId != nil {
		return true
	}

	return false
}

// SetEntryId gets a reference to the given string and assigns it to the EntryId field.
func (o *Evidence) SetEntryId(v string) {
	o.EntryId = &v
}

// GetFetched returns the Fetched field value if set, zero value otherwise.
func (o *Evidence) GetFetched() time.Time {
	if o == nil || o.Fetched == nil {
		var ret time.Time
		return ret
	}
	return *o.Fetched
}

// GetFetchedOk returns a tuple with the Fetched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetFetchedOk() (*time.Time, bool) {
	if o == nil || o.Fetched == nil {
		return nil, false
	}
	return o.Fetched, true
}

// HasFetched returns a boolean if a field has been set.
func (o *Evidence) HasFetched() bool {
	if o != nil && o.Fetched != nil {
		return true
	}

	return false
}

// SetFetched gets a reference to the given time.Time and assigns it to the Fetched field.
func (o *Evidence) SetFetched(v time.Time) {
	o.Fetched = &v
}

// GetHasRole returns the HasRole field value if set, zero value otherwise.
func (o *Evidence) GetHasRole() bool {
	if o == nil || o.HasRole == nil {
		var ret bool
		return ret
	}
	return *o.HasRole
}

// GetHasRoleOk returns a tuple with the HasRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetHasRoleOk() (*bool, bool) {
	if o == nil || o.HasRole == nil {
		return nil, false
	}
	return o.HasRole, true
}

// HasHasRole returns a boolean if a field has been set.
func (o *Evidence) HasHasRole() bool {
	if o != nil && o.HasRole != nil {
		return true
	}

	return false
}

// SetHasRole gets a reference to the given bool and assigns it to the HasRole field.
func (o *Evidence) SetHasRole(v bool) {
	o.HasRole = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *Evidence) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *Evidence) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *Evidence) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Evidence) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Evidence) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Evidence) SetId(v string) {
	o.Id = &v
}

// GetIncidentId returns the IncidentId field value if set, zero value otherwise.
func (o *Evidence) GetIncidentId() string {
	if o == nil || o.IncidentId == nil {
		var ret string
		return ret
	}
	return *o.IncidentId
}

// GetIncidentIdOk returns a tuple with the IncidentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetIncidentIdOk() (*string, bool) {
	if o == nil || o.IncidentId == nil {
		return nil, false
	}
	return o.IncidentId, true
}

// HasIncidentId returns a boolean if a field has been set.
func (o *Evidence) HasIncidentId() bool {
	if o != nil && o.IncidentId != nil {
		return true
	}

	return false
}

// SetIncidentId gets a reference to the given string and assigns it to the IncidentId field.
func (o *Evidence) SetIncidentId(v string) {
	o.IncidentId = &v
}

// GetMarkedBy returns the MarkedBy field value if set, zero value otherwise.
func (o *Evidence) GetMarkedBy() string {
	if o == nil || o.MarkedBy == nil {
		var ret string
		return ret
	}
	return *o.MarkedBy
}

// GetMarkedByOk returns a tuple with the MarkedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetMarkedByOk() (*string, bool) {
	if o == nil || o.MarkedBy == nil {
		return nil, false
	}
	return o.MarkedBy, true
}

// HasMarkedBy returns a boolean if a field has been set.
func (o *Evidence) HasMarkedBy() bool {
	if o != nil && o.MarkedBy != nil {
		return true
	}

	return false
}

// SetMarkedBy gets a reference to the given string and assigns it to the MarkedBy field.
func (o *Evidence) SetMarkedBy(v string) {
	o.MarkedBy = &v
}

// GetMarkedDate returns the MarkedDate field value if set, zero value otherwise.
func (o *Evidence) GetMarkedDate() time.Time {
	if o == nil || o.MarkedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.MarkedDate
}

// GetMarkedDateOk returns a tuple with the MarkedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetMarkedDateOk() (*time.Time, bool) {
	if o == nil || o.MarkedDate == nil {
		return nil, false
	}
	return o.MarkedDate, true
}

// HasMarkedDate returns a boolean if a field has been set.
func (o *Evidence) HasMarkedDate() bool {
	if o != nil && o.MarkedDate != nil {
		return true
	}

	return false
}

// SetMarkedDate gets a reference to the given time.Time and assigns it to the MarkedDate field.
func (o *Evidence) SetMarkedDate(v time.Time) {
	o.MarkedDate = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Evidence) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Evidence) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Evidence) SetModified(v time.Time) {
	o.Modified = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *Evidence) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *Evidence) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *Evidence) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetOccurred returns the Occurred field value if set, zero value otherwise.
func (o *Evidence) GetOccurred() time.Time {
	if o == nil || o.Occurred == nil {
		var ret time.Time
		return ret
	}
	return *o.Occurred
}

// GetOccurredOk returns a tuple with the Occurred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetOccurredOk() (*time.Time, bool) {
	if o == nil || o.Occurred == nil {
		return nil, false
	}
	return o.Occurred, true
}

// HasOccurred returns a boolean if a field has been set.
func (o *Evidence) HasOccurred() bool {
	if o != nil && o.Occurred != nil {
		return true
	}

	return false
}

// SetOccurred gets a reference to the given time.Time and assigns it to the Occurred field.
func (o *Evidence) SetOccurred(v time.Time) {
	o.Occurred = &v
}

// GetPreviousAllRead returns the PreviousAllRead field value if set, zero value otherwise.
func (o *Evidence) GetPreviousAllRead() bool {
	if o == nil || o.PreviousAllRead == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllRead
}

// GetPreviousAllReadOk returns a tuple with the PreviousAllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetPreviousAllReadOk() (*bool, bool) {
	if o == nil || o.PreviousAllRead == nil {
		return nil, false
	}
	return o.PreviousAllRead, true
}

// HasPreviousAllRead returns a boolean if a field has been set.
func (o *Evidence) HasPreviousAllRead() bool {
	if o != nil && o.PreviousAllRead != nil {
		return true
	}

	return false
}

// SetPreviousAllRead gets a reference to the given bool and assigns it to the PreviousAllRead field.
func (o *Evidence) SetPreviousAllRead(v bool) {
	o.PreviousAllRead = &v
}

// GetPreviousAllReadWrite returns the PreviousAllReadWrite field value if set, zero value otherwise.
func (o *Evidence) GetPreviousAllReadWrite() bool {
	if o == nil || o.PreviousAllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllReadWrite
}

// GetPreviousAllReadWriteOk returns a tuple with the PreviousAllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetPreviousAllReadWriteOk() (*bool, bool) {
	if o == nil || o.PreviousAllReadWrite == nil {
		return nil, false
	}
	return o.PreviousAllReadWrite, true
}

// HasPreviousAllReadWrite returns a boolean if a field has been set.
func (o *Evidence) HasPreviousAllReadWrite() bool {
	if o != nil && o.PreviousAllReadWrite != nil {
		return true
	}

	return false
}

// SetPreviousAllReadWrite gets a reference to the given bool and assigns it to the PreviousAllReadWrite field.
func (o *Evidence) SetPreviousAllReadWrite(v bool) {
	o.PreviousAllReadWrite = &v
}

// GetPreviousRoles returns the PreviousRoles field value if set, zero value otherwise.
func (o *Evidence) GetPreviousRoles() []string {
	if o == nil || o.PreviousRoles == nil {
		var ret []string
		return ret
	}
	return *o.PreviousRoles
}

// GetPreviousRolesOk returns a tuple with the PreviousRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetPreviousRolesOk() (*[]string, bool) {
	if o == nil || o.PreviousRoles == nil {
		return nil, false
	}
	return o.PreviousRoles, true
}

// HasPreviousRoles returns a boolean if a field has been set.
func (o *Evidence) HasPreviousRoles() bool {
	if o != nil && o.PreviousRoles != nil {
		return true
	}

	return false
}

// SetPreviousRoles gets a reference to the given []string and assigns it to the PreviousRoles field.
func (o *Evidence) SetPreviousRoles(v []string) {
	o.PreviousRoles = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *Evidence) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *Evidence) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *Evidence) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Evidence) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Evidence) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *Evidence) SetRoles(v []string) {
	o.Roles = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *Evidence) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *Evidence) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *Evidence) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *Evidence) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *Evidence) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *Evidence) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Evidence) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Evidence) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Evidence) SetTags(v []string) {
	o.Tags = &v
}

// GetTagsRaw returns the TagsRaw field value if set, zero value otherwise.
func (o *Evidence) GetTagsRaw() []string {
	if o == nil || o.TagsRaw == nil {
		var ret []string
		return ret
	}
	return *o.TagsRaw
}

// GetTagsRawOk returns a tuple with the TagsRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetTagsRawOk() (*[]string, bool) {
	if o == nil || o.TagsRaw == nil {
		return nil, false
	}
	return o.TagsRaw, true
}

// HasTagsRaw returns a boolean if a field has been set.
func (o *Evidence) HasTagsRaw() bool {
	if o != nil && o.TagsRaw != nil {
		return true
	}

	return false
}

// SetTagsRaw gets a reference to the given []string and assigns it to the TagsRaw field.
func (o *Evidence) SetTagsRaw(v []string) {
	o.TagsRaw = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *Evidence) GetTaskId() string {
	if o == nil || o.TaskId == nil {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetTaskIdOk() (*string, bool) {
	if o == nil || o.TaskId == nil {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *Evidence) HasTaskId() bool {
	if o != nil && o.TaskId != nil {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *Evidence) SetTaskId(v string) {
	o.TaskId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Evidence) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Evidence) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *Evidence) SetVersion(v int64) {
	o.Version = &v
}

// GetXsoarHasReadOnlyRole returns the XsoarHasReadOnlyRole field value if set, zero value otherwise.
func (o *Evidence) GetXsoarHasReadOnlyRole() bool {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		var ret bool
		return ret
	}
	return *o.XsoarHasReadOnlyRole
}

// GetXsoarHasReadOnlyRoleOk returns a tuple with the XsoarHasReadOnlyRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetXsoarHasReadOnlyRoleOk() (*bool, bool) {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		return nil, false
	}
	return o.XsoarHasReadOnlyRole, true
}

// HasXsoarHasReadOnlyRole returns a boolean if a field has been set.
func (o *Evidence) HasXsoarHasReadOnlyRole() bool {
	if o != nil && o.XsoarHasReadOnlyRole != nil {
		return true
	}

	return false
}

// SetXsoarHasReadOnlyRole gets a reference to the given bool and assigns it to the XsoarHasReadOnlyRole field.
func (o *Evidence) SetXsoarHasReadOnlyRole(v bool) {
	o.XsoarHasReadOnlyRole = &v
}

// GetXsoarPreviousReadOnlyRoles returns the XsoarPreviousReadOnlyRoles field value if set, zero value otherwise.
func (o *Evidence) GetXsoarPreviousReadOnlyRoles() []string {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarPreviousReadOnlyRoles
}

// GetXsoarPreviousReadOnlyRolesOk returns a tuple with the XsoarPreviousReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetXsoarPreviousReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarPreviousReadOnlyRoles, true
}

// HasXsoarPreviousReadOnlyRoles returns a boolean if a field has been set.
func (o *Evidence) HasXsoarPreviousReadOnlyRoles() bool {
	if o != nil && o.XsoarPreviousReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarPreviousReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarPreviousReadOnlyRoles field.
func (o *Evidence) SetXsoarPreviousReadOnlyRoles(v []string) {
	o.XsoarPreviousReadOnlyRoles = &v
}

// GetXsoarReadOnlyRoles returns the XsoarReadOnlyRoles field value if set, zero value otherwise.
func (o *Evidence) GetXsoarReadOnlyRoles() []string {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarReadOnlyRoles
}

// GetXsoarReadOnlyRolesOk returns a tuple with the XsoarReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetXsoarReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarReadOnlyRoles, true
}

// HasXsoarReadOnlyRoles returns a boolean if a field has been set.
func (o *Evidence) HasXsoarReadOnlyRoles() bool {
	if o != nil && o.XsoarReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarReadOnlyRoles field.
func (o *Evidence) SetXsoarReadOnlyRoles(v []string) {
	o.XsoarReadOnlyRoles = &v
}

func (o Evidence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ShardID != nil {
		toSerialize["ShardID"] = o.ShardID
	}
	if o.AllRead != nil {
		toSerialize["allRead"] = o.AllRead
	}
	if o.AllReadWrite != nil {
		toSerialize["allReadWrite"] = o.AllReadWrite
	}
	if o.DbotCreatedBy != nil {
		toSerialize["dbotCreatedBy"] = o.DbotCreatedBy
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.EntryId != nil {
		toSerialize["entryId"] = o.EntryId
	}
	if o.Fetched != nil {
		toSerialize["fetched"] = o.Fetched
	}
	if o.HasRole != nil {
		toSerialize["hasRole"] = o.HasRole
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IncidentId != nil {
		toSerialize["incidentId"] = o.IncidentId
	}
	if o.MarkedBy != nil {
		toSerialize["markedBy"] = o.MarkedBy
	}
	if o.MarkedDate != nil {
		toSerialize["markedDate"] = o.MarkedDate
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.Occurred != nil {
		toSerialize["occurred"] = o.Occurred
	}
	if o.PreviousAllRead != nil {
		toSerialize["previousAllRead"] = o.PreviousAllRead
	}
	if o.PreviousAllReadWrite != nil {
		toSerialize["previousAllReadWrite"] = o.PreviousAllReadWrite
	}
	if o.PreviousRoles != nil {
		toSerialize["previousRoles"] = o.PreviousRoles
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TagsRaw != nil {
		toSerialize["tagsRaw"] = o.TagsRaw
	}
	if o.TaskId != nil {
		toSerialize["taskId"] = o.TaskId
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.XsoarHasReadOnlyRole != nil {
		toSerialize["xsoarHasReadOnlyRole"] = o.XsoarHasReadOnlyRole
	}
	if o.XsoarPreviousReadOnlyRoles != nil {
		toSerialize["xsoarPreviousReadOnlyRoles"] = o.XsoarPreviousReadOnlyRoles
	}
	if o.XsoarReadOnlyRoles != nil {
		toSerialize["xsoarReadOnlyRoles"] = o.XsoarReadOnlyRoles
	}
	return json.Marshal(toSerialize)
}

type NullableEvidence struct {
	value *Evidence
	isSet bool
}

func (v NullableEvidence) Get() *Evidence {
	return v.value
}

func (v *NullableEvidence) Set(val *Evidence) {
	v.value = val
	v.isSet = true
}

func (v NullableEvidence) IsSet() bool {
	return v.isSet
}

func (v *NullableEvidence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvidence(val *Evidence) *NullableEvidence {
	return &NullableEvidence{value: val, isSet: true}
}

func (v NullableEvidence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvidence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
