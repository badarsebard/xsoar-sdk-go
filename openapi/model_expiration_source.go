/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ExpirationSource struct for ExpirationSource
type ExpirationSource struct {
	Brand              *string    `json:"brand,omitempty"`
	ExpirationInterval *int64     `json:"expirationInterval,omitempty"`
	ExpirationPolicy   *string    `json:"expirationPolicy,omitempty"`
	Instance           *string    `json:"instance,omitempty"`
	ModuleId           *string    `json:"moduleId,omitempty"`
	SetTime            *time.Time `json:"setTime,omitempty"`
	Source             *string    `json:"source,omitempty"`
	User               *string    `json:"user,omitempty"`
}

// NewExpirationSource instantiates a new ExpirationSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpirationSource() *ExpirationSource {
	this := ExpirationSource{}
	return &this
}

// NewExpirationSourceWithDefaults instantiates a new ExpirationSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpirationSourceWithDefaults() *ExpirationSource {
	this := ExpirationSource{}
	return &this
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *ExpirationSource) GetBrand() string {
	if o == nil || o.Brand == nil {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpirationSource) GetBrandOk() (*string, bool) {
	if o == nil || o.Brand == nil {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *ExpirationSource) HasBrand() bool {
	if o != nil && o.Brand != nil {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *ExpirationSource) SetBrand(v string) {
	o.Brand = &v
}

// GetExpirationInterval returns the ExpirationInterval field value if set, zero value otherwise.
func (o *ExpirationSource) GetExpirationInterval() int64 {
	if o == nil || o.ExpirationInterval == nil {
		var ret int64
		return ret
	}
	return *o.ExpirationInterval
}

// GetExpirationIntervalOk returns a tuple with the ExpirationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpirationSource) GetExpirationIntervalOk() (*int64, bool) {
	if o == nil || o.ExpirationInterval == nil {
		return nil, false
	}
	return o.ExpirationInterval, true
}

// HasExpirationInterval returns a boolean if a field has been set.
func (o *ExpirationSource) HasExpirationInterval() bool {
	if o != nil && o.ExpirationInterval != nil {
		return true
	}

	return false
}

// SetExpirationInterval gets a reference to the given int64 and assigns it to the ExpirationInterval field.
func (o *ExpirationSource) SetExpirationInterval(v int64) {
	o.ExpirationInterval = &v
}

// GetExpirationPolicy returns the ExpirationPolicy field value if set, zero value otherwise.
func (o *ExpirationSource) GetExpirationPolicy() string {
	if o == nil || o.ExpirationPolicy == nil {
		var ret string
		return ret
	}
	return *o.ExpirationPolicy
}

// GetExpirationPolicyOk returns a tuple with the ExpirationPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpirationSource) GetExpirationPolicyOk() (*string, bool) {
	if o == nil || o.ExpirationPolicy == nil {
		return nil, false
	}
	return o.ExpirationPolicy, true
}

// HasExpirationPolicy returns a boolean if a field has been set.
func (o *ExpirationSource) HasExpirationPolicy() bool {
	if o != nil && o.ExpirationPolicy != nil {
		return true
	}

	return false
}

// SetExpirationPolicy gets a reference to the given string and assigns it to the ExpirationPolicy field.
func (o *ExpirationSource) SetExpirationPolicy(v string) {
	o.ExpirationPolicy = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *ExpirationSource) GetInstance() string {
	if o == nil || o.Instance == nil {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpirationSource) GetInstanceOk() (*string, bool) {
	if o == nil || o.Instance == nil {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *ExpirationSource) HasInstance() bool {
	if o != nil && o.Instance != nil {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *ExpirationSource) SetInstance(v string) {
	o.Instance = &v
}

// GetModuleId returns the ModuleId field value if set, zero value otherwise.
func (o *ExpirationSource) GetModuleId() string {
	if o == nil || o.ModuleId == nil {
		var ret string
		return ret
	}
	return *o.ModuleId
}

// GetModuleIdOk returns a tuple with the ModuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpirationSource) GetModuleIdOk() (*string, bool) {
	if o == nil || o.ModuleId == nil {
		return nil, false
	}
	return o.ModuleId, true
}

// HasModuleId returns a boolean if a field has been set.
func (o *ExpirationSource) HasModuleId() bool {
	if o != nil && o.ModuleId != nil {
		return true
	}

	return false
}

// SetModuleId gets a reference to the given string and assigns it to the ModuleId field.
func (o *ExpirationSource) SetModuleId(v string) {
	o.ModuleId = &v
}

// GetSetTime returns the SetTime field value if set, zero value otherwise.
func (o *ExpirationSource) GetSetTime() time.Time {
	if o == nil || o.SetTime == nil {
		var ret time.Time
		return ret
	}
	return *o.SetTime
}

// GetSetTimeOk returns a tuple with the SetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpirationSource) GetSetTimeOk() (*time.Time, bool) {
	if o == nil || o.SetTime == nil {
		return nil, false
	}
	return o.SetTime, true
}

// HasSetTime returns a boolean if a field has been set.
func (o *ExpirationSource) HasSetTime() bool {
	if o != nil && o.SetTime != nil {
		return true
	}

	return false
}

// SetSetTime gets a reference to the given time.Time and assigns it to the SetTime field.
func (o *ExpirationSource) SetSetTime(v time.Time) {
	o.SetTime = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ExpirationSource) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpirationSource) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ExpirationSource) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ExpirationSource) SetSource(v string) {
	o.Source = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ExpirationSource) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpirationSource) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ExpirationSource) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *ExpirationSource) SetUser(v string) {
	o.User = &v
}

func (o ExpirationSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Brand != nil {
		toSerialize["brand"] = o.Brand
	}
	if o.ExpirationInterval != nil {
		toSerialize["expirationInterval"] = o.ExpirationInterval
	}
	if o.ExpirationPolicy != nil {
		toSerialize["expirationPolicy"] = o.ExpirationPolicy
	}
	if o.Instance != nil {
		toSerialize["instance"] = o.Instance
	}
	if o.ModuleId != nil {
		toSerialize["moduleId"] = o.ModuleId
	}
	if o.SetTime != nil {
		toSerialize["setTime"] = o.SetTime
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableExpirationSource struct {
	value *ExpirationSource
	isSet bool
}

func (v NullableExpirationSource) Get() *ExpirationSource {
	return v.value
}

func (v *NullableExpirationSource) Set(val *ExpirationSource) {
	v.value = val
	v.isSet = true
}

func (v NullableExpirationSource) IsSet() bool {
	return v.isSet
}

func (v *NullableExpirationSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpirationSource(val *ExpirationSource) *NullableExpirationSource {
	return &NullableExpirationSource{value: val, isSet: true}
}

func (v NullableExpirationSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpirationSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
