/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// FeedMetadata struct for FeedMetadata
type FeedMetadata struct {
	BypassExclusionList *bool      `json:"bypassExclusionList,omitempty"`
	ClassifierId        *string    `json:"classifierId,omitempty"`
	ClassifierVersion   *int64     `json:"classifierVersion,omitempty"`
	ExpirationInterval  *int64     `json:"expirationInterval,omitempty"`
	ExpirationPolicy    *string    `json:"expirationPolicy,omitempty"`
	FetchTime           *time.Time `json:"fetchTime,omitempty"`
	MapperId            *string    `json:"mapperId,omitempty"`
	MapperVersion       *int64     `json:"mapperVersion,omitempty"`
	ModuleId            *string    `json:"moduleId,omitempty"`
	Reliability         *string    `json:"reliability,omitempty"`
	Score               *int64     `json:"score,omitempty"`
	SourceBrand         *string    `json:"sourceBrand,omitempty"`
	SourceInstance      *string    `json:"sourceInstance,omitempty"`
}

// NewFeedMetadata instantiates a new FeedMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedMetadata() *FeedMetadata {
	this := FeedMetadata{}
	return &this
}

// NewFeedMetadataWithDefaults instantiates a new FeedMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedMetadataWithDefaults() *FeedMetadata {
	this := FeedMetadata{}
	return &this
}

// GetBypassExclusionList returns the BypassExclusionList field value if set, zero value otherwise.
func (o *FeedMetadata) GetBypassExclusionList() bool {
	if o == nil || o.BypassExclusionList == nil {
		var ret bool
		return ret
	}
	return *o.BypassExclusionList
}

// GetBypassExclusionListOk returns a tuple with the BypassExclusionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetBypassExclusionListOk() (*bool, bool) {
	if o == nil || o.BypassExclusionList == nil {
		return nil, false
	}
	return o.BypassExclusionList, true
}

// HasBypassExclusionList returns a boolean if a field has been set.
func (o *FeedMetadata) HasBypassExclusionList() bool {
	if o != nil && o.BypassExclusionList != nil {
		return true
	}

	return false
}

// SetBypassExclusionList gets a reference to the given bool and assigns it to the BypassExclusionList field.
func (o *FeedMetadata) SetBypassExclusionList(v bool) {
	o.BypassExclusionList = &v
}

// GetClassifierId returns the ClassifierId field value if set, zero value otherwise.
func (o *FeedMetadata) GetClassifierId() string {
	if o == nil || o.ClassifierId == nil {
		var ret string
		return ret
	}
	return *o.ClassifierId
}

// GetClassifierIdOk returns a tuple with the ClassifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetClassifierIdOk() (*string, bool) {
	if o == nil || o.ClassifierId == nil {
		return nil, false
	}
	return o.ClassifierId, true
}

// HasClassifierId returns a boolean if a field has been set.
func (o *FeedMetadata) HasClassifierId() bool {
	if o != nil && o.ClassifierId != nil {
		return true
	}

	return false
}

// SetClassifierId gets a reference to the given string and assigns it to the ClassifierId field.
func (o *FeedMetadata) SetClassifierId(v string) {
	o.ClassifierId = &v
}

// GetClassifierVersion returns the ClassifierVersion field value if set, zero value otherwise.
func (o *FeedMetadata) GetClassifierVersion() int64 {
	if o == nil || o.ClassifierVersion == nil {
		var ret int64
		return ret
	}
	return *o.ClassifierVersion
}

// GetClassifierVersionOk returns a tuple with the ClassifierVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetClassifierVersionOk() (*int64, bool) {
	if o == nil || o.ClassifierVersion == nil {
		return nil, false
	}
	return o.ClassifierVersion, true
}

// HasClassifierVersion returns a boolean if a field has been set.
func (o *FeedMetadata) HasClassifierVersion() bool {
	if o != nil && o.ClassifierVersion != nil {
		return true
	}

	return false
}

// SetClassifierVersion gets a reference to the given int64 and assigns it to the ClassifierVersion field.
func (o *FeedMetadata) SetClassifierVersion(v int64) {
	o.ClassifierVersion = &v
}

// GetExpirationInterval returns the ExpirationInterval field value if set, zero value otherwise.
func (o *FeedMetadata) GetExpirationInterval() int64 {
	if o == nil || o.ExpirationInterval == nil {
		var ret int64
		return ret
	}
	return *o.ExpirationInterval
}

// GetExpirationIntervalOk returns a tuple with the ExpirationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetExpirationIntervalOk() (*int64, bool) {
	if o == nil || o.ExpirationInterval == nil {
		return nil, false
	}
	return o.ExpirationInterval, true
}

// HasExpirationInterval returns a boolean if a field has been set.
func (o *FeedMetadata) HasExpirationInterval() bool {
	if o != nil && o.ExpirationInterval != nil {
		return true
	}

	return false
}

// SetExpirationInterval gets a reference to the given int64 and assigns it to the ExpirationInterval field.
func (o *FeedMetadata) SetExpirationInterval(v int64) {
	o.ExpirationInterval = &v
}

// GetExpirationPolicy returns the ExpirationPolicy field value if set, zero value otherwise.
func (o *FeedMetadata) GetExpirationPolicy() string {
	if o == nil || o.ExpirationPolicy == nil {
		var ret string
		return ret
	}
	return *o.ExpirationPolicy
}

// GetExpirationPolicyOk returns a tuple with the ExpirationPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetExpirationPolicyOk() (*string, bool) {
	if o == nil || o.ExpirationPolicy == nil {
		return nil, false
	}
	return o.ExpirationPolicy, true
}

// HasExpirationPolicy returns a boolean if a field has been set.
func (o *FeedMetadata) HasExpirationPolicy() bool {
	if o != nil && o.ExpirationPolicy != nil {
		return true
	}

	return false
}

// SetExpirationPolicy gets a reference to the given string and assigns it to the ExpirationPolicy field.
func (o *FeedMetadata) SetExpirationPolicy(v string) {
	o.ExpirationPolicy = &v
}

// GetFetchTime returns the FetchTime field value if set, zero value otherwise.
func (o *FeedMetadata) GetFetchTime() time.Time {
	if o == nil || o.FetchTime == nil {
		var ret time.Time
		return ret
	}
	return *o.FetchTime
}

// GetFetchTimeOk returns a tuple with the FetchTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetFetchTimeOk() (*time.Time, bool) {
	if o == nil || o.FetchTime == nil {
		return nil, false
	}
	return o.FetchTime, true
}

// HasFetchTime returns a boolean if a field has been set.
func (o *FeedMetadata) HasFetchTime() bool {
	if o != nil && o.FetchTime != nil {
		return true
	}

	return false
}

// SetFetchTime gets a reference to the given time.Time and assigns it to the FetchTime field.
func (o *FeedMetadata) SetFetchTime(v time.Time) {
	o.FetchTime = &v
}

// GetMapperId returns the MapperId field value if set, zero value otherwise.
func (o *FeedMetadata) GetMapperId() string {
	if o == nil || o.MapperId == nil {
		var ret string
		return ret
	}
	return *o.MapperId
}

// GetMapperIdOk returns a tuple with the MapperId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetMapperIdOk() (*string, bool) {
	if o == nil || o.MapperId == nil {
		return nil, false
	}
	return o.MapperId, true
}

// HasMapperId returns a boolean if a field has been set.
func (o *FeedMetadata) HasMapperId() bool {
	if o != nil && o.MapperId != nil {
		return true
	}

	return false
}

// SetMapperId gets a reference to the given string and assigns it to the MapperId field.
func (o *FeedMetadata) SetMapperId(v string) {
	o.MapperId = &v
}

// GetMapperVersion returns the MapperVersion field value if set, zero value otherwise.
func (o *FeedMetadata) GetMapperVersion() int64 {
	if o == nil || o.MapperVersion == nil {
		var ret int64
		return ret
	}
	return *o.MapperVersion
}

// GetMapperVersionOk returns a tuple with the MapperVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetMapperVersionOk() (*int64, bool) {
	if o == nil || o.MapperVersion == nil {
		return nil, false
	}
	return o.MapperVersion, true
}

// HasMapperVersion returns a boolean if a field has been set.
func (o *FeedMetadata) HasMapperVersion() bool {
	if o != nil && o.MapperVersion != nil {
		return true
	}

	return false
}

// SetMapperVersion gets a reference to the given int64 and assigns it to the MapperVersion field.
func (o *FeedMetadata) SetMapperVersion(v int64) {
	o.MapperVersion = &v
}

// GetModuleId returns the ModuleId field value if set, zero value otherwise.
func (o *FeedMetadata) GetModuleId() string {
	if o == nil || o.ModuleId == nil {
		var ret string
		return ret
	}
	return *o.ModuleId
}

// GetModuleIdOk returns a tuple with the ModuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetModuleIdOk() (*string, bool) {
	if o == nil || o.ModuleId == nil {
		return nil, false
	}
	return o.ModuleId, true
}

// HasModuleId returns a boolean if a field has been set.
func (o *FeedMetadata) HasModuleId() bool {
	if o != nil && o.ModuleId != nil {
		return true
	}

	return false
}

// SetModuleId gets a reference to the given string and assigns it to the ModuleId field.
func (o *FeedMetadata) SetModuleId(v string) {
	o.ModuleId = &v
}

// GetReliability returns the Reliability field value if set, zero value otherwise.
func (o *FeedMetadata) GetReliability() string {
	if o == nil || o.Reliability == nil {
		var ret string
		return ret
	}
	return *o.Reliability
}

// GetReliabilityOk returns a tuple with the Reliability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetReliabilityOk() (*string, bool) {
	if o == nil || o.Reliability == nil {
		return nil, false
	}
	return o.Reliability, true
}

// HasReliability returns a boolean if a field has been set.
func (o *FeedMetadata) HasReliability() bool {
	if o != nil && o.Reliability != nil {
		return true
	}

	return false
}

// SetReliability gets a reference to the given string and assigns it to the Reliability field.
func (o *FeedMetadata) SetReliability(v string) {
	o.Reliability = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *FeedMetadata) GetScore() int64 {
	if o == nil || o.Score == nil {
		var ret int64
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetScoreOk() (*int64, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *FeedMetadata) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given int64 and assigns it to the Score field.
func (o *FeedMetadata) SetScore(v int64) {
	o.Score = &v
}

// GetSourceBrand returns the SourceBrand field value if set, zero value otherwise.
func (o *FeedMetadata) GetSourceBrand() string {
	if o == nil || o.SourceBrand == nil {
		var ret string
		return ret
	}
	return *o.SourceBrand
}

// GetSourceBrandOk returns a tuple with the SourceBrand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetSourceBrandOk() (*string, bool) {
	if o == nil || o.SourceBrand == nil {
		return nil, false
	}
	return o.SourceBrand, true
}

// HasSourceBrand returns a boolean if a field has been set.
func (o *FeedMetadata) HasSourceBrand() bool {
	if o != nil && o.SourceBrand != nil {
		return true
	}

	return false
}

// SetSourceBrand gets a reference to the given string and assigns it to the SourceBrand field.
func (o *FeedMetadata) SetSourceBrand(v string) {
	o.SourceBrand = &v
}

// GetSourceInstance returns the SourceInstance field value if set, zero value otherwise.
func (o *FeedMetadata) GetSourceInstance() string {
	if o == nil || o.SourceInstance == nil {
		var ret string
		return ret
	}
	return *o.SourceInstance
}

// GetSourceInstanceOk returns a tuple with the SourceInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedMetadata) GetSourceInstanceOk() (*string, bool) {
	if o == nil || o.SourceInstance == nil {
		return nil, false
	}
	return o.SourceInstance, true
}

// HasSourceInstance returns a boolean if a field has been set.
func (o *FeedMetadata) HasSourceInstance() bool {
	if o != nil && o.SourceInstance != nil {
		return true
	}

	return false
}

// SetSourceInstance gets a reference to the given string and assigns it to the SourceInstance field.
func (o *FeedMetadata) SetSourceInstance(v string) {
	o.SourceInstance = &v
}

func (o FeedMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BypassExclusionList != nil {
		toSerialize["bypassExclusionList"] = o.BypassExclusionList
	}
	if o.ClassifierId != nil {
		toSerialize["classifierId"] = o.ClassifierId
	}
	if o.ClassifierVersion != nil {
		toSerialize["classifierVersion"] = o.ClassifierVersion
	}
	if o.ExpirationInterval != nil {
		toSerialize["expirationInterval"] = o.ExpirationInterval
	}
	if o.ExpirationPolicy != nil {
		toSerialize["expirationPolicy"] = o.ExpirationPolicy
	}
	if o.FetchTime != nil {
		toSerialize["fetchTime"] = o.FetchTime
	}
	if o.MapperId != nil {
		toSerialize["mapperId"] = o.MapperId
	}
	if o.MapperVersion != nil {
		toSerialize["mapperVersion"] = o.MapperVersion
	}
	if o.ModuleId != nil {
		toSerialize["moduleId"] = o.ModuleId
	}
	if o.Reliability != nil {
		toSerialize["reliability"] = o.Reliability
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	if o.SourceBrand != nil {
		toSerialize["sourceBrand"] = o.SourceBrand
	}
	if o.SourceInstance != nil {
		toSerialize["sourceInstance"] = o.SourceInstance
	}
	return json.Marshal(toSerialize)
}

type NullableFeedMetadata struct {
	value *FeedMetadata
	isSet bool
}

func (v NullableFeedMetadata) Get() *FeedMetadata {
	return v.value
}

func (v *NullableFeedMetadata) Set(val *FeedMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedMetadata(val *FeedMetadata) *NullableFeedMetadata {
	return &NullableFeedMetadata{value: val, isSet: true}
}

func (v NullableFeedMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
