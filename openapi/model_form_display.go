/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FormDisplay struct for FormDisplay
type FormDisplay struct {
	BodyBackgroundColor         *string `json:"bodyBackgroundColor,omitempty"`
	BodyFontColor               *string `json:"bodyFontColor,omitempty"`
	HeaderBackgroundColor       *string `json:"headerBackgroundColor,omitempty"`
	HeaderFontColor             *string `json:"headerFontColor,omitempty"`
	IsExternalRtl               *bool   `json:"isExternalRtl,omitempty"`
	Sender                      *string `json:"sender,omitempty"`
	SubmitButtonBackgroundColor *string `json:"submitButtonBackgroundColor,omitempty"`
	SubmitButtonFontColor       *string `json:"submitButtonFontColor,omitempty"`
	SubmitText                  *string `json:"submitText,omitempty"`
}

// NewFormDisplay instantiates a new FormDisplay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormDisplay() *FormDisplay {
	this := FormDisplay{}
	return &this
}

// NewFormDisplayWithDefaults instantiates a new FormDisplay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormDisplayWithDefaults() *FormDisplay {
	this := FormDisplay{}
	return &this
}

// GetBodyBackgroundColor returns the BodyBackgroundColor field value if set, zero value otherwise.
func (o *FormDisplay) GetBodyBackgroundColor() string {
	if o == nil || o.BodyBackgroundColor == nil {
		var ret string
		return ret
	}
	return *o.BodyBackgroundColor
}

// GetBodyBackgroundColorOk returns a tuple with the BodyBackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDisplay) GetBodyBackgroundColorOk() (*string, bool) {
	if o == nil || o.BodyBackgroundColor == nil {
		return nil, false
	}
	return o.BodyBackgroundColor, true
}

// HasBodyBackgroundColor returns a boolean if a field has been set.
func (o *FormDisplay) HasBodyBackgroundColor() bool {
	if o != nil && o.BodyBackgroundColor != nil {
		return true
	}

	return false
}

// SetBodyBackgroundColor gets a reference to the given string and assigns it to the BodyBackgroundColor field.
func (o *FormDisplay) SetBodyBackgroundColor(v string) {
	o.BodyBackgroundColor = &v
}

// GetBodyFontColor returns the BodyFontColor field value if set, zero value otherwise.
func (o *FormDisplay) GetBodyFontColor() string {
	if o == nil || o.BodyFontColor == nil {
		var ret string
		return ret
	}
	return *o.BodyFontColor
}

// GetBodyFontColorOk returns a tuple with the BodyFontColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDisplay) GetBodyFontColorOk() (*string, bool) {
	if o == nil || o.BodyFontColor == nil {
		return nil, false
	}
	return o.BodyFontColor, true
}

// HasBodyFontColor returns a boolean if a field has been set.
func (o *FormDisplay) HasBodyFontColor() bool {
	if o != nil && o.BodyFontColor != nil {
		return true
	}

	return false
}

// SetBodyFontColor gets a reference to the given string and assigns it to the BodyFontColor field.
func (o *FormDisplay) SetBodyFontColor(v string) {
	o.BodyFontColor = &v
}

// GetHeaderBackgroundColor returns the HeaderBackgroundColor field value if set, zero value otherwise.
func (o *FormDisplay) GetHeaderBackgroundColor() string {
	if o == nil || o.HeaderBackgroundColor == nil {
		var ret string
		return ret
	}
	return *o.HeaderBackgroundColor
}

// GetHeaderBackgroundColorOk returns a tuple with the HeaderBackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDisplay) GetHeaderBackgroundColorOk() (*string, bool) {
	if o == nil || o.HeaderBackgroundColor == nil {
		return nil, false
	}
	return o.HeaderBackgroundColor, true
}

// HasHeaderBackgroundColor returns a boolean if a field has been set.
func (o *FormDisplay) HasHeaderBackgroundColor() bool {
	if o != nil && o.HeaderBackgroundColor != nil {
		return true
	}

	return false
}

// SetHeaderBackgroundColor gets a reference to the given string and assigns it to the HeaderBackgroundColor field.
func (o *FormDisplay) SetHeaderBackgroundColor(v string) {
	o.HeaderBackgroundColor = &v
}

// GetHeaderFontColor returns the HeaderFontColor field value if set, zero value otherwise.
func (o *FormDisplay) GetHeaderFontColor() string {
	if o == nil || o.HeaderFontColor == nil {
		var ret string
		return ret
	}
	return *o.HeaderFontColor
}

// GetHeaderFontColorOk returns a tuple with the HeaderFontColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDisplay) GetHeaderFontColorOk() (*string, bool) {
	if o == nil || o.HeaderFontColor == nil {
		return nil, false
	}
	return o.HeaderFontColor, true
}

// HasHeaderFontColor returns a boolean if a field has been set.
func (o *FormDisplay) HasHeaderFontColor() bool {
	if o != nil && o.HeaderFontColor != nil {
		return true
	}

	return false
}

// SetHeaderFontColor gets a reference to the given string and assigns it to the HeaderFontColor field.
func (o *FormDisplay) SetHeaderFontColor(v string) {
	o.HeaderFontColor = &v
}

// GetIsExternalRtl returns the IsExternalRtl field value if set, zero value otherwise.
func (o *FormDisplay) GetIsExternalRtl() bool {
	if o == nil || o.IsExternalRtl == nil {
		var ret bool
		return ret
	}
	return *o.IsExternalRtl
}

// GetIsExternalRtlOk returns a tuple with the IsExternalRtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDisplay) GetIsExternalRtlOk() (*bool, bool) {
	if o == nil || o.IsExternalRtl == nil {
		return nil, false
	}
	return o.IsExternalRtl, true
}

// HasIsExternalRtl returns a boolean if a field has been set.
func (o *FormDisplay) HasIsExternalRtl() bool {
	if o != nil && o.IsExternalRtl != nil {
		return true
	}

	return false
}

// SetIsExternalRtl gets a reference to the given bool and assigns it to the IsExternalRtl field.
func (o *FormDisplay) SetIsExternalRtl(v bool) {
	o.IsExternalRtl = &v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *FormDisplay) GetSender() string {
	if o == nil || o.Sender == nil {
		var ret string
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDisplay) GetSenderOk() (*string, bool) {
	if o == nil || o.Sender == nil {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *FormDisplay) HasSender() bool {
	if o != nil && o.Sender != nil {
		return true
	}

	return false
}

// SetSender gets a reference to the given string and assigns it to the Sender field.
func (o *FormDisplay) SetSender(v string) {
	o.Sender = &v
}

// GetSubmitButtonBackgroundColor returns the SubmitButtonBackgroundColor field value if set, zero value otherwise.
func (o *FormDisplay) GetSubmitButtonBackgroundColor() string {
	if o == nil || o.SubmitButtonBackgroundColor == nil {
		var ret string
		return ret
	}
	return *o.SubmitButtonBackgroundColor
}

// GetSubmitButtonBackgroundColorOk returns a tuple with the SubmitButtonBackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDisplay) GetSubmitButtonBackgroundColorOk() (*string, bool) {
	if o == nil || o.SubmitButtonBackgroundColor == nil {
		return nil, false
	}
	return o.SubmitButtonBackgroundColor, true
}

// HasSubmitButtonBackgroundColor returns a boolean if a field has been set.
func (o *FormDisplay) HasSubmitButtonBackgroundColor() bool {
	if o != nil && o.SubmitButtonBackgroundColor != nil {
		return true
	}

	return false
}

// SetSubmitButtonBackgroundColor gets a reference to the given string and assigns it to the SubmitButtonBackgroundColor field.
func (o *FormDisplay) SetSubmitButtonBackgroundColor(v string) {
	o.SubmitButtonBackgroundColor = &v
}

// GetSubmitButtonFontColor returns the SubmitButtonFontColor field value if set, zero value otherwise.
func (o *FormDisplay) GetSubmitButtonFontColor() string {
	if o == nil || o.SubmitButtonFontColor == nil {
		var ret string
		return ret
	}
	return *o.SubmitButtonFontColor
}

// GetSubmitButtonFontColorOk returns a tuple with the SubmitButtonFontColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDisplay) GetSubmitButtonFontColorOk() (*string, bool) {
	if o == nil || o.SubmitButtonFontColor == nil {
		return nil, false
	}
	return o.SubmitButtonFontColor, true
}

// HasSubmitButtonFontColor returns a boolean if a field has been set.
func (o *FormDisplay) HasSubmitButtonFontColor() bool {
	if o != nil && o.SubmitButtonFontColor != nil {
		return true
	}

	return false
}

// SetSubmitButtonFontColor gets a reference to the given string and assigns it to the SubmitButtonFontColor field.
func (o *FormDisplay) SetSubmitButtonFontColor(v string) {
	o.SubmitButtonFontColor = &v
}

// GetSubmitText returns the SubmitText field value if set, zero value otherwise.
func (o *FormDisplay) GetSubmitText() string {
	if o == nil || o.SubmitText == nil {
		var ret string
		return ret
	}
	return *o.SubmitText
}

// GetSubmitTextOk returns a tuple with the SubmitText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDisplay) GetSubmitTextOk() (*string, bool) {
	if o == nil || o.SubmitText == nil {
		return nil, false
	}
	return o.SubmitText, true
}

// HasSubmitText returns a boolean if a field has been set.
func (o *FormDisplay) HasSubmitText() bool {
	if o != nil && o.SubmitText != nil {
		return true
	}

	return false
}

// SetSubmitText gets a reference to the given string and assigns it to the SubmitText field.
func (o *FormDisplay) SetSubmitText(v string) {
	o.SubmitText = &v
}

func (o FormDisplay) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BodyBackgroundColor != nil {
		toSerialize["bodyBackgroundColor"] = o.BodyBackgroundColor
	}
	if o.BodyFontColor != nil {
		toSerialize["bodyFontColor"] = o.BodyFontColor
	}
	if o.HeaderBackgroundColor != nil {
		toSerialize["headerBackgroundColor"] = o.HeaderBackgroundColor
	}
	if o.HeaderFontColor != nil {
		toSerialize["headerFontColor"] = o.HeaderFontColor
	}
	if o.IsExternalRtl != nil {
		toSerialize["isExternalRtl"] = o.IsExternalRtl
	}
	if o.Sender != nil {
		toSerialize["sender"] = o.Sender
	}
	if o.SubmitButtonBackgroundColor != nil {
		toSerialize["submitButtonBackgroundColor"] = o.SubmitButtonBackgroundColor
	}
	if o.SubmitButtonFontColor != nil {
		toSerialize["submitButtonFontColor"] = o.SubmitButtonFontColor
	}
	if o.SubmitText != nil {
		toSerialize["submitText"] = o.SubmitText
	}
	return json.Marshal(toSerialize)
}

type NullableFormDisplay struct {
	value *FormDisplay
	isSet bool
}

func (v NullableFormDisplay) Get() *FormDisplay {
	return v.value
}

func (v *NullableFormDisplay) Set(val *FormDisplay) {
	v.value = val
	v.isSet = true
}

func (v NullableFormDisplay) IsSet() bool {
	return v.isSet
}

func (v *NullableFormDisplay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormDisplay(val *FormDisplay) *NullableFormDisplay {
	return &NullableFormDisplay{value: val, isSet: true}
}

func (v NullableFormDisplay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormDisplay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
