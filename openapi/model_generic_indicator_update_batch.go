/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GenericIndicatorUpdateBatch struct for GenericIndicatorUpdateBatch
type GenericIndicatorUpdateBatch struct {
	All            *bool            `json:"all,omitempty"`
	Columns        *[]string        `json:"columns,omitempty"`
	DoNotWhitelist *bool            `json:"doNotWhitelist,omitempty"`
	Filter         *IndicatorFilter `json:"filter,omitempty"`
	Ids            *[]string        `json:"ids,omitempty"`
	Reason         *string          `json:"reason,omitempty"`
	Reputations    *[]string        `json:"reputations,omitempty"`
}

// NewGenericIndicatorUpdateBatch instantiates a new GenericIndicatorUpdateBatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericIndicatorUpdateBatch() *GenericIndicatorUpdateBatch {
	this := GenericIndicatorUpdateBatch{}
	return &this
}

// NewGenericIndicatorUpdateBatchWithDefaults instantiates a new GenericIndicatorUpdateBatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericIndicatorUpdateBatchWithDefaults() *GenericIndicatorUpdateBatch {
	this := GenericIndicatorUpdateBatch{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *GenericIndicatorUpdateBatch) GetAll() bool {
	if o == nil || o.All == nil {
		var ret bool
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericIndicatorUpdateBatch) GetAllOk() (*bool, bool) {
	if o == nil || o.All == nil {
		return nil, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *GenericIndicatorUpdateBatch) HasAll() bool {
	if o != nil && o.All != nil {
		return true
	}

	return false
}

// SetAll gets a reference to the given bool and assigns it to the All field.
func (o *GenericIndicatorUpdateBatch) SetAll(v bool) {
	o.All = &v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *GenericIndicatorUpdateBatch) GetColumns() []string {
	if o == nil || o.Columns == nil {
		var ret []string
		return ret
	}
	return *o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericIndicatorUpdateBatch) GetColumnsOk() (*[]string, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *GenericIndicatorUpdateBatch) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []string and assigns it to the Columns field.
func (o *GenericIndicatorUpdateBatch) SetColumns(v []string) {
	o.Columns = &v
}

// GetDoNotWhitelist returns the DoNotWhitelist field value if set, zero value otherwise.
func (o *GenericIndicatorUpdateBatch) GetDoNotWhitelist() bool {
	if o == nil || o.DoNotWhitelist == nil {
		var ret bool
		return ret
	}
	return *o.DoNotWhitelist
}

// GetDoNotWhitelistOk returns a tuple with the DoNotWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericIndicatorUpdateBatch) GetDoNotWhitelistOk() (*bool, bool) {
	if o == nil || o.DoNotWhitelist == nil {
		return nil, false
	}
	return o.DoNotWhitelist, true
}

// HasDoNotWhitelist returns a boolean if a field has been set.
func (o *GenericIndicatorUpdateBatch) HasDoNotWhitelist() bool {
	if o != nil && o.DoNotWhitelist != nil {
		return true
	}

	return false
}

// SetDoNotWhitelist gets a reference to the given bool and assigns it to the DoNotWhitelist field.
func (o *GenericIndicatorUpdateBatch) SetDoNotWhitelist(v bool) {
	o.DoNotWhitelist = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *GenericIndicatorUpdateBatch) GetFilter() IndicatorFilter {
	if o == nil || o.Filter == nil {
		var ret IndicatorFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericIndicatorUpdateBatch) GetFilterOk() (*IndicatorFilter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *GenericIndicatorUpdateBatch) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given IndicatorFilter and assigns it to the Filter field.
func (o *GenericIndicatorUpdateBatch) SetFilter(v IndicatorFilter) {
	o.Filter = &v
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *GenericIndicatorUpdateBatch) GetIds() []string {
	if o == nil || o.Ids == nil {
		var ret []string
		return ret
	}
	return *o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericIndicatorUpdateBatch) GetIdsOk() (*[]string, bool) {
	if o == nil || o.Ids == nil {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *GenericIndicatorUpdateBatch) HasIds() bool {
	if o != nil && o.Ids != nil {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *GenericIndicatorUpdateBatch) SetIds(v []string) {
	o.Ids = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *GenericIndicatorUpdateBatch) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericIndicatorUpdateBatch) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *GenericIndicatorUpdateBatch) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *GenericIndicatorUpdateBatch) SetReason(v string) {
	o.Reason = &v
}

// GetReputations returns the Reputations field value if set, zero value otherwise.
func (o *GenericIndicatorUpdateBatch) GetReputations() []string {
	if o == nil || o.Reputations == nil {
		var ret []string
		return ret
	}
	return *o.Reputations
}

// GetReputationsOk returns a tuple with the Reputations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericIndicatorUpdateBatch) GetReputationsOk() (*[]string, bool) {
	if o == nil || o.Reputations == nil {
		return nil, false
	}
	return o.Reputations, true
}

// HasReputations returns a boolean if a field has been set.
func (o *GenericIndicatorUpdateBatch) HasReputations() bool {
	if o != nil && o.Reputations != nil {
		return true
	}

	return false
}

// SetReputations gets a reference to the given []string and assigns it to the Reputations field.
func (o *GenericIndicatorUpdateBatch) SetReputations(v []string) {
	o.Reputations = &v
}

func (o GenericIndicatorUpdateBatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.All != nil {
		toSerialize["all"] = o.All
	}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if o.DoNotWhitelist != nil {
		toSerialize["doNotWhitelist"] = o.DoNotWhitelist
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Reputations != nil {
		toSerialize["reputations"] = o.Reputations
	}
	return json.Marshal(toSerialize)
}

type NullableGenericIndicatorUpdateBatch struct {
	value *GenericIndicatorUpdateBatch
	isSet bool
}

func (v NullableGenericIndicatorUpdateBatch) Get() *GenericIndicatorUpdateBatch {
	return v.value
}

func (v *NullableGenericIndicatorUpdateBatch) Set(val *GenericIndicatorUpdateBatch) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericIndicatorUpdateBatch) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericIndicatorUpdateBatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericIndicatorUpdateBatch(val *GenericIndicatorUpdateBatch) *NullableGenericIndicatorUpdateBatch {
	return &NullableGenericIndicatorUpdateBatch{value: val, isSet: true}
}

func (v NullableGenericIndicatorUpdateBatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericIndicatorUpdateBatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
