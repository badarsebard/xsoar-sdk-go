/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GenericStringFilter GenericStringFilter is a general filter that will fetch entities using the Query value
type GenericStringFilter struct {
	// Cache of join functions
	Cache *map[string][]string `json:"Cache,omitempty"`
	// Do not use workers mechanism while searching bleve
	IgnoreWorkers *bool `json:"ignoreWorkers,omitempty"`
	// 0-based page
	Page  *int64  `json:"page,omitempty"`
	Query *string `json:"query,omitempty"`
	// Efficient next page, pass max sort value from previous page
	SearchAfter *[]string `json:"searchAfter,omitempty"`
	// Efficient next page, pass max ES sort value from previous page
	SearchAfterElastic *[]string `json:"searchAfterElastic,omitempty"`
	// Efficient prev page, pass min sort value from next page
	SearchBefore *[]string `json:"searchBefore,omitempty"`
	// Efficient prev page, pass min ES sort value from next page
	SearchBeforeElastic *[]string `json:"searchBeforeElastic,omitempty"`
	// Size is limited to 1000, if not passed it defaults to 0, and no results will return
	Size *int64 `json:"size,omitempty"`
	// The sort order
	Sort *[]Order `json:"sort,omitempty"`
}

// NewGenericStringFilter instantiates a new GenericStringFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericStringFilter() *GenericStringFilter {
	this := GenericStringFilter{}
	return &this
}

// NewGenericStringFilterWithDefaults instantiates a new GenericStringFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericStringFilterWithDefaults() *GenericStringFilter {
	this := GenericStringFilter{}
	return &this
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *GenericStringFilter) GetCache() map[string][]string {
	if o == nil || o.Cache == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericStringFilter) GetCacheOk() (*map[string][]string, bool) {
	if o == nil || o.Cache == nil {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *GenericStringFilter) HasCache() bool {
	if o != nil && o.Cache != nil {
		return true
	}

	return false
}

// SetCache gets a reference to the given map[string][]string and assigns it to the Cache field.
func (o *GenericStringFilter) SetCache(v map[string][]string) {
	o.Cache = &v
}

// GetIgnoreWorkers returns the IgnoreWorkers field value if set, zero value otherwise.
func (o *GenericStringFilter) GetIgnoreWorkers() bool {
	if o == nil || o.IgnoreWorkers == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreWorkers
}

// GetIgnoreWorkersOk returns a tuple with the IgnoreWorkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericStringFilter) GetIgnoreWorkersOk() (*bool, bool) {
	if o == nil || o.IgnoreWorkers == nil {
		return nil, false
	}
	return o.IgnoreWorkers, true
}

// HasIgnoreWorkers returns a boolean if a field has been set.
func (o *GenericStringFilter) HasIgnoreWorkers() bool {
	if o != nil && o.IgnoreWorkers != nil {
		return true
	}

	return false
}

// SetIgnoreWorkers gets a reference to the given bool and assigns it to the IgnoreWorkers field.
func (o *GenericStringFilter) SetIgnoreWorkers(v bool) {
	o.IgnoreWorkers = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *GenericStringFilter) GetPage() int64 {
	if o == nil || o.Page == nil {
		var ret int64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericStringFilter) GetPageOk() (*int64, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *GenericStringFilter) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int64 and assigns it to the Page field.
func (o *GenericStringFilter) SetPage(v int64) {
	o.Page = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *GenericStringFilter) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericStringFilter) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *GenericStringFilter) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *GenericStringFilter) SetQuery(v string) {
	o.Query = &v
}

// GetSearchAfter returns the SearchAfter field value if set, zero value otherwise.
func (o *GenericStringFilter) GetSearchAfter() []string {
	if o == nil || o.SearchAfter == nil {
		var ret []string
		return ret
	}
	return *o.SearchAfter
}

// GetSearchAfterOk returns a tuple with the SearchAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericStringFilter) GetSearchAfterOk() (*[]string, bool) {
	if o == nil || o.SearchAfter == nil {
		return nil, false
	}
	return o.SearchAfter, true
}

// HasSearchAfter returns a boolean if a field has been set.
func (o *GenericStringFilter) HasSearchAfter() bool {
	if o != nil && o.SearchAfter != nil {
		return true
	}

	return false
}

// SetSearchAfter gets a reference to the given []string and assigns it to the SearchAfter field.
func (o *GenericStringFilter) SetSearchAfter(v []string) {
	o.SearchAfter = &v
}

// GetSearchAfterElastic returns the SearchAfterElastic field value if set, zero value otherwise.
func (o *GenericStringFilter) GetSearchAfterElastic() []string {
	if o == nil || o.SearchAfterElastic == nil {
		var ret []string
		return ret
	}
	return *o.SearchAfterElastic
}

// GetSearchAfterElasticOk returns a tuple with the SearchAfterElastic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericStringFilter) GetSearchAfterElasticOk() (*[]string, bool) {
	if o == nil || o.SearchAfterElastic == nil {
		return nil, false
	}
	return o.SearchAfterElastic, true
}

// HasSearchAfterElastic returns a boolean if a field has been set.
func (o *GenericStringFilter) HasSearchAfterElastic() bool {
	if o != nil && o.SearchAfterElastic != nil {
		return true
	}

	return false
}

// SetSearchAfterElastic gets a reference to the given []string and assigns it to the SearchAfterElastic field.
func (o *GenericStringFilter) SetSearchAfterElastic(v []string) {
	o.SearchAfterElastic = &v
}

// GetSearchBefore returns the SearchBefore field value if set, zero value otherwise.
func (o *GenericStringFilter) GetSearchBefore() []string {
	if o == nil || o.SearchBefore == nil {
		var ret []string
		return ret
	}
	return *o.SearchBefore
}

// GetSearchBeforeOk returns a tuple with the SearchBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericStringFilter) GetSearchBeforeOk() (*[]string, bool) {
	if o == nil || o.SearchBefore == nil {
		return nil, false
	}
	return o.SearchBefore, true
}

// HasSearchBefore returns a boolean if a field has been set.
func (o *GenericStringFilter) HasSearchBefore() bool {
	if o != nil && o.SearchBefore != nil {
		return true
	}

	return false
}

// SetSearchBefore gets a reference to the given []string and assigns it to the SearchBefore field.
func (o *GenericStringFilter) SetSearchBefore(v []string) {
	o.SearchBefore = &v
}

// GetSearchBeforeElastic returns the SearchBeforeElastic field value if set, zero value otherwise.
func (o *GenericStringFilter) GetSearchBeforeElastic() []string {
	if o == nil || o.SearchBeforeElastic == nil {
		var ret []string
		return ret
	}
	return *o.SearchBeforeElastic
}

// GetSearchBeforeElasticOk returns a tuple with the SearchBeforeElastic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericStringFilter) GetSearchBeforeElasticOk() (*[]string, bool) {
	if o == nil || o.SearchBeforeElastic == nil {
		return nil, false
	}
	return o.SearchBeforeElastic, true
}

// HasSearchBeforeElastic returns a boolean if a field has been set.
func (o *GenericStringFilter) HasSearchBeforeElastic() bool {
	if o != nil && o.SearchBeforeElastic != nil {
		return true
	}

	return false
}

// SetSearchBeforeElastic gets a reference to the given []string and assigns it to the SearchBeforeElastic field.
func (o *GenericStringFilter) SetSearchBeforeElastic(v []string) {
	o.SearchBeforeElastic = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *GenericStringFilter) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericStringFilter) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *GenericStringFilter) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *GenericStringFilter) SetSize(v int64) {
	o.Size = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *GenericStringFilter) GetSort() []Order {
	if o == nil || o.Sort == nil {
		var ret []Order
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericStringFilter) GetSortOk() (*[]Order, bool) {
	if o == nil || o.Sort == nil {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *GenericStringFilter) HasSort() bool {
	if o != nil && o.Sort != nil {
		return true
	}

	return false
}

// SetSort gets a reference to the given []Order and assigns it to the Sort field.
func (o *GenericStringFilter) SetSort(v []Order) {
	o.Sort = &v
}

func (o GenericStringFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cache != nil {
		toSerialize["Cache"] = o.Cache
	}
	if o.IgnoreWorkers != nil {
		toSerialize["ignoreWorkers"] = o.IgnoreWorkers
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.SearchAfter != nil {
		toSerialize["searchAfter"] = o.SearchAfter
	}
	if o.SearchAfterElastic != nil {
		toSerialize["searchAfterElastic"] = o.SearchAfterElastic
	}
	if o.SearchBefore != nil {
		toSerialize["searchBefore"] = o.SearchBefore
	}
	if o.SearchBeforeElastic != nil {
		toSerialize["searchBeforeElastic"] = o.SearchBeforeElastic
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	return json.Marshal(toSerialize)
}

type NullableGenericStringFilter struct {
	value *GenericStringFilter
	isSet bool
}

func (v NullableGenericStringFilter) Get() *GenericStringFilter {
	return v.value
}

func (v *NullableGenericStringFilter) Set(val *GenericStringFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericStringFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericStringFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericStringFilter(val *GenericStringFilter) *NullableGenericStringFilter {
	return &NullableGenericStringFilter{value: val, isSet: true}
}

func (v NullableGenericStringFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericStringFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
