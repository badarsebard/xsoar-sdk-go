/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GridColumn struct for GridColumn
type GridColumn struct {
	DisplayName     *string   `json:"displayName,omitempty"`
	FieldCalcScript *string   `json:"fieldCalcScript,omitempty"`
	IsDefault       *bool     `json:"isDefault,omitempty"`
	IsReadOnly      *bool     `json:"isReadOnly,omitempty"`
	Key             *string   `json:"key,omitempty"`
	Required        *bool     `json:"required,omitempty"`
	Script          *string   `json:"script,omitempty"`
	SelectValues    *[]string `json:"selectValues,omitempty"`
	Type            *string   `json:"type,omitempty"`
	Width           *int64    `json:"width,omitempty"`
}

// NewGridColumn instantiates a new GridColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridColumn() *GridColumn {
	this := GridColumn{}
	return &this
}

// NewGridColumnWithDefaults instantiates a new GridColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridColumnWithDefaults() *GridColumn {
	this := GridColumn{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *GridColumn) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridColumn) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *GridColumn) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *GridColumn) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFieldCalcScript returns the FieldCalcScript field value if set, zero value otherwise.
func (o *GridColumn) GetFieldCalcScript() string {
	if o == nil || o.FieldCalcScript == nil {
		var ret string
		return ret
	}
	return *o.FieldCalcScript
}

// GetFieldCalcScriptOk returns a tuple with the FieldCalcScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridColumn) GetFieldCalcScriptOk() (*string, bool) {
	if o == nil || o.FieldCalcScript == nil {
		return nil, false
	}
	return o.FieldCalcScript, true
}

// HasFieldCalcScript returns a boolean if a field has been set.
func (o *GridColumn) HasFieldCalcScript() bool {
	if o != nil && o.FieldCalcScript != nil {
		return true
	}

	return false
}

// SetFieldCalcScript gets a reference to the given string and assigns it to the FieldCalcScript field.
func (o *GridColumn) SetFieldCalcScript(v string) {
	o.FieldCalcScript = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *GridColumn) GetIsDefault() bool {
	if o == nil || o.IsDefault == nil {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridColumn) GetIsDefaultOk() (*bool, bool) {
	if o == nil || o.IsDefault == nil {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *GridColumn) HasIsDefault() bool {
	if o != nil && o.IsDefault != nil {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *GridColumn) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *GridColumn) GetIsReadOnly() bool {
	if o == nil || o.IsReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridColumn) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || o.IsReadOnly == nil {
		return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *GridColumn) HasIsReadOnly() bool {
	if o != nil && o.IsReadOnly != nil {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *GridColumn) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *GridColumn) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridColumn) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *GridColumn) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *GridColumn) SetKey(v string) {
	o.Key = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *GridColumn) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridColumn) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *GridColumn) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *GridColumn) SetRequired(v bool) {
	o.Required = &v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *GridColumn) GetScript() string {
	if o == nil || o.Script == nil {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridColumn) GetScriptOk() (*string, bool) {
	if o == nil || o.Script == nil {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *GridColumn) HasScript() bool {
	if o != nil && o.Script != nil {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *GridColumn) SetScript(v string) {
	o.Script = &v
}

// GetSelectValues returns the SelectValues field value if set, zero value otherwise.
func (o *GridColumn) GetSelectValues() []string {
	if o == nil || o.SelectValues == nil {
		var ret []string
		return ret
	}
	return *o.SelectValues
}

// GetSelectValuesOk returns a tuple with the SelectValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridColumn) GetSelectValuesOk() (*[]string, bool) {
	if o == nil || o.SelectValues == nil {
		return nil, false
	}
	return o.SelectValues, true
}

// HasSelectValues returns a boolean if a field has been set.
func (o *GridColumn) HasSelectValues() bool {
	if o != nil && o.SelectValues != nil {
		return true
	}

	return false
}

// SetSelectValues gets a reference to the given []string and assigns it to the SelectValues field.
func (o *GridColumn) SetSelectValues(v []string) {
	o.SelectValues = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GridColumn) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridColumn) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GridColumn) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GridColumn) SetType(v string) {
	o.Type = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *GridColumn) GetWidth() int64 {
	if o == nil || o.Width == nil {
		var ret int64
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridColumn) GetWidthOk() (*int64, bool) {
	if o == nil || o.Width == nil {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *GridColumn) HasWidth() bool {
	if o != nil && o.Width != nil {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int64 and assigns it to the Width field.
func (o *GridColumn) SetWidth(v int64) {
	o.Width = &v
}

func (o GridColumn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.FieldCalcScript != nil {
		toSerialize["fieldCalcScript"] = o.FieldCalcScript
	}
	if o.IsDefault != nil {
		toSerialize["isDefault"] = o.IsDefault
	}
	if o.IsReadOnly != nil {
		toSerialize["isReadOnly"] = o.IsReadOnly
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.Script != nil {
		toSerialize["script"] = o.Script
	}
	if o.SelectValues != nil {
		toSerialize["selectValues"] = o.SelectValues
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Width != nil {
		toSerialize["width"] = o.Width
	}
	return json.Marshal(toSerialize)
}

type NullableGridColumn struct {
	value *GridColumn
	isSet bool
}

func (v NullableGridColumn) Get() *GridColumn {
	return v.value
}

func (v *NullableGridColumn) Set(val *GridColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableGridColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableGridColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridColumn(val *GridColumn) *NullableGridColumn {
	return &NullableGridColumn{value: val, isSet: true}
}

func (v NullableGridColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
