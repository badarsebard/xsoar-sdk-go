/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Group struct for Group
type Group struct {
	// color used to identify the group
	Color *string `json:"color,omitempty"`
	// The number of participants in the group
	Count *int64 `json:"count,omitempty"`
	// The data value provided in array of integer values.
	Data     *[]int64 `json:"data,omitempty"`
	DataType *string  `json:"dataType,omitempty"`
	// The data value provided in array of float values.
	FloatData *[]float64 `json:"floatData,omitempty"`
	Groups    *Groups    `json:"groups,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Pivot     *string    `json:"pivot,omitempty"`
	Query     *string    `json:"query,omitempty"`
	X         *float64   `json:"x,omitempty"`
	Y         *float64   `json:"y,omitempty"`
	Z         *float64   `json:"z,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup() *Group {
	this := Group{}
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *Group) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *Group) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *Group) SetColor(v string) {
	o.Color = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *Group) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *Group) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *Group) SetCount(v int64) {
	o.Count = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Group) GetData() []int64 {
	if o == nil || o.Data == nil {
		var ret []int64
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetDataOk() (*[]int64, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Group) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []int64 and assigns it to the Data field.
func (o *Group) SetData(v []int64) {
	o.Data = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *Group) GetDataType() string {
	if o == nil || o.DataType == nil {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetDataTypeOk() (*string, bool) {
	if o == nil || o.DataType == nil {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *Group) HasDataType() bool {
	if o != nil && o.DataType != nil {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *Group) SetDataType(v string) {
	o.DataType = &v
}

// GetFloatData returns the FloatData field value if set, zero value otherwise.
func (o *Group) GetFloatData() []float64 {
	if o == nil || o.FloatData == nil {
		var ret []float64
		return ret
	}
	return *o.FloatData
}

// GetFloatDataOk returns a tuple with the FloatData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetFloatDataOk() (*[]float64, bool) {
	if o == nil || o.FloatData == nil {
		return nil, false
	}
	return o.FloatData, true
}

// HasFloatData returns a boolean if a field has been set.
func (o *Group) HasFloatData() bool {
	if o != nil && o.FloatData != nil {
		return true
	}

	return false
}

// SetFloatData gets a reference to the given []float64 and assigns it to the FloatData field.
func (o *Group) SetFloatData(v []float64) {
	o.FloatData = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *Group) GetGroups() Groups {
	if o == nil || o.Groups == nil {
		var ret Groups
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupsOk() (*Groups, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *Group) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given Groups and assigns it to the Groups field.
func (o *Group) SetGroups(v Groups) {
	o.Groups = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Group) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Group) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Group) SetName(v string) {
	o.Name = &v
}

// GetPivot returns the Pivot field value if set, zero value otherwise.
func (o *Group) GetPivot() string {
	if o == nil || o.Pivot == nil {
		var ret string
		return ret
	}
	return *o.Pivot
}

// GetPivotOk returns a tuple with the Pivot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetPivotOk() (*string, bool) {
	if o == nil || o.Pivot == nil {
		return nil, false
	}
	return o.Pivot, true
}

// HasPivot returns a boolean if a field has been set.
func (o *Group) HasPivot() bool {
	if o != nil && o.Pivot != nil {
		return true
	}

	return false
}

// SetPivot gets a reference to the given string and assigns it to the Pivot field.
func (o *Group) SetPivot(v string) {
	o.Pivot = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Group) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Group) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *Group) SetQuery(v string) {
	o.Query = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *Group) GetX() float64 {
	if o == nil || o.X == nil {
		var ret float64
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetXOk() (*float64, bool) {
	if o == nil || o.X == nil {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *Group) HasX() bool {
	if o != nil && o.X != nil {
		return true
	}

	return false
}

// SetX gets a reference to the given float64 and assigns it to the X field.
func (o *Group) SetX(v float64) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *Group) GetY() float64 {
	if o == nil || o.Y == nil {
		var ret float64
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetYOk() (*float64, bool) {
	if o == nil || o.Y == nil {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *Group) HasY() bool {
	if o != nil && o.Y != nil {
		return true
	}

	return false
}

// SetY gets a reference to the given float64 and assigns it to the Y field.
func (o *Group) SetY(v float64) {
	o.Y = &v
}

// GetZ returns the Z field value if set, zero value otherwise.
func (o *Group) GetZ() float64 {
	if o == nil || o.Z == nil {
		var ret float64
		return ret
	}
	return *o.Z
}

// GetZOk returns a tuple with the Z field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetZOk() (*float64, bool) {
	if o == nil || o.Z == nil {
		return nil, false
	}
	return o.Z, true
}

// HasZ returns a boolean if a field has been set.
func (o *Group) HasZ() bool {
	if o != nil && o.Z != nil {
		return true
	}

	return false
}

// SetZ gets a reference to the given float64 and assigns it to the Z field.
func (o *Group) SetZ(v float64) {
	o.Z = &v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.DataType != nil {
		toSerialize["dataType"] = o.DataType
	}
	if o.FloatData != nil {
		toSerialize["floatData"] = o.FloatData
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Pivot != nil {
		toSerialize["pivot"] = o.Pivot
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.X != nil {
		toSerialize["x"] = o.X
	}
	if o.Y != nil {
		toSerialize["y"] = o.Y
	}
	if o.Z != nil {
		toSerialize["z"] = o.Z
	}
	return json.Marshal(toSerialize)
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
