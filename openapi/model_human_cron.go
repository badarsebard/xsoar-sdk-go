/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HumanCron struct for HumanCron
type HumanCron struct {
	AtTimeHour   *string   `json:"atTimeHour,omitempty"`
	AtTimeMinute *string   `json:"atTimeMinute,omitempty"`
	Days         *[]string `json:"days,omitempty"`
	// the following fields are deprecated. do not use them.
	SchedulingType *string `json:"schedulingType,omitempty"`
	TimePeriod     *int64  `json:"timePeriod,omitempty"`
	TimePeriodType *string `json:"timePeriodType,omitempty"`
}

// NewHumanCron instantiates a new HumanCron object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHumanCron() *HumanCron {
	this := HumanCron{}
	return &this
}

// NewHumanCronWithDefaults instantiates a new HumanCron object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHumanCronWithDefaults() *HumanCron {
	this := HumanCron{}
	return &this
}

// GetAtTimeHour returns the AtTimeHour field value if set, zero value otherwise.
func (o *HumanCron) GetAtTimeHour() string {
	if o == nil || o.AtTimeHour == nil {
		var ret string
		return ret
	}
	return *o.AtTimeHour
}

// GetAtTimeHourOk returns a tuple with the AtTimeHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanCron) GetAtTimeHourOk() (*string, bool) {
	if o == nil || o.AtTimeHour == nil {
		return nil, false
	}
	return o.AtTimeHour, true
}

// HasAtTimeHour returns a boolean if a field has been set.
func (o *HumanCron) HasAtTimeHour() bool {
	if o != nil && o.AtTimeHour != nil {
		return true
	}

	return false
}

// SetAtTimeHour gets a reference to the given string and assigns it to the AtTimeHour field.
func (o *HumanCron) SetAtTimeHour(v string) {
	o.AtTimeHour = &v
}

// GetAtTimeMinute returns the AtTimeMinute field value if set, zero value otherwise.
func (o *HumanCron) GetAtTimeMinute() string {
	if o == nil || o.AtTimeMinute == nil {
		var ret string
		return ret
	}
	return *o.AtTimeMinute
}

// GetAtTimeMinuteOk returns a tuple with the AtTimeMinute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanCron) GetAtTimeMinuteOk() (*string, bool) {
	if o == nil || o.AtTimeMinute == nil {
		return nil, false
	}
	return o.AtTimeMinute, true
}

// HasAtTimeMinute returns a boolean if a field has been set.
func (o *HumanCron) HasAtTimeMinute() bool {
	if o != nil && o.AtTimeMinute != nil {
		return true
	}

	return false
}

// SetAtTimeMinute gets a reference to the given string and assigns it to the AtTimeMinute field.
func (o *HumanCron) SetAtTimeMinute(v string) {
	o.AtTimeMinute = &v
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *HumanCron) GetDays() []string {
	if o == nil || o.Days == nil {
		var ret []string
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanCron) GetDaysOk() (*[]string, bool) {
	if o == nil || o.Days == nil {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *HumanCron) HasDays() bool {
	if o != nil && o.Days != nil {
		return true
	}

	return false
}

// SetDays gets a reference to the given []string and assigns it to the Days field.
func (o *HumanCron) SetDays(v []string) {
	o.Days = &v
}

// GetSchedulingType returns the SchedulingType field value if set, zero value otherwise.
func (o *HumanCron) GetSchedulingType() string {
	if o == nil || o.SchedulingType == nil {
		var ret string
		return ret
	}
	return *o.SchedulingType
}

// GetSchedulingTypeOk returns a tuple with the SchedulingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanCron) GetSchedulingTypeOk() (*string, bool) {
	if o == nil || o.SchedulingType == nil {
		return nil, false
	}
	return o.SchedulingType, true
}

// HasSchedulingType returns a boolean if a field has been set.
func (o *HumanCron) HasSchedulingType() bool {
	if o != nil && o.SchedulingType != nil {
		return true
	}

	return false
}

// SetSchedulingType gets a reference to the given string and assigns it to the SchedulingType field.
func (o *HumanCron) SetSchedulingType(v string) {
	o.SchedulingType = &v
}

// GetTimePeriod returns the TimePeriod field value if set, zero value otherwise.
func (o *HumanCron) GetTimePeriod() int64 {
	if o == nil || o.TimePeriod == nil {
		var ret int64
		return ret
	}
	return *o.TimePeriod
}

// GetTimePeriodOk returns a tuple with the TimePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanCron) GetTimePeriodOk() (*int64, bool) {
	if o == nil || o.TimePeriod == nil {
		return nil, false
	}
	return o.TimePeriod, true
}

// HasTimePeriod returns a boolean if a field has been set.
func (o *HumanCron) HasTimePeriod() bool {
	if o != nil && o.TimePeriod != nil {
		return true
	}

	return false
}

// SetTimePeriod gets a reference to the given int64 and assigns it to the TimePeriod field.
func (o *HumanCron) SetTimePeriod(v int64) {
	o.TimePeriod = &v
}

// GetTimePeriodType returns the TimePeriodType field value if set, zero value otherwise.
func (o *HumanCron) GetTimePeriodType() string {
	if o == nil || o.TimePeriodType == nil {
		var ret string
		return ret
	}
	return *o.TimePeriodType
}

// GetTimePeriodTypeOk returns a tuple with the TimePeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HumanCron) GetTimePeriodTypeOk() (*string, bool) {
	if o == nil || o.TimePeriodType == nil {
		return nil, false
	}
	return o.TimePeriodType, true
}

// HasTimePeriodType returns a boolean if a field has been set.
func (o *HumanCron) HasTimePeriodType() bool {
	if o != nil && o.TimePeriodType != nil {
		return true
	}

	return false
}

// SetTimePeriodType gets a reference to the given string and assigns it to the TimePeriodType field.
func (o *HumanCron) SetTimePeriodType(v string) {
	o.TimePeriodType = &v
}

func (o HumanCron) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AtTimeHour != nil {
		toSerialize["atTimeHour"] = o.AtTimeHour
	}
	if o.AtTimeMinute != nil {
		toSerialize["atTimeMinute"] = o.AtTimeMinute
	}
	if o.Days != nil {
		toSerialize["days"] = o.Days
	}
	if o.SchedulingType != nil {
		toSerialize["schedulingType"] = o.SchedulingType
	}
	if o.TimePeriod != nil {
		toSerialize["timePeriod"] = o.TimePeriod
	}
	if o.TimePeriodType != nil {
		toSerialize["timePeriodType"] = o.TimePeriodType
	}
	return json.Marshal(toSerialize)
}

type NullableHumanCron struct {
	value *HumanCron
	isSet bool
}

func (v NullableHumanCron) Get() *HumanCron {
	return v.value
}

func (v *NullableHumanCron) Set(val *HumanCron) {
	v.value = val
	v.isSet = true
}

func (v NullableHumanCron) IsSet() bool {
	return v.isSet
}

func (v *NullableHumanCron) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHumanCron(val *HumanCron) *NullableHumanCron {
	return &NullableHumanCron{value: val, isSet: true}
}

func (v NullableHumanCron) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHumanCron) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
