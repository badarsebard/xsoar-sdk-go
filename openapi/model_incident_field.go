/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// IncidentField struct for IncidentField
type IncidentField struct {
	AssociatedToAll *bool `json:"associatedToAll,omitempty"`
	// AssociatedTypes - list of incident (case) types IDs related to specific incident field
	AssociatedTypes   *[]string                            `json:"associatedTypes,omitempty"`
	BreachScript      *string                              `json:"breachScript,omitempty"`
	CaseInsensitive   *bool                                `json:"caseInsensitive,omitempty"`
	CliName           *string                              `json:"cliName,omitempty"`
	CloseForm         *bool                                `json:"closeForm,omitempty"`
	Columns           *[]GridColumn                        `json:"columns,omitempty"`
	CommitMessage     *string                              `json:"commitMessage,omitempty"`
	Content           *bool                                `json:"content,omitempty"`
	DefaultRows       *[]map[string]map[string]interface{} `json:"defaultRows,omitempty"`
	Description       *string                              `json:"description,omitempty"`
	EditForm          *bool                                `json:"editForm,omitempty"`
	FieldCalcScript   *string                              `json:"fieldCalcScript,omitempty"`
	FromServerVersion *string                              `json:"fromServerVersion,omitempty"`
	// FieldGroup is the field group
	Group       *float64             `json:"group,omitempty"`
	Hidden      *bool                `json:"hidden,omitempty"`
	Highlight   *map[string][]string `json:"highlight,omitempty"`
	Id          *string              `json:"id,omitempty"`
	IsReadOnly  *bool                `json:"isReadOnly,omitempty"`
	ItemVersion *string              `json:"itemVersion,omitempty"`
	Locked      *bool                `json:"locked,omitempty"`
	// FieldMergeStrategy strategy for merging of indicator fields
	MergeStrategy                     *string    `json:"mergeStrategy,omitempty"`
	Modified                          *time.Time `json:"modified,omitempty"`
	Name                              *string    `json:"name,omitempty"`
	NeverSetAsRequired                *bool      `json:"neverSetAsRequired,omitempty"`
	NumericId                         *int64     `json:"numericId,omitempty"`
	OwnerOnly                         *bool      `json:"ownerOnly,omitempty"`
	PackID                            *string    `json:"packID,omitempty"`
	PackPropagationLabels             *[]string  `json:"packPropagationLabels,omitempty"`
	Placeholder                       *string    `json:"placeholder,omitempty"`
	PrevName                          *string    `json:"prevName,omitempty"`
	PrimaryTerm                       *int64     `json:"primaryTerm,omitempty"`
	PropagationLabels                 *[]string  `json:"propagationLabels,omitempty"`
	Required                          *bool      `json:"required,omitempty"`
	RunScriptAfterUpdate              *bool      `json:"runScriptAfterUpdate,omitempty"`
	Script                            *string    `json:"script,omitempty"`
	SelectValues                      *[]string  `json:"selectValues,omitempty"`
	SequenceNumber                    *int64     `json:"sequenceNumber,omitempty"`
	ShouldCommit                      *bool      `json:"shouldCommit,omitempty"`
	Sla                               *int64     `json:"sla,omitempty"`
	SortValues                        *[]string  `json:"sortValues,omitempty"`
	System                            *bool      `json:"system,omitempty"`
	SystemAssociatedTypes             *[]string  `json:"systemAssociatedTypes,omitempty"`
	Threshold                         *float64   `json:"threshold,omitempty"`
	ToServerVersion                   *string    `json:"toServerVersion,omitempty"`
	Type                              *string    `json:"type,omitempty"`
	Unmapped                          *bool      `json:"unmapped,omitempty"`
	Unsearchable                      *bool      `json:"unsearchable,omitempty"`
	UseAsKpi                          *bool      `json:"useAsKpi,omitempty"`
	ValidatedError                    *string    `json:"validatedError,omitempty"`
	ValidationRegex                   *string    `json:"validationRegex,omitempty"`
	VcShouldIgnore                    *bool      `json:"vcShouldIgnore,omitempty"`
	VcShouldKeepItemLegacyProdMachine *bool      `json:"vcShouldKeepItemLegacyProdMachine,omitempty"`
	Version                           *int64     `json:"version,omitempty"`
}

// NewIncidentField instantiates a new IncidentField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentField() *IncidentField {
	this := IncidentField{}
	return &this
}

// NewIncidentFieldWithDefaults instantiates a new IncidentField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentFieldWithDefaults() *IncidentField {
	this := IncidentField{}
	return &this
}

// GetAssociatedToAll returns the AssociatedToAll field value if set, zero value otherwise.
func (o *IncidentField) GetAssociatedToAll() bool {
	if o == nil || o.AssociatedToAll == nil {
		var ret bool
		return ret
	}
	return *o.AssociatedToAll
}

// GetAssociatedToAllOk returns a tuple with the AssociatedToAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetAssociatedToAllOk() (*bool, bool) {
	if o == nil || o.AssociatedToAll == nil {
		return nil, false
	}
	return o.AssociatedToAll, true
}

// HasAssociatedToAll returns a boolean if a field has been set.
func (o *IncidentField) HasAssociatedToAll() bool {
	if o != nil && o.AssociatedToAll != nil {
		return true
	}

	return false
}

// SetAssociatedToAll gets a reference to the given bool and assigns it to the AssociatedToAll field.
func (o *IncidentField) SetAssociatedToAll(v bool) {
	o.AssociatedToAll = &v
}

// GetAssociatedTypes returns the AssociatedTypes field value if set, zero value otherwise.
func (o *IncidentField) GetAssociatedTypes() []string {
	if o == nil || o.AssociatedTypes == nil {
		var ret []string
		return ret
	}
	return *o.AssociatedTypes
}

// GetAssociatedTypesOk returns a tuple with the AssociatedTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetAssociatedTypesOk() (*[]string, bool) {
	if o == nil || o.AssociatedTypes == nil {
		return nil, false
	}
	return o.AssociatedTypes, true
}

// HasAssociatedTypes returns a boolean if a field has been set.
func (o *IncidentField) HasAssociatedTypes() bool {
	if o != nil && o.AssociatedTypes != nil {
		return true
	}

	return false
}

// SetAssociatedTypes gets a reference to the given []string and assigns it to the AssociatedTypes field.
func (o *IncidentField) SetAssociatedTypes(v []string) {
	o.AssociatedTypes = &v
}

// GetBreachScript returns the BreachScript field value if set, zero value otherwise.
func (o *IncidentField) GetBreachScript() string {
	if o == nil || o.BreachScript == nil {
		var ret string
		return ret
	}
	return *o.BreachScript
}

// GetBreachScriptOk returns a tuple with the BreachScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetBreachScriptOk() (*string, bool) {
	if o == nil || o.BreachScript == nil {
		return nil, false
	}
	return o.BreachScript, true
}

// HasBreachScript returns a boolean if a field has been set.
func (o *IncidentField) HasBreachScript() bool {
	if o != nil && o.BreachScript != nil {
		return true
	}

	return false
}

// SetBreachScript gets a reference to the given string and assigns it to the BreachScript field.
func (o *IncidentField) SetBreachScript(v string) {
	o.BreachScript = &v
}

// GetCaseInsensitive returns the CaseInsensitive field value if set, zero value otherwise.
func (o *IncidentField) GetCaseInsensitive() bool {
	if o == nil || o.CaseInsensitive == nil {
		var ret bool
		return ret
	}
	return *o.CaseInsensitive
}

// GetCaseInsensitiveOk returns a tuple with the CaseInsensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetCaseInsensitiveOk() (*bool, bool) {
	if o == nil || o.CaseInsensitive == nil {
		return nil, false
	}
	return o.CaseInsensitive, true
}

// HasCaseInsensitive returns a boolean if a field has been set.
func (o *IncidentField) HasCaseInsensitive() bool {
	if o != nil && o.CaseInsensitive != nil {
		return true
	}

	return false
}

// SetCaseInsensitive gets a reference to the given bool and assigns it to the CaseInsensitive field.
func (o *IncidentField) SetCaseInsensitive(v bool) {
	o.CaseInsensitive = &v
}

// GetCliName returns the CliName field value if set, zero value otherwise.
func (o *IncidentField) GetCliName() string {
	if o == nil || o.CliName == nil {
		var ret string
		return ret
	}
	return *o.CliName
}

// GetCliNameOk returns a tuple with the CliName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetCliNameOk() (*string, bool) {
	if o == nil || o.CliName == nil {
		return nil, false
	}
	return o.CliName, true
}

// HasCliName returns a boolean if a field has been set.
func (o *IncidentField) HasCliName() bool {
	if o != nil && o.CliName != nil {
		return true
	}

	return false
}

// SetCliName gets a reference to the given string and assigns it to the CliName field.
func (o *IncidentField) SetCliName(v string) {
	o.CliName = &v
}

// GetCloseForm returns the CloseForm field value if set, zero value otherwise.
func (o *IncidentField) GetCloseForm() bool {
	if o == nil || o.CloseForm == nil {
		var ret bool
		return ret
	}
	return *o.CloseForm
}

// GetCloseFormOk returns a tuple with the CloseForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetCloseFormOk() (*bool, bool) {
	if o == nil || o.CloseForm == nil {
		return nil, false
	}
	return o.CloseForm, true
}

// HasCloseForm returns a boolean if a field has been set.
func (o *IncidentField) HasCloseForm() bool {
	if o != nil && o.CloseForm != nil {
		return true
	}

	return false
}

// SetCloseForm gets a reference to the given bool and assigns it to the CloseForm field.
func (o *IncidentField) SetCloseForm(v bool) {
	o.CloseForm = &v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *IncidentField) GetColumns() []GridColumn {
	if o == nil || o.Columns == nil {
		var ret []GridColumn
		return ret
	}
	return *o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetColumnsOk() (*[]GridColumn, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *IncidentField) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []GridColumn and assigns it to the Columns field.
func (o *IncidentField) SetColumns(v []GridColumn) {
	o.Columns = &v
}

// GetCommitMessage returns the CommitMessage field value if set, zero value otherwise.
func (o *IncidentField) GetCommitMessage() string {
	if o == nil || o.CommitMessage == nil {
		var ret string
		return ret
	}
	return *o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetCommitMessageOk() (*string, bool) {
	if o == nil || o.CommitMessage == nil {
		return nil, false
	}
	return o.CommitMessage, true
}

// HasCommitMessage returns a boolean if a field has been set.
func (o *IncidentField) HasCommitMessage() bool {
	if o != nil && o.CommitMessage != nil {
		return true
	}

	return false
}

// SetCommitMessage gets a reference to the given string and assigns it to the CommitMessage field.
func (o *IncidentField) SetCommitMessage(v string) {
	o.CommitMessage = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *IncidentField) GetContent() bool {
	if o == nil || o.Content == nil {
		var ret bool
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetContentOk() (*bool, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *IncidentField) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given bool and assigns it to the Content field.
func (o *IncidentField) SetContent(v bool) {
	o.Content = &v
}

// GetDefaultRows returns the DefaultRows field value if set, zero value otherwise.
func (o *IncidentField) GetDefaultRows() []map[string]map[string]interface{} {
	if o == nil || o.DefaultRows == nil {
		var ret []map[string]map[string]interface{}
		return ret
	}
	return *o.DefaultRows
}

// GetDefaultRowsOk returns a tuple with the DefaultRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetDefaultRowsOk() (*[]map[string]map[string]interface{}, bool) {
	if o == nil || o.DefaultRows == nil {
		return nil, false
	}
	return o.DefaultRows, true
}

// HasDefaultRows returns a boolean if a field has been set.
func (o *IncidentField) HasDefaultRows() bool {
	if o != nil && o.DefaultRows != nil {
		return true
	}

	return false
}

// SetDefaultRows gets a reference to the given []map[string]map[string]interface{} and assigns it to the DefaultRows field.
func (o *IncidentField) SetDefaultRows(v []map[string]map[string]interface{}) {
	o.DefaultRows = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IncidentField) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IncidentField) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IncidentField) SetDescription(v string) {
	o.Description = &v
}

// GetEditForm returns the EditForm field value if set, zero value otherwise.
func (o *IncidentField) GetEditForm() bool {
	if o == nil || o.EditForm == nil {
		var ret bool
		return ret
	}
	return *o.EditForm
}

// GetEditFormOk returns a tuple with the EditForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetEditFormOk() (*bool, bool) {
	if o == nil || o.EditForm == nil {
		return nil, false
	}
	return o.EditForm, true
}

// HasEditForm returns a boolean if a field has been set.
func (o *IncidentField) HasEditForm() bool {
	if o != nil && o.EditForm != nil {
		return true
	}

	return false
}

// SetEditForm gets a reference to the given bool and assigns it to the EditForm field.
func (o *IncidentField) SetEditForm(v bool) {
	o.EditForm = &v
}

// GetFieldCalcScript returns the FieldCalcScript field value if set, zero value otherwise.
func (o *IncidentField) GetFieldCalcScript() string {
	if o == nil || o.FieldCalcScript == nil {
		var ret string
		return ret
	}
	return *o.FieldCalcScript
}

// GetFieldCalcScriptOk returns a tuple with the FieldCalcScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetFieldCalcScriptOk() (*string, bool) {
	if o == nil || o.FieldCalcScript == nil {
		return nil, false
	}
	return o.FieldCalcScript, true
}

// HasFieldCalcScript returns a boolean if a field has been set.
func (o *IncidentField) HasFieldCalcScript() bool {
	if o != nil && o.FieldCalcScript != nil {
		return true
	}

	return false
}

// SetFieldCalcScript gets a reference to the given string and assigns it to the FieldCalcScript field.
func (o *IncidentField) SetFieldCalcScript(v string) {
	o.FieldCalcScript = &v
}

// GetFromServerVersion returns the FromServerVersion field value if set, zero value otherwise.
func (o *IncidentField) GetFromServerVersion() string {
	if o == nil || o.FromServerVersion == nil {
		var ret string
		return ret
	}
	return *o.FromServerVersion
}

// GetFromServerVersionOk returns a tuple with the FromServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetFromServerVersionOk() (*string, bool) {
	if o == nil || o.FromServerVersion == nil {
		return nil, false
	}
	return o.FromServerVersion, true
}

// HasFromServerVersion returns a boolean if a field has been set.
func (o *IncidentField) HasFromServerVersion() bool {
	if o != nil && o.FromServerVersion != nil {
		return true
	}

	return false
}

// SetFromServerVersion gets a reference to the given string and assigns it to the FromServerVersion field.
func (o *IncidentField) SetFromServerVersion(v string) {
	o.FromServerVersion = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *IncidentField) GetGroup() float64 {
	if o == nil || o.Group == nil {
		var ret float64
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetGroupOk() (*float64, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *IncidentField) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given float64 and assigns it to the Group field.
func (o *IncidentField) SetGroup(v float64) {
	o.Group = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *IncidentField) GetHidden() bool {
	if o == nil || o.Hidden == nil {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetHiddenOk() (*bool, bool) {
	if o == nil || o.Hidden == nil {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *IncidentField) HasHidden() bool {
	if o != nil && o.Hidden != nil {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *IncidentField) SetHidden(v bool) {
	o.Hidden = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *IncidentField) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *IncidentField) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *IncidentField) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IncidentField) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IncidentField) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IncidentField) SetId(v string) {
	o.Id = &v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *IncidentField) GetIsReadOnly() bool {
	if o == nil || o.IsReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || o.IsReadOnly == nil {
		return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *IncidentField) HasIsReadOnly() bool {
	if o != nil && o.IsReadOnly != nil {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *IncidentField) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

// GetItemVersion returns the ItemVersion field value if set, zero value otherwise.
func (o *IncidentField) GetItemVersion() string {
	if o == nil || o.ItemVersion == nil {
		var ret string
		return ret
	}
	return *o.ItemVersion
}

// GetItemVersionOk returns a tuple with the ItemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetItemVersionOk() (*string, bool) {
	if o == nil || o.ItemVersion == nil {
		return nil, false
	}
	return o.ItemVersion, true
}

// HasItemVersion returns a boolean if a field has been set.
func (o *IncidentField) HasItemVersion() bool {
	if o != nil && o.ItemVersion != nil {
		return true
	}

	return false
}

// SetItemVersion gets a reference to the given string and assigns it to the ItemVersion field.
func (o *IncidentField) SetItemVersion(v string) {
	o.ItemVersion = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *IncidentField) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *IncidentField) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *IncidentField) SetLocked(v bool) {
	o.Locked = &v
}

// GetMergeStrategy returns the MergeStrategy field value if set, zero value otherwise.
func (o *IncidentField) GetMergeStrategy() string {
	if o == nil || o.MergeStrategy == nil {
		var ret string
		return ret
	}
	return *o.MergeStrategy
}

// GetMergeStrategyOk returns a tuple with the MergeStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetMergeStrategyOk() (*string, bool) {
	if o == nil || o.MergeStrategy == nil {
		return nil, false
	}
	return o.MergeStrategy, true
}

// HasMergeStrategy returns a boolean if a field has been set.
func (o *IncidentField) HasMergeStrategy() bool {
	if o != nil && o.MergeStrategy != nil {
		return true
	}

	return false
}

// SetMergeStrategy gets a reference to the given string and assigns it to the MergeStrategy field.
func (o *IncidentField) SetMergeStrategy(v string) {
	o.MergeStrategy = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *IncidentField) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *IncidentField) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *IncidentField) SetModified(v time.Time) {
	o.Modified = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IncidentField) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IncidentField) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IncidentField) SetName(v string) {
	o.Name = &v
}

// GetNeverSetAsRequired returns the NeverSetAsRequired field value if set, zero value otherwise.
func (o *IncidentField) GetNeverSetAsRequired() bool {
	if o == nil || o.NeverSetAsRequired == nil {
		var ret bool
		return ret
	}
	return *o.NeverSetAsRequired
}

// GetNeverSetAsRequiredOk returns a tuple with the NeverSetAsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetNeverSetAsRequiredOk() (*bool, bool) {
	if o == nil || o.NeverSetAsRequired == nil {
		return nil, false
	}
	return o.NeverSetAsRequired, true
}

// HasNeverSetAsRequired returns a boolean if a field has been set.
func (o *IncidentField) HasNeverSetAsRequired() bool {
	if o != nil && o.NeverSetAsRequired != nil {
		return true
	}

	return false
}

// SetNeverSetAsRequired gets a reference to the given bool and assigns it to the NeverSetAsRequired field.
func (o *IncidentField) SetNeverSetAsRequired(v bool) {
	o.NeverSetAsRequired = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *IncidentField) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *IncidentField) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *IncidentField) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetOwnerOnly returns the OwnerOnly field value if set, zero value otherwise.
func (o *IncidentField) GetOwnerOnly() bool {
	if o == nil || o.OwnerOnly == nil {
		var ret bool
		return ret
	}
	return *o.OwnerOnly
}

// GetOwnerOnlyOk returns a tuple with the OwnerOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetOwnerOnlyOk() (*bool, bool) {
	if o == nil || o.OwnerOnly == nil {
		return nil, false
	}
	return o.OwnerOnly, true
}

// HasOwnerOnly returns a boolean if a field has been set.
func (o *IncidentField) HasOwnerOnly() bool {
	if o != nil && o.OwnerOnly != nil {
		return true
	}

	return false
}

// SetOwnerOnly gets a reference to the given bool and assigns it to the OwnerOnly field.
func (o *IncidentField) SetOwnerOnly(v bool) {
	o.OwnerOnly = &v
}

// GetPackID returns the PackID field value if set, zero value otherwise.
func (o *IncidentField) GetPackID() string {
	if o == nil || o.PackID == nil {
		var ret string
		return ret
	}
	return *o.PackID
}

// GetPackIDOk returns a tuple with the PackID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetPackIDOk() (*string, bool) {
	if o == nil || o.PackID == nil {
		return nil, false
	}
	return o.PackID, true
}

// HasPackID returns a boolean if a field has been set.
func (o *IncidentField) HasPackID() bool {
	if o != nil && o.PackID != nil {
		return true
	}

	return false
}

// SetPackID gets a reference to the given string and assigns it to the PackID field.
func (o *IncidentField) SetPackID(v string) {
	o.PackID = &v
}

// GetPackPropagationLabels returns the PackPropagationLabels field value if set, zero value otherwise.
func (o *IncidentField) GetPackPropagationLabels() []string {
	if o == nil || o.PackPropagationLabels == nil {
		var ret []string
		return ret
	}
	return *o.PackPropagationLabels
}

// GetPackPropagationLabelsOk returns a tuple with the PackPropagationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetPackPropagationLabelsOk() (*[]string, bool) {
	if o == nil || o.PackPropagationLabels == nil {
		return nil, false
	}
	return o.PackPropagationLabels, true
}

// HasPackPropagationLabels returns a boolean if a field has been set.
func (o *IncidentField) HasPackPropagationLabels() bool {
	if o != nil && o.PackPropagationLabels != nil {
		return true
	}

	return false
}

// SetPackPropagationLabels gets a reference to the given []string and assigns it to the PackPropagationLabels field.
func (o *IncidentField) SetPackPropagationLabels(v []string) {
	o.PackPropagationLabels = &v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *IncidentField) GetPlaceholder() string {
	if o == nil || o.Placeholder == nil {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetPlaceholderOk() (*string, bool) {
	if o == nil || o.Placeholder == nil {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *IncidentField) HasPlaceholder() bool {
	if o != nil && o.Placeholder != nil {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *IncidentField) SetPlaceholder(v string) {
	o.Placeholder = &v
}

// GetPrevName returns the PrevName field value if set, zero value otherwise.
func (o *IncidentField) GetPrevName() string {
	if o == nil || o.PrevName == nil {
		var ret string
		return ret
	}
	return *o.PrevName
}

// GetPrevNameOk returns a tuple with the PrevName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetPrevNameOk() (*string, bool) {
	if o == nil || o.PrevName == nil {
		return nil, false
	}
	return o.PrevName, true
}

// HasPrevName returns a boolean if a field has been set.
func (o *IncidentField) HasPrevName() bool {
	if o != nil && o.PrevName != nil {
		return true
	}

	return false
}

// SetPrevName gets a reference to the given string and assigns it to the PrevName field.
func (o *IncidentField) SetPrevName(v string) {
	o.PrevName = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *IncidentField) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *IncidentField) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *IncidentField) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetPropagationLabels returns the PropagationLabels field value if set, zero value otherwise.
func (o *IncidentField) GetPropagationLabels() []string {
	if o == nil || o.PropagationLabels == nil {
		var ret []string
		return ret
	}
	return *o.PropagationLabels
}

// GetPropagationLabelsOk returns a tuple with the PropagationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetPropagationLabelsOk() (*[]string, bool) {
	if o == nil || o.PropagationLabels == nil {
		return nil, false
	}
	return o.PropagationLabels, true
}

// HasPropagationLabels returns a boolean if a field has been set.
func (o *IncidentField) HasPropagationLabels() bool {
	if o != nil && o.PropagationLabels != nil {
		return true
	}

	return false
}

// SetPropagationLabels gets a reference to the given []string and assigns it to the PropagationLabels field.
func (o *IncidentField) SetPropagationLabels(v []string) {
	o.PropagationLabels = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *IncidentField) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *IncidentField) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *IncidentField) SetRequired(v bool) {
	o.Required = &v
}

// GetRunScriptAfterUpdate returns the RunScriptAfterUpdate field value if set, zero value otherwise.
func (o *IncidentField) GetRunScriptAfterUpdate() bool {
	if o == nil || o.RunScriptAfterUpdate == nil {
		var ret bool
		return ret
	}
	return *o.RunScriptAfterUpdate
}

// GetRunScriptAfterUpdateOk returns a tuple with the RunScriptAfterUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetRunScriptAfterUpdateOk() (*bool, bool) {
	if o == nil || o.RunScriptAfterUpdate == nil {
		return nil, false
	}
	return o.RunScriptAfterUpdate, true
}

// HasRunScriptAfterUpdate returns a boolean if a field has been set.
func (o *IncidentField) HasRunScriptAfterUpdate() bool {
	if o != nil && o.RunScriptAfterUpdate != nil {
		return true
	}

	return false
}

// SetRunScriptAfterUpdate gets a reference to the given bool and assigns it to the RunScriptAfterUpdate field.
func (o *IncidentField) SetRunScriptAfterUpdate(v bool) {
	o.RunScriptAfterUpdate = &v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *IncidentField) GetScript() string {
	if o == nil || o.Script == nil {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetScriptOk() (*string, bool) {
	if o == nil || o.Script == nil {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *IncidentField) HasScript() bool {
	if o != nil && o.Script != nil {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *IncidentField) SetScript(v string) {
	o.Script = &v
}

// GetSelectValues returns the SelectValues field value if set, zero value otherwise.
func (o *IncidentField) GetSelectValues() []string {
	if o == nil || o.SelectValues == nil {
		var ret []string
		return ret
	}
	return *o.SelectValues
}

// GetSelectValuesOk returns a tuple with the SelectValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetSelectValuesOk() (*[]string, bool) {
	if o == nil || o.SelectValues == nil {
		return nil, false
	}
	return o.SelectValues, true
}

// HasSelectValues returns a boolean if a field has been set.
func (o *IncidentField) HasSelectValues() bool {
	if o != nil && o.SelectValues != nil {
		return true
	}

	return false
}

// SetSelectValues gets a reference to the given []string and assigns it to the SelectValues field.
func (o *IncidentField) SetSelectValues(v []string) {
	o.SelectValues = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *IncidentField) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *IncidentField) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *IncidentField) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetShouldCommit returns the ShouldCommit field value if set, zero value otherwise.
func (o *IncidentField) GetShouldCommit() bool {
	if o == nil || o.ShouldCommit == nil {
		var ret bool
		return ret
	}
	return *o.ShouldCommit
}

// GetShouldCommitOk returns a tuple with the ShouldCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetShouldCommitOk() (*bool, bool) {
	if o == nil || o.ShouldCommit == nil {
		return nil, false
	}
	return o.ShouldCommit, true
}

// HasShouldCommit returns a boolean if a field has been set.
func (o *IncidentField) HasShouldCommit() bool {
	if o != nil && o.ShouldCommit != nil {
		return true
	}

	return false
}

// SetShouldCommit gets a reference to the given bool and assigns it to the ShouldCommit field.
func (o *IncidentField) SetShouldCommit(v bool) {
	o.ShouldCommit = &v
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *IncidentField) GetSla() int64 {
	if o == nil || o.Sla == nil {
		var ret int64
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetSlaOk() (*int64, bool) {
	if o == nil || o.Sla == nil {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *IncidentField) HasSla() bool {
	if o != nil && o.Sla != nil {
		return true
	}

	return false
}

// SetSla gets a reference to the given int64 and assigns it to the Sla field.
func (o *IncidentField) SetSla(v int64) {
	o.Sla = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *IncidentField) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *IncidentField) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *IncidentField) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *IncidentField) GetSystem() bool {
	if o == nil || o.System == nil {
		var ret bool
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetSystemOk() (*bool, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *IncidentField) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given bool and assigns it to the System field.
func (o *IncidentField) SetSystem(v bool) {
	o.System = &v
}

// GetSystemAssociatedTypes returns the SystemAssociatedTypes field value if set, zero value otherwise.
func (o *IncidentField) GetSystemAssociatedTypes() []string {
	if o == nil || o.SystemAssociatedTypes == nil {
		var ret []string
		return ret
	}
	return *o.SystemAssociatedTypes
}

// GetSystemAssociatedTypesOk returns a tuple with the SystemAssociatedTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetSystemAssociatedTypesOk() (*[]string, bool) {
	if o == nil || o.SystemAssociatedTypes == nil {
		return nil, false
	}
	return o.SystemAssociatedTypes, true
}

// HasSystemAssociatedTypes returns a boolean if a field has been set.
func (o *IncidentField) HasSystemAssociatedTypes() bool {
	if o != nil && o.SystemAssociatedTypes != nil {
		return true
	}

	return false
}

// SetSystemAssociatedTypes gets a reference to the given []string and assigns it to the SystemAssociatedTypes field.
func (o *IncidentField) SetSystemAssociatedTypes(v []string) {
	o.SystemAssociatedTypes = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *IncidentField) GetThreshold() float64 {
	if o == nil || o.Threshold == nil {
		var ret float64
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetThresholdOk() (*float64, bool) {
	if o == nil || o.Threshold == nil {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *IncidentField) HasThreshold() bool {
	if o != nil && o.Threshold != nil {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float64 and assigns it to the Threshold field.
func (o *IncidentField) SetThreshold(v float64) {
	o.Threshold = &v
}

// GetToServerVersion returns the ToServerVersion field value if set, zero value otherwise.
func (o *IncidentField) GetToServerVersion() string {
	if o == nil || o.ToServerVersion == nil {
		var ret string
		return ret
	}
	return *o.ToServerVersion
}

// GetToServerVersionOk returns a tuple with the ToServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetToServerVersionOk() (*string, bool) {
	if o == nil || o.ToServerVersion == nil {
		return nil, false
	}
	return o.ToServerVersion, true
}

// HasToServerVersion returns a boolean if a field has been set.
func (o *IncidentField) HasToServerVersion() bool {
	if o != nil && o.ToServerVersion != nil {
		return true
	}

	return false
}

// SetToServerVersion gets a reference to the given string and assigns it to the ToServerVersion field.
func (o *IncidentField) SetToServerVersion(v string) {
	o.ToServerVersion = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IncidentField) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IncidentField) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IncidentField) SetType(v string) {
	o.Type = &v
}

// GetUnmapped returns the Unmapped field value if set, zero value otherwise.
func (o *IncidentField) GetUnmapped() bool {
	if o == nil || o.Unmapped == nil {
		var ret bool
		return ret
	}
	return *o.Unmapped
}

// GetUnmappedOk returns a tuple with the Unmapped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetUnmappedOk() (*bool, bool) {
	if o == nil || o.Unmapped == nil {
		return nil, false
	}
	return o.Unmapped, true
}

// HasUnmapped returns a boolean if a field has been set.
func (o *IncidentField) HasUnmapped() bool {
	if o != nil && o.Unmapped != nil {
		return true
	}

	return false
}

// SetUnmapped gets a reference to the given bool and assigns it to the Unmapped field.
func (o *IncidentField) SetUnmapped(v bool) {
	o.Unmapped = &v
}

// GetUnsearchable returns the Unsearchable field value if set, zero value otherwise.
func (o *IncidentField) GetUnsearchable() bool {
	if o == nil || o.Unsearchable == nil {
		var ret bool
		return ret
	}
	return *o.Unsearchable
}

// GetUnsearchableOk returns a tuple with the Unsearchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetUnsearchableOk() (*bool, bool) {
	if o == nil || o.Unsearchable == nil {
		return nil, false
	}
	return o.Unsearchable, true
}

// HasUnsearchable returns a boolean if a field has been set.
func (o *IncidentField) HasUnsearchable() bool {
	if o != nil && o.Unsearchable != nil {
		return true
	}

	return false
}

// SetUnsearchable gets a reference to the given bool and assigns it to the Unsearchable field.
func (o *IncidentField) SetUnsearchable(v bool) {
	o.Unsearchable = &v
}

// GetUseAsKpi returns the UseAsKpi field value if set, zero value otherwise.
func (o *IncidentField) GetUseAsKpi() bool {
	if o == nil || o.UseAsKpi == nil {
		var ret bool
		return ret
	}
	return *o.UseAsKpi
}

// GetUseAsKpiOk returns a tuple with the UseAsKpi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetUseAsKpiOk() (*bool, bool) {
	if o == nil || o.UseAsKpi == nil {
		return nil, false
	}
	return o.UseAsKpi, true
}

// HasUseAsKpi returns a boolean if a field has been set.
func (o *IncidentField) HasUseAsKpi() bool {
	if o != nil && o.UseAsKpi != nil {
		return true
	}

	return false
}

// SetUseAsKpi gets a reference to the given bool and assigns it to the UseAsKpi field.
func (o *IncidentField) SetUseAsKpi(v bool) {
	o.UseAsKpi = &v
}

// GetValidatedError returns the ValidatedError field value if set, zero value otherwise.
func (o *IncidentField) GetValidatedError() string {
	if o == nil || o.ValidatedError == nil {
		var ret string
		return ret
	}
	return *o.ValidatedError
}

// GetValidatedErrorOk returns a tuple with the ValidatedError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetValidatedErrorOk() (*string, bool) {
	if o == nil || o.ValidatedError == nil {
		return nil, false
	}
	return o.ValidatedError, true
}

// HasValidatedError returns a boolean if a field has been set.
func (o *IncidentField) HasValidatedError() bool {
	if o != nil && o.ValidatedError != nil {
		return true
	}

	return false
}

// SetValidatedError gets a reference to the given string and assigns it to the ValidatedError field.
func (o *IncidentField) SetValidatedError(v string) {
	o.ValidatedError = &v
}

// GetValidationRegex returns the ValidationRegex field value if set, zero value otherwise.
func (o *IncidentField) GetValidationRegex() string {
	if o == nil || o.ValidationRegex == nil {
		var ret string
		return ret
	}
	return *o.ValidationRegex
}

// GetValidationRegexOk returns a tuple with the ValidationRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetValidationRegexOk() (*string, bool) {
	if o == nil || o.ValidationRegex == nil {
		return nil, false
	}
	return o.ValidationRegex, true
}

// HasValidationRegex returns a boolean if a field has been set.
func (o *IncidentField) HasValidationRegex() bool {
	if o != nil && o.ValidationRegex != nil {
		return true
	}

	return false
}

// SetValidationRegex gets a reference to the given string and assigns it to the ValidationRegex field.
func (o *IncidentField) SetValidationRegex(v string) {
	o.ValidationRegex = &v
}

// GetVcShouldIgnore returns the VcShouldIgnore field value if set, zero value otherwise.
func (o *IncidentField) GetVcShouldIgnore() bool {
	if o == nil || o.VcShouldIgnore == nil {
		var ret bool
		return ret
	}
	return *o.VcShouldIgnore
}

// GetVcShouldIgnoreOk returns a tuple with the VcShouldIgnore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetVcShouldIgnoreOk() (*bool, bool) {
	if o == nil || o.VcShouldIgnore == nil {
		return nil, false
	}
	return o.VcShouldIgnore, true
}

// HasVcShouldIgnore returns a boolean if a field has been set.
func (o *IncidentField) HasVcShouldIgnore() bool {
	if o != nil && o.VcShouldIgnore != nil {
		return true
	}

	return false
}

// SetVcShouldIgnore gets a reference to the given bool and assigns it to the VcShouldIgnore field.
func (o *IncidentField) SetVcShouldIgnore(v bool) {
	o.VcShouldIgnore = &v
}

// GetVcShouldKeepItemLegacyProdMachine returns the VcShouldKeepItemLegacyProdMachine field value if set, zero value otherwise.
func (o *IncidentField) GetVcShouldKeepItemLegacyProdMachine() bool {
	if o == nil || o.VcShouldKeepItemLegacyProdMachine == nil {
		var ret bool
		return ret
	}
	return *o.VcShouldKeepItemLegacyProdMachine
}

// GetVcShouldKeepItemLegacyProdMachineOk returns a tuple with the VcShouldKeepItemLegacyProdMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetVcShouldKeepItemLegacyProdMachineOk() (*bool, bool) {
	if o == nil || o.VcShouldKeepItemLegacyProdMachine == nil {
		return nil, false
	}
	return o.VcShouldKeepItemLegacyProdMachine, true
}

// HasVcShouldKeepItemLegacyProdMachine returns a boolean if a field has been set.
func (o *IncidentField) HasVcShouldKeepItemLegacyProdMachine() bool {
	if o != nil && o.VcShouldKeepItemLegacyProdMachine != nil {
		return true
	}

	return false
}

// SetVcShouldKeepItemLegacyProdMachine gets a reference to the given bool and assigns it to the VcShouldKeepItemLegacyProdMachine field.
func (o *IncidentField) SetVcShouldKeepItemLegacyProdMachine(v bool) {
	o.VcShouldKeepItemLegacyProdMachine = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IncidentField) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentField) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IncidentField) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *IncidentField) SetVersion(v int64) {
	o.Version = &v
}

func (o IncidentField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssociatedToAll != nil {
		toSerialize["associatedToAll"] = o.AssociatedToAll
	}
	if o.AssociatedTypes != nil {
		toSerialize["associatedTypes"] = o.AssociatedTypes
	}
	if o.BreachScript != nil {
		toSerialize["breachScript"] = o.BreachScript
	}
	if o.CaseInsensitive != nil {
		toSerialize["caseInsensitive"] = o.CaseInsensitive
	}
	if o.CliName != nil {
		toSerialize["cliName"] = o.CliName
	}
	if o.CloseForm != nil {
		toSerialize["closeForm"] = o.CloseForm
	}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if o.CommitMessage != nil {
		toSerialize["commitMessage"] = o.CommitMessage
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.DefaultRows != nil {
		toSerialize["defaultRows"] = o.DefaultRows
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.EditForm != nil {
		toSerialize["editForm"] = o.EditForm
	}
	if o.FieldCalcScript != nil {
		toSerialize["fieldCalcScript"] = o.FieldCalcScript
	}
	if o.FromServerVersion != nil {
		toSerialize["fromServerVersion"] = o.FromServerVersion
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Hidden != nil {
		toSerialize["hidden"] = o.Hidden
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsReadOnly != nil {
		toSerialize["isReadOnly"] = o.IsReadOnly
	}
	if o.ItemVersion != nil {
		toSerialize["itemVersion"] = o.ItemVersion
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.MergeStrategy != nil {
		toSerialize["mergeStrategy"] = o.MergeStrategy
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NeverSetAsRequired != nil {
		toSerialize["neverSetAsRequired"] = o.NeverSetAsRequired
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.OwnerOnly != nil {
		toSerialize["ownerOnly"] = o.OwnerOnly
	}
	if o.PackID != nil {
		toSerialize["packID"] = o.PackID
	}
	if o.PackPropagationLabels != nil {
		toSerialize["packPropagationLabels"] = o.PackPropagationLabels
	}
	if o.Placeholder != nil {
		toSerialize["placeholder"] = o.Placeholder
	}
	if o.PrevName != nil {
		toSerialize["prevName"] = o.PrevName
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.PropagationLabels != nil {
		toSerialize["propagationLabels"] = o.PropagationLabels
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.RunScriptAfterUpdate != nil {
		toSerialize["runScriptAfterUpdate"] = o.RunScriptAfterUpdate
	}
	if o.Script != nil {
		toSerialize["script"] = o.Script
	}
	if o.SelectValues != nil {
		toSerialize["selectValues"] = o.SelectValues
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.ShouldCommit != nil {
		toSerialize["shouldCommit"] = o.ShouldCommit
	}
	if o.Sla != nil {
		toSerialize["sla"] = o.Sla
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	if o.SystemAssociatedTypes != nil {
		toSerialize["systemAssociatedTypes"] = o.SystemAssociatedTypes
	}
	if o.Threshold != nil {
		toSerialize["threshold"] = o.Threshold
	}
	if o.ToServerVersion != nil {
		toSerialize["toServerVersion"] = o.ToServerVersion
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Unmapped != nil {
		toSerialize["unmapped"] = o.Unmapped
	}
	if o.Unsearchable != nil {
		toSerialize["unsearchable"] = o.Unsearchable
	}
	if o.UseAsKpi != nil {
		toSerialize["useAsKpi"] = o.UseAsKpi
	}
	if o.ValidatedError != nil {
		toSerialize["validatedError"] = o.ValidatedError
	}
	if o.ValidationRegex != nil {
		toSerialize["validationRegex"] = o.ValidationRegex
	}
	if o.VcShouldIgnore != nil {
		toSerialize["vcShouldIgnore"] = o.VcShouldIgnore
	}
	if o.VcShouldKeepItemLegacyProdMachine != nil {
		toSerialize["vcShouldKeepItemLegacyProdMachine"] = o.VcShouldKeepItemLegacyProdMachine
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableIncidentField struct {
	value *IncidentField
	isSet bool
}

func (v NullableIncidentField) Get() *IncidentField {
	return v.value
}

func (v *NullableIncidentField) Set(val *IncidentField) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentField) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentField(val *IncidentField) *NullableIncidentField {
	return &NullableIncidentField{value: val, isSet: true}
}

func (v NullableIncidentField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
