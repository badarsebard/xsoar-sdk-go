/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// IncidentFilter struct for IncidentFilter
type IncidentFilter struct {
	// Cache of join functions
	Cache             *map[string][]string `json:"Cache,omitempty"`
	AndOp             *bool                `json:"andOp,omitempty"`
	Category          *[]string            `json:"category,omitempty"`
	Details           *string              `json:"details,omitempty"`
	Fields            *[]string            `json:"fields,omitempty"`
	Files             *[]string            `json:"files,omitempty"`
	FromActivatedDate *time.Time           `json:"fromActivatedDate,omitempty"`
	FromClosedDate    *time.Time           `json:"fromClosedDate,omitempty"`
	FromDate          *time.Time           `json:"fromDate,omitempty"`
	FromDateLicense   *time.Time           `json:"fromDateLicense,omitempty"`
	FromDueDate       *time.Time           `json:"fromDueDate,omitempty"`
	FromReminder      *time.Time           `json:"fromReminder,omitempty"`
	Id                *[]string            `json:"id,omitempty"`
	// Do not use workers mechanism while searching bleve
	IgnoreWorkers    *bool      `json:"ignoreWorkers,omitempty"`
	IncludeTmp       *bool      `json:"includeTmp,omitempty"`
	Investigation    *[]string  `json:"investigation,omitempty"`
	Level            *[]float64 `json:"level,omitempty"`
	Name             *[]string  `json:"name,omitempty"`
	NotCategory      *[]string  `json:"notCategory,omitempty"`
	NotInvestigation *[]string  `json:"notInvestigation,omitempty"`
	NotStatus        *[]float64 `json:"notStatus,omitempty"`
	// 0-based page
	Page   *int64    `json:"page,omitempty"`
	Parent *[]string `json:"parent,omitempty"`
	Period *Period   `json:"period,omitempty"`
	Query  *string   `json:"query,omitempty"`
	Reason *[]string `json:"reason,omitempty"`
	// Efficient next page, pass max sort value from previous page
	SearchAfter *[]string `json:"searchAfter,omitempty"`
	// Efficient next page, pass max ES sort value from previous page
	SearchAfterElastic *[]string `json:"searchAfterElastic,omitempty"`
	// Efficient prev page, pass min sort value from next page
	SearchBefore *[]string `json:"searchBefore,omitempty"`
	// Efficient prev page, pass min ES sort value from next page
	SearchBeforeElastic *[]string `json:"searchBeforeElastic,omitempty"`
	// Size is limited to 1000, if not passed it defaults to 0, and no results will return
	Size *int64 `json:"size,omitempty"`
	// The sort order
	Sort    *[]Order   `json:"sort,omitempty"`
	Status  *[]float64 `json:"status,omitempty"`
	Systems *[]string  `json:"systems,omitempty"`
	// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
	TimeFrame       *int64     `json:"timeFrame,omitempty"`
	ToActivatedDate *time.Time `json:"toActivatedDate,omitempty"`
	ToClosedDate    *time.Time `json:"toClosedDate,omitempty"`
	ToDate          *time.Time `json:"toDate,omitempty"`
	ToDueDate       *time.Time `json:"toDueDate,omitempty"`
	ToReminder      *time.Time `json:"toReminder,omitempty"`
	TotalOnly       *bool      `json:"totalOnly,omitempty"`
	Type            *[]string  `json:"type,omitempty"`
	Urls            *[]string  `json:"urls,omitempty"`
	Users           *[]string  `json:"users,omitempty"`
}

// NewIncidentFilter instantiates a new IncidentFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentFilter() *IncidentFilter {
	this := IncidentFilter{}
	return &this
}

// NewIncidentFilterWithDefaults instantiates a new IncidentFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentFilterWithDefaults() *IncidentFilter {
	this := IncidentFilter{}
	return &this
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *IncidentFilter) GetCache() map[string][]string {
	if o == nil || o.Cache == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetCacheOk() (*map[string][]string, bool) {
	if o == nil || o.Cache == nil {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *IncidentFilter) HasCache() bool {
	if o != nil && o.Cache != nil {
		return true
	}

	return false
}

// SetCache gets a reference to the given map[string][]string and assigns it to the Cache field.
func (o *IncidentFilter) SetCache(v map[string][]string) {
	o.Cache = &v
}

// GetAndOp returns the AndOp field value if set, zero value otherwise.
func (o *IncidentFilter) GetAndOp() bool {
	if o == nil || o.AndOp == nil {
		var ret bool
		return ret
	}
	return *o.AndOp
}

// GetAndOpOk returns a tuple with the AndOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetAndOpOk() (*bool, bool) {
	if o == nil || o.AndOp == nil {
		return nil, false
	}
	return o.AndOp, true
}

// HasAndOp returns a boolean if a field has been set.
func (o *IncidentFilter) HasAndOp() bool {
	if o != nil && o.AndOp != nil {
		return true
	}

	return false
}

// SetAndOp gets a reference to the given bool and assigns it to the AndOp field.
func (o *IncidentFilter) SetAndOp(v bool) {
	o.AndOp = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *IncidentFilter) GetCategory() []string {
	if o == nil || o.Category == nil {
		var ret []string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetCategoryOk() (*[]string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *IncidentFilter) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []string and assigns it to the Category field.
func (o *IncidentFilter) SetCategory(v []string) {
	o.Category = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *IncidentFilter) GetDetails() string {
	if o == nil || o.Details == nil {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetDetailsOk() (*string, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *IncidentFilter) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *IncidentFilter) SetDetails(v string) {
	o.Details = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *IncidentFilter) GetFields() []string {
	if o == nil || o.Fields == nil {
		var ret []string
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetFieldsOk() (*[]string, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *IncidentFilter) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []string and assigns it to the Fields field.
func (o *IncidentFilter) SetFields(v []string) {
	o.Fields = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *IncidentFilter) GetFiles() []string {
	if o == nil || o.Files == nil {
		var ret []string
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetFilesOk() (*[]string, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *IncidentFilter) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []string and assigns it to the Files field.
func (o *IncidentFilter) SetFiles(v []string) {
	o.Files = &v
}

// GetFromActivatedDate returns the FromActivatedDate field value if set, zero value otherwise.
func (o *IncidentFilter) GetFromActivatedDate() time.Time {
	if o == nil || o.FromActivatedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FromActivatedDate
}

// GetFromActivatedDateOk returns a tuple with the FromActivatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetFromActivatedDateOk() (*time.Time, bool) {
	if o == nil || o.FromActivatedDate == nil {
		return nil, false
	}
	return o.FromActivatedDate, true
}

// HasFromActivatedDate returns a boolean if a field has been set.
func (o *IncidentFilter) HasFromActivatedDate() bool {
	if o != nil && o.FromActivatedDate != nil {
		return true
	}

	return false
}

// SetFromActivatedDate gets a reference to the given time.Time and assigns it to the FromActivatedDate field.
func (o *IncidentFilter) SetFromActivatedDate(v time.Time) {
	o.FromActivatedDate = &v
}

// GetFromClosedDate returns the FromClosedDate field value if set, zero value otherwise.
func (o *IncidentFilter) GetFromClosedDate() time.Time {
	if o == nil || o.FromClosedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FromClosedDate
}

// GetFromClosedDateOk returns a tuple with the FromClosedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetFromClosedDateOk() (*time.Time, bool) {
	if o == nil || o.FromClosedDate == nil {
		return nil, false
	}
	return o.FromClosedDate, true
}

// HasFromClosedDate returns a boolean if a field has been set.
func (o *IncidentFilter) HasFromClosedDate() bool {
	if o != nil && o.FromClosedDate != nil {
		return true
	}

	return false
}

// SetFromClosedDate gets a reference to the given time.Time and assigns it to the FromClosedDate field.
func (o *IncidentFilter) SetFromClosedDate(v time.Time) {
	o.FromClosedDate = &v
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *IncidentFilter) GetFromDate() time.Time {
	if o == nil || o.FromDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetFromDateOk() (*time.Time, bool) {
	if o == nil || o.FromDate == nil {
		return nil, false
	}
	return o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *IncidentFilter) HasFromDate() bool {
	if o != nil && o.FromDate != nil {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given time.Time and assigns it to the FromDate field.
func (o *IncidentFilter) SetFromDate(v time.Time) {
	o.FromDate = &v
}

// GetFromDateLicense returns the FromDateLicense field value if set, zero value otherwise.
func (o *IncidentFilter) GetFromDateLicense() time.Time {
	if o == nil || o.FromDateLicense == nil {
		var ret time.Time
		return ret
	}
	return *o.FromDateLicense
}

// GetFromDateLicenseOk returns a tuple with the FromDateLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetFromDateLicenseOk() (*time.Time, bool) {
	if o == nil || o.FromDateLicense == nil {
		return nil, false
	}
	return o.FromDateLicense, true
}

// HasFromDateLicense returns a boolean if a field has been set.
func (o *IncidentFilter) HasFromDateLicense() bool {
	if o != nil && o.FromDateLicense != nil {
		return true
	}

	return false
}

// SetFromDateLicense gets a reference to the given time.Time and assigns it to the FromDateLicense field.
func (o *IncidentFilter) SetFromDateLicense(v time.Time) {
	o.FromDateLicense = &v
}

// GetFromDueDate returns the FromDueDate field value if set, zero value otherwise.
func (o *IncidentFilter) GetFromDueDate() time.Time {
	if o == nil || o.FromDueDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FromDueDate
}

// GetFromDueDateOk returns a tuple with the FromDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetFromDueDateOk() (*time.Time, bool) {
	if o == nil || o.FromDueDate == nil {
		return nil, false
	}
	return o.FromDueDate, true
}

// HasFromDueDate returns a boolean if a field has been set.
func (o *IncidentFilter) HasFromDueDate() bool {
	if o != nil && o.FromDueDate != nil {
		return true
	}

	return false
}

// SetFromDueDate gets a reference to the given time.Time and assigns it to the FromDueDate field.
func (o *IncidentFilter) SetFromDueDate(v time.Time) {
	o.FromDueDate = &v
}

// GetFromReminder returns the FromReminder field value if set, zero value otherwise.
func (o *IncidentFilter) GetFromReminder() time.Time {
	if o == nil || o.FromReminder == nil {
		var ret time.Time
		return ret
	}
	return *o.FromReminder
}

// GetFromReminderOk returns a tuple with the FromReminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetFromReminderOk() (*time.Time, bool) {
	if o == nil || o.FromReminder == nil {
		return nil, false
	}
	return o.FromReminder, true
}

// HasFromReminder returns a boolean if a field has been set.
func (o *IncidentFilter) HasFromReminder() bool {
	if o != nil && o.FromReminder != nil {
		return true
	}

	return false
}

// SetFromReminder gets a reference to the given time.Time and assigns it to the FromReminder field.
func (o *IncidentFilter) SetFromReminder(v time.Time) {
	o.FromReminder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IncidentFilter) GetId() []string {
	if o == nil || o.Id == nil {
		var ret []string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetIdOk() (*[]string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IncidentFilter) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given []string and assigns it to the Id field.
func (o *IncidentFilter) SetId(v []string) {
	o.Id = &v
}

// GetIgnoreWorkers returns the IgnoreWorkers field value if set, zero value otherwise.
func (o *IncidentFilter) GetIgnoreWorkers() bool {
	if o == nil || o.IgnoreWorkers == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreWorkers
}

// GetIgnoreWorkersOk returns a tuple with the IgnoreWorkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetIgnoreWorkersOk() (*bool, bool) {
	if o == nil || o.IgnoreWorkers == nil {
		return nil, false
	}
	return o.IgnoreWorkers, true
}

// HasIgnoreWorkers returns a boolean if a field has been set.
func (o *IncidentFilter) HasIgnoreWorkers() bool {
	if o != nil && o.IgnoreWorkers != nil {
		return true
	}

	return false
}

// SetIgnoreWorkers gets a reference to the given bool and assigns it to the IgnoreWorkers field.
func (o *IncidentFilter) SetIgnoreWorkers(v bool) {
	o.IgnoreWorkers = &v
}

// GetIncludeTmp returns the IncludeTmp field value if set, zero value otherwise.
func (o *IncidentFilter) GetIncludeTmp() bool {
	if o == nil || o.IncludeTmp == nil {
		var ret bool
		return ret
	}
	return *o.IncludeTmp
}

// GetIncludeTmpOk returns a tuple with the IncludeTmp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetIncludeTmpOk() (*bool, bool) {
	if o == nil || o.IncludeTmp == nil {
		return nil, false
	}
	return o.IncludeTmp, true
}

// HasIncludeTmp returns a boolean if a field has been set.
func (o *IncidentFilter) HasIncludeTmp() bool {
	if o != nil && o.IncludeTmp != nil {
		return true
	}

	return false
}

// SetIncludeTmp gets a reference to the given bool and assigns it to the IncludeTmp field.
func (o *IncidentFilter) SetIncludeTmp(v bool) {
	o.IncludeTmp = &v
}

// GetInvestigation returns the Investigation field value if set, zero value otherwise.
func (o *IncidentFilter) GetInvestigation() []string {
	if o == nil || o.Investigation == nil {
		var ret []string
		return ret
	}
	return *o.Investigation
}

// GetInvestigationOk returns a tuple with the Investigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetInvestigationOk() (*[]string, bool) {
	if o == nil || o.Investigation == nil {
		return nil, false
	}
	return o.Investigation, true
}

// HasInvestigation returns a boolean if a field has been set.
func (o *IncidentFilter) HasInvestigation() bool {
	if o != nil && o.Investigation != nil {
		return true
	}

	return false
}

// SetInvestigation gets a reference to the given []string and assigns it to the Investigation field.
func (o *IncidentFilter) SetInvestigation(v []string) {
	o.Investigation = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *IncidentFilter) GetLevel() []float64 {
	if o == nil || o.Level == nil {
		var ret []float64
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetLevelOk() (*[]float64, bool) {
	if o == nil || o.Level == nil {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *IncidentFilter) HasLevel() bool {
	if o != nil && o.Level != nil {
		return true
	}

	return false
}

// SetLevel gets a reference to the given []float64 and assigns it to the Level field.
func (o *IncidentFilter) SetLevel(v []float64) {
	o.Level = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IncidentFilter) GetName() []string {
	if o == nil || o.Name == nil {
		var ret []string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetNameOk() (*[]string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IncidentFilter) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given []string and assigns it to the Name field.
func (o *IncidentFilter) SetName(v []string) {
	o.Name = &v
}

// GetNotCategory returns the NotCategory field value if set, zero value otherwise.
func (o *IncidentFilter) GetNotCategory() []string {
	if o == nil || o.NotCategory == nil {
		var ret []string
		return ret
	}
	return *o.NotCategory
}

// GetNotCategoryOk returns a tuple with the NotCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetNotCategoryOk() (*[]string, bool) {
	if o == nil || o.NotCategory == nil {
		return nil, false
	}
	return o.NotCategory, true
}

// HasNotCategory returns a boolean if a field has been set.
func (o *IncidentFilter) HasNotCategory() bool {
	if o != nil && o.NotCategory != nil {
		return true
	}

	return false
}

// SetNotCategory gets a reference to the given []string and assigns it to the NotCategory field.
func (o *IncidentFilter) SetNotCategory(v []string) {
	o.NotCategory = &v
}

// GetNotInvestigation returns the NotInvestigation field value if set, zero value otherwise.
func (o *IncidentFilter) GetNotInvestigation() []string {
	if o == nil || o.NotInvestigation == nil {
		var ret []string
		return ret
	}
	return *o.NotInvestigation
}

// GetNotInvestigationOk returns a tuple with the NotInvestigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetNotInvestigationOk() (*[]string, bool) {
	if o == nil || o.NotInvestigation == nil {
		return nil, false
	}
	return o.NotInvestigation, true
}

// HasNotInvestigation returns a boolean if a field has been set.
func (o *IncidentFilter) HasNotInvestigation() bool {
	if o != nil && o.NotInvestigation != nil {
		return true
	}

	return false
}

// SetNotInvestigation gets a reference to the given []string and assigns it to the NotInvestigation field.
func (o *IncidentFilter) SetNotInvestigation(v []string) {
	o.NotInvestigation = &v
}

// GetNotStatus returns the NotStatus field value if set, zero value otherwise.
func (o *IncidentFilter) GetNotStatus() []float64 {
	if o == nil || o.NotStatus == nil {
		var ret []float64
		return ret
	}
	return *o.NotStatus
}

// GetNotStatusOk returns a tuple with the NotStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetNotStatusOk() (*[]float64, bool) {
	if o == nil || o.NotStatus == nil {
		return nil, false
	}
	return o.NotStatus, true
}

// HasNotStatus returns a boolean if a field has been set.
func (o *IncidentFilter) HasNotStatus() bool {
	if o != nil && o.NotStatus != nil {
		return true
	}

	return false
}

// SetNotStatus gets a reference to the given []float64 and assigns it to the NotStatus field.
func (o *IncidentFilter) SetNotStatus(v []float64) {
	o.NotStatus = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *IncidentFilter) GetPage() int64 {
	if o == nil || o.Page == nil {
		var ret int64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetPageOk() (*int64, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *IncidentFilter) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int64 and assigns it to the Page field.
func (o *IncidentFilter) SetPage(v int64) {
	o.Page = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *IncidentFilter) GetParent() []string {
	if o == nil || o.Parent == nil {
		var ret []string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetParentOk() (*[]string, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *IncidentFilter) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given []string and assigns it to the Parent field.
func (o *IncidentFilter) SetParent(v []string) {
	o.Parent = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *IncidentFilter) GetPeriod() Period {
	if o == nil || o.Period == nil {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetPeriodOk() (*Period, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *IncidentFilter) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *IncidentFilter) SetPeriod(v Period) {
	o.Period = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *IncidentFilter) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *IncidentFilter) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *IncidentFilter) SetQuery(v string) {
	o.Query = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *IncidentFilter) GetReason() []string {
	if o == nil || o.Reason == nil {
		var ret []string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetReasonOk() (*[]string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *IncidentFilter) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given []string and assigns it to the Reason field.
func (o *IncidentFilter) SetReason(v []string) {
	o.Reason = &v
}

// GetSearchAfter returns the SearchAfter field value if set, zero value otherwise.
func (o *IncidentFilter) GetSearchAfter() []string {
	if o == nil || o.SearchAfter == nil {
		var ret []string
		return ret
	}
	return *o.SearchAfter
}

// GetSearchAfterOk returns a tuple with the SearchAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetSearchAfterOk() (*[]string, bool) {
	if o == nil || o.SearchAfter == nil {
		return nil, false
	}
	return o.SearchAfter, true
}

// HasSearchAfter returns a boolean if a field has been set.
func (o *IncidentFilter) HasSearchAfter() bool {
	if o != nil && o.SearchAfter != nil {
		return true
	}

	return false
}

// SetSearchAfter gets a reference to the given []string and assigns it to the SearchAfter field.
func (o *IncidentFilter) SetSearchAfter(v []string) {
	o.SearchAfter = &v
}

// GetSearchAfterElastic returns the SearchAfterElastic field value if set, zero value otherwise.
func (o *IncidentFilter) GetSearchAfterElastic() []string {
	if o == nil || o.SearchAfterElastic == nil {
		var ret []string
		return ret
	}
	return *o.SearchAfterElastic
}

// GetSearchAfterElasticOk returns a tuple with the SearchAfterElastic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetSearchAfterElasticOk() (*[]string, bool) {
	if o == nil || o.SearchAfterElastic == nil {
		return nil, false
	}
	return o.SearchAfterElastic, true
}

// HasSearchAfterElastic returns a boolean if a field has been set.
func (o *IncidentFilter) HasSearchAfterElastic() bool {
	if o != nil && o.SearchAfterElastic != nil {
		return true
	}

	return false
}

// SetSearchAfterElastic gets a reference to the given []string and assigns it to the SearchAfterElastic field.
func (o *IncidentFilter) SetSearchAfterElastic(v []string) {
	o.SearchAfterElastic = &v
}

// GetSearchBefore returns the SearchBefore field value if set, zero value otherwise.
func (o *IncidentFilter) GetSearchBefore() []string {
	if o == nil || o.SearchBefore == nil {
		var ret []string
		return ret
	}
	return *o.SearchBefore
}

// GetSearchBeforeOk returns a tuple with the SearchBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetSearchBeforeOk() (*[]string, bool) {
	if o == nil || o.SearchBefore == nil {
		return nil, false
	}
	return o.SearchBefore, true
}

// HasSearchBefore returns a boolean if a field has been set.
func (o *IncidentFilter) HasSearchBefore() bool {
	if o != nil && o.SearchBefore != nil {
		return true
	}

	return false
}

// SetSearchBefore gets a reference to the given []string and assigns it to the SearchBefore field.
func (o *IncidentFilter) SetSearchBefore(v []string) {
	o.SearchBefore = &v
}

// GetSearchBeforeElastic returns the SearchBeforeElastic field value if set, zero value otherwise.
func (o *IncidentFilter) GetSearchBeforeElastic() []string {
	if o == nil || o.SearchBeforeElastic == nil {
		var ret []string
		return ret
	}
	return *o.SearchBeforeElastic
}

// GetSearchBeforeElasticOk returns a tuple with the SearchBeforeElastic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetSearchBeforeElasticOk() (*[]string, bool) {
	if o == nil || o.SearchBeforeElastic == nil {
		return nil, false
	}
	return o.SearchBeforeElastic, true
}

// HasSearchBeforeElastic returns a boolean if a field has been set.
func (o *IncidentFilter) HasSearchBeforeElastic() bool {
	if o != nil && o.SearchBeforeElastic != nil {
		return true
	}

	return false
}

// SetSearchBeforeElastic gets a reference to the given []string and assigns it to the SearchBeforeElastic field.
func (o *IncidentFilter) SetSearchBeforeElastic(v []string) {
	o.SearchBeforeElastic = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *IncidentFilter) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *IncidentFilter) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *IncidentFilter) SetSize(v int64) {
	o.Size = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *IncidentFilter) GetSort() []Order {
	if o == nil || o.Sort == nil {
		var ret []Order
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetSortOk() (*[]Order, bool) {
	if o == nil || o.Sort == nil {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *IncidentFilter) HasSort() bool {
	if o != nil && o.Sort != nil {
		return true
	}

	return false
}

// SetSort gets a reference to the given []Order and assigns it to the Sort field.
func (o *IncidentFilter) SetSort(v []Order) {
	o.Sort = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IncidentFilter) GetStatus() []float64 {
	if o == nil || o.Status == nil {
		var ret []float64
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetStatusOk() (*[]float64, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IncidentFilter) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []float64 and assigns it to the Status field.
func (o *IncidentFilter) SetStatus(v []float64) {
	o.Status = &v
}

// GetSystems returns the Systems field value if set, zero value otherwise.
func (o *IncidentFilter) GetSystems() []string {
	if o == nil || o.Systems == nil {
		var ret []string
		return ret
	}
	return *o.Systems
}

// GetSystemsOk returns a tuple with the Systems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetSystemsOk() (*[]string, bool) {
	if o == nil || o.Systems == nil {
		return nil, false
	}
	return o.Systems, true
}

// HasSystems returns a boolean if a field has been set.
func (o *IncidentFilter) HasSystems() bool {
	if o != nil && o.Systems != nil {
		return true
	}

	return false
}

// SetSystems gets a reference to the given []string and assigns it to the Systems field.
func (o *IncidentFilter) SetSystems(v []string) {
	o.Systems = &v
}

// GetTimeFrame returns the TimeFrame field value if set, zero value otherwise.
func (o *IncidentFilter) GetTimeFrame() int64 {
	if o == nil || o.TimeFrame == nil {
		var ret int64
		return ret
	}
	return *o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetTimeFrameOk() (*int64, bool) {
	if o == nil || o.TimeFrame == nil {
		return nil, false
	}
	return o.TimeFrame, true
}

// HasTimeFrame returns a boolean if a field has been set.
func (o *IncidentFilter) HasTimeFrame() bool {
	if o != nil && o.TimeFrame != nil {
		return true
	}

	return false
}

// SetTimeFrame gets a reference to the given int64 and assigns it to the TimeFrame field.
func (o *IncidentFilter) SetTimeFrame(v int64) {
	o.TimeFrame = &v
}

// GetToActivatedDate returns the ToActivatedDate field value if set, zero value otherwise.
func (o *IncidentFilter) GetToActivatedDate() time.Time {
	if o == nil || o.ToActivatedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ToActivatedDate
}

// GetToActivatedDateOk returns a tuple with the ToActivatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetToActivatedDateOk() (*time.Time, bool) {
	if o == nil || o.ToActivatedDate == nil {
		return nil, false
	}
	return o.ToActivatedDate, true
}

// HasToActivatedDate returns a boolean if a field has been set.
func (o *IncidentFilter) HasToActivatedDate() bool {
	if o != nil && o.ToActivatedDate != nil {
		return true
	}

	return false
}

// SetToActivatedDate gets a reference to the given time.Time and assigns it to the ToActivatedDate field.
func (o *IncidentFilter) SetToActivatedDate(v time.Time) {
	o.ToActivatedDate = &v
}

// GetToClosedDate returns the ToClosedDate field value if set, zero value otherwise.
func (o *IncidentFilter) GetToClosedDate() time.Time {
	if o == nil || o.ToClosedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ToClosedDate
}

// GetToClosedDateOk returns a tuple with the ToClosedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetToClosedDateOk() (*time.Time, bool) {
	if o == nil || o.ToClosedDate == nil {
		return nil, false
	}
	return o.ToClosedDate, true
}

// HasToClosedDate returns a boolean if a field has been set.
func (o *IncidentFilter) HasToClosedDate() bool {
	if o != nil && o.ToClosedDate != nil {
		return true
	}

	return false
}

// SetToClosedDate gets a reference to the given time.Time and assigns it to the ToClosedDate field.
func (o *IncidentFilter) SetToClosedDate(v time.Time) {
	o.ToClosedDate = &v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *IncidentFilter) GetToDate() time.Time {
	if o == nil || o.ToDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetToDateOk() (*time.Time, bool) {
	if o == nil || o.ToDate == nil {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *IncidentFilter) HasToDate() bool {
	if o != nil && o.ToDate != nil {
		return true
	}

	return false
}

// SetToDate gets a reference to the given time.Time and assigns it to the ToDate field.
func (o *IncidentFilter) SetToDate(v time.Time) {
	o.ToDate = &v
}

// GetToDueDate returns the ToDueDate field value if set, zero value otherwise.
func (o *IncidentFilter) GetToDueDate() time.Time {
	if o == nil || o.ToDueDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ToDueDate
}

// GetToDueDateOk returns a tuple with the ToDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetToDueDateOk() (*time.Time, bool) {
	if o == nil || o.ToDueDate == nil {
		return nil, false
	}
	return o.ToDueDate, true
}

// HasToDueDate returns a boolean if a field has been set.
func (o *IncidentFilter) HasToDueDate() bool {
	if o != nil && o.ToDueDate != nil {
		return true
	}

	return false
}

// SetToDueDate gets a reference to the given time.Time and assigns it to the ToDueDate field.
func (o *IncidentFilter) SetToDueDate(v time.Time) {
	o.ToDueDate = &v
}

// GetToReminder returns the ToReminder field value if set, zero value otherwise.
func (o *IncidentFilter) GetToReminder() time.Time {
	if o == nil || o.ToReminder == nil {
		var ret time.Time
		return ret
	}
	return *o.ToReminder
}

// GetToReminderOk returns a tuple with the ToReminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetToReminderOk() (*time.Time, bool) {
	if o == nil || o.ToReminder == nil {
		return nil, false
	}
	return o.ToReminder, true
}

// HasToReminder returns a boolean if a field has been set.
func (o *IncidentFilter) HasToReminder() bool {
	if o != nil && o.ToReminder != nil {
		return true
	}

	return false
}

// SetToReminder gets a reference to the given time.Time and assigns it to the ToReminder field.
func (o *IncidentFilter) SetToReminder(v time.Time) {
	o.ToReminder = &v
}

// GetTotalOnly returns the TotalOnly field value if set, zero value otherwise.
func (o *IncidentFilter) GetTotalOnly() bool {
	if o == nil || o.TotalOnly == nil {
		var ret bool
		return ret
	}
	return *o.TotalOnly
}

// GetTotalOnlyOk returns a tuple with the TotalOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetTotalOnlyOk() (*bool, bool) {
	if o == nil || o.TotalOnly == nil {
		return nil, false
	}
	return o.TotalOnly, true
}

// HasTotalOnly returns a boolean if a field has been set.
func (o *IncidentFilter) HasTotalOnly() bool {
	if o != nil && o.TotalOnly != nil {
		return true
	}

	return false
}

// SetTotalOnly gets a reference to the given bool and assigns it to the TotalOnly field.
func (o *IncidentFilter) SetTotalOnly(v bool) {
	o.TotalOnly = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IncidentFilter) GetType() []string {
	if o == nil || o.Type == nil {
		var ret []string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetTypeOk() (*[]string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IncidentFilter) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given []string and assigns it to the Type field.
func (o *IncidentFilter) SetType(v []string) {
	o.Type = &v
}

// GetUrls returns the Urls field value if set, zero value otherwise.
func (o *IncidentFilter) GetUrls() []string {
	if o == nil || o.Urls == nil {
		var ret []string
		return ret
	}
	return *o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetUrlsOk() (*[]string, bool) {
	if o == nil || o.Urls == nil {
		return nil, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *IncidentFilter) HasUrls() bool {
	if o != nil && o.Urls != nil {
		return true
	}

	return false
}

// SetUrls gets a reference to the given []string and assigns it to the Urls field.
func (o *IncidentFilter) SetUrls(v []string) {
	o.Urls = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *IncidentFilter) GetUsers() []string {
	if o == nil || o.Users == nil {
		var ret []string
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFilter) GetUsersOk() (*[]string, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *IncidentFilter) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []string and assigns it to the Users field.
func (o *IncidentFilter) SetUsers(v []string) {
	o.Users = &v
}

func (o IncidentFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cache != nil {
		toSerialize["Cache"] = o.Cache
	}
	if o.AndOp != nil {
		toSerialize["andOp"] = o.AndOp
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.FromActivatedDate != nil {
		toSerialize["fromActivatedDate"] = o.FromActivatedDate
	}
	if o.FromClosedDate != nil {
		toSerialize["fromClosedDate"] = o.FromClosedDate
	}
	if o.FromDate != nil {
		toSerialize["fromDate"] = o.FromDate
	}
	if o.FromDateLicense != nil {
		toSerialize["fromDateLicense"] = o.FromDateLicense
	}
	if o.FromDueDate != nil {
		toSerialize["fromDueDate"] = o.FromDueDate
	}
	if o.FromReminder != nil {
		toSerialize["fromReminder"] = o.FromReminder
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IgnoreWorkers != nil {
		toSerialize["ignoreWorkers"] = o.IgnoreWorkers
	}
	if o.IncludeTmp != nil {
		toSerialize["includeTmp"] = o.IncludeTmp
	}
	if o.Investigation != nil {
		toSerialize["investigation"] = o.Investigation
	}
	if o.Level != nil {
		toSerialize["level"] = o.Level
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NotCategory != nil {
		toSerialize["notCategory"] = o.NotCategory
	}
	if o.NotInvestigation != nil {
		toSerialize["notInvestigation"] = o.NotInvestigation
	}
	if o.NotStatus != nil {
		toSerialize["notStatus"] = o.NotStatus
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.SearchAfter != nil {
		toSerialize["searchAfter"] = o.SearchAfter
	}
	if o.SearchAfterElastic != nil {
		toSerialize["searchAfterElastic"] = o.SearchAfterElastic
	}
	if o.SearchBefore != nil {
		toSerialize["searchBefore"] = o.SearchBefore
	}
	if o.SearchBeforeElastic != nil {
		toSerialize["searchBeforeElastic"] = o.SearchBeforeElastic
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Systems != nil {
		toSerialize["systems"] = o.Systems
	}
	if o.TimeFrame != nil {
		toSerialize["timeFrame"] = o.TimeFrame
	}
	if o.ToActivatedDate != nil {
		toSerialize["toActivatedDate"] = o.ToActivatedDate
	}
	if o.ToClosedDate != nil {
		toSerialize["toClosedDate"] = o.ToClosedDate
	}
	if o.ToDate != nil {
		toSerialize["toDate"] = o.ToDate
	}
	if o.ToDueDate != nil {
		toSerialize["toDueDate"] = o.ToDueDate
	}
	if o.ToReminder != nil {
		toSerialize["toReminder"] = o.ToReminder
	}
	if o.TotalOnly != nil {
		toSerialize["totalOnly"] = o.TotalOnly
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Urls != nil {
		toSerialize["urls"] = o.Urls
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableIncidentFilter struct {
	value *IncidentFilter
	isSet bool
}

func (v NullableIncidentFilter) Get() *IncidentFilter {
	return v.value
}

func (v *NullableIncidentFilter) Set(val *IncidentFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentFilter(val *IncidentFilter) *NullableIncidentFilter {
	return &NullableIncidentFilter{value: val, isSet: true}
}

func (v NullableIncidentFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
