/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// IncidentType struct for IncidentType
type IncidentType struct {
	Autorun                           *bool                        `json:"autorun,omitempty"`
	ClosureScript                     *string                      `json:"closureScript,omitempty"`
	Color                             *string                      `json:"color,omitempty"`
	CommitMessage                     *string                      `json:"commitMessage,omitempty"`
	Days                              *int64                       `json:"days,omitempty"`
	DaysR                             *int64                       `json:"daysR,omitempty"`
	Default                           *bool                        `json:"default,omitempty"`
	Detached                          *bool                        `json:"detached,omitempty"`
	Disabled                          *bool                        `json:"disabled,omitempty"`
	ExtractSettings                   *IncidentTypeExtractSettings `json:"extractSettings,omitempty"`
	FromServerVersion                 *Version                     `json:"fromServerVersion,omitempty"`
	Highlight                         *map[string][]string         `json:"highlight,omitempty"`
	Hours                             *int64                       `json:"hours,omitempty"`
	HoursR                            *int64                       `json:"hoursR,omitempty"`
	Id                                *string                      `json:"id,omitempty"`
	ItemVersion                       *Version                     `json:"itemVersion,omitempty"`
	Layout                            *string                      `json:"layout,omitempty"`
	Locked                            *bool                        `json:"locked,omitempty"`
	Modified                          *time.Time                   `json:"modified,omitempty"`
	Name                              *string                      `json:"name,omitempty"`
	NumericId                         *int64                       `json:"numericId,omitempty"`
	OnChangeRepAlg                    *float64                     `json:"onChangeRepAlg,omitempty"`
	PackID                            *string                      `json:"packID,omitempty"`
	PackPropagationLabels             *[]string                    `json:"packPropagationLabels,omitempty"`
	PlaybookId                        *string                      `json:"playbookId,omitempty"`
	PreProcessingScript               *string                      `json:"preProcessingScript,omitempty"`
	PrevName                          *string                      `json:"prevName,omitempty"`
	PrimaryTerm                       *int64                       `json:"primaryTerm,omitempty"`
	PropagationLabels                 *[]string                    `json:"propagationLabels,omitempty"`
	Readonly                          *bool                        `json:"readonly,omitempty"`
	ReputationCalc                    *float64                     `json:"reputationCalc,omitempty"`
	SequenceNumber                    *int64                       `json:"sequenceNumber,omitempty"`
	ShouldCommit                      *bool                        `json:"shouldCommit,omitempty"`
	Sla                               *int64                       `json:"sla,omitempty"`
	SlaReminder                       *int64                       `json:"slaReminder,omitempty"`
	SortValues                        *[]string                    `json:"sortValues,omitempty"`
	System                            *bool                        `json:"system,omitempty"`
	ToServerVersion                   *Version                     `json:"toServerVersion,omitempty"`
	VcShouldIgnore                    *bool                        `json:"vcShouldIgnore,omitempty"`
	VcShouldKeepItemLegacyProdMachine *bool                        `json:"vcShouldKeepItemLegacyProdMachine,omitempty"`
	Version                           *int64                       `json:"version,omitempty"`
	Weeks                             *int64                       `json:"weeks,omitempty"`
	WeeksR                            *int64                       `json:"weeksR,omitempty"`
}

// NewIncidentType instantiates a new IncidentType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentType() *IncidentType {
	this := IncidentType{}
	return &this
}

// NewIncidentTypeWithDefaults instantiates a new IncidentType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentTypeWithDefaults() *IncidentType {
	this := IncidentType{}
	return &this
}

// GetAutorun returns the Autorun field value if set, zero value otherwise.
func (o *IncidentType) GetAutorun() bool {
	if o == nil || o.Autorun == nil {
		var ret bool
		return ret
	}
	return *o.Autorun
}

// GetAutorunOk returns a tuple with the Autorun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetAutorunOk() (*bool, bool) {
	if o == nil || o.Autorun == nil {
		return nil, false
	}
	return o.Autorun, true
}

// HasAutorun returns a boolean if a field has been set.
func (o *IncidentType) HasAutorun() bool {
	if o != nil && o.Autorun != nil {
		return true
	}

	return false
}

// SetAutorun gets a reference to the given bool and assigns it to the Autorun field.
func (o *IncidentType) SetAutorun(v bool) {
	o.Autorun = &v
}

// GetClosureScript returns the ClosureScript field value if set, zero value otherwise.
func (o *IncidentType) GetClosureScript() string {
	if o == nil || o.ClosureScript == nil {
		var ret string
		return ret
	}
	return *o.ClosureScript
}

// GetClosureScriptOk returns a tuple with the ClosureScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetClosureScriptOk() (*string, bool) {
	if o == nil || o.ClosureScript == nil {
		return nil, false
	}
	return o.ClosureScript, true
}

// HasClosureScript returns a boolean if a field has been set.
func (o *IncidentType) HasClosureScript() bool {
	if o != nil && o.ClosureScript != nil {
		return true
	}

	return false
}

// SetClosureScript gets a reference to the given string and assigns it to the ClosureScript field.
func (o *IncidentType) SetClosureScript(v string) {
	o.ClosureScript = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *IncidentType) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *IncidentType) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *IncidentType) SetColor(v string) {
	o.Color = &v
}

// GetCommitMessage returns the CommitMessage field value if set, zero value otherwise.
func (o *IncidentType) GetCommitMessage() string {
	if o == nil || o.CommitMessage == nil {
		var ret string
		return ret
	}
	return *o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetCommitMessageOk() (*string, bool) {
	if o == nil || o.CommitMessage == nil {
		return nil, false
	}
	return o.CommitMessage, true
}

// HasCommitMessage returns a boolean if a field has been set.
func (o *IncidentType) HasCommitMessage() bool {
	if o != nil && o.CommitMessage != nil {
		return true
	}

	return false
}

// SetCommitMessage gets a reference to the given string and assigns it to the CommitMessage field.
func (o *IncidentType) SetCommitMessage(v string) {
	o.CommitMessage = &v
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *IncidentType) GetDays() int64 {
	if o == nil || o.Days == nil {
		var ret int64
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetDaysOk() (*int64, bool) {
	if o == nil || o.Days == nil {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *IncidentType) HasDays() bool {
	if o != nil && o.Days != nil {
		return true
	}

	return false
}

// SetDays gets a reference to the given int64 and assigns it to the Days field.
func (o *IncidentType) SetDays(v int64) {
	o.Days = &v
}

// GetDaysR returns the DaysR field value if set, zero value otherwise.
func (o *IncidentType) GetDaysR() int64 {
	if o == nil || o.DaysR == nil {
		var ret int64
		return ret
	}
	return *o.DaysR
}

// GetDaysROk returns a tuple with the DaysR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetDaysROk() (*int64, bool) {
	if o == nil || o.DaysR == nil {
		return nil, false
	}
	return o.DaysR, true
}

// HasDaysR returns a boolean if a field has been set.
func (o *IncidentType) HasDaysR() bool {
	if o != nil && o.DaysR != nil {
		return true
	}

	return false
}

// SetDaysR gets a reference to the given int64 and assigns it to the DaysR field.
func (o *IncidentType) SetDaysR(v int64) {
	o.DaysR = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *IncidentType) GetDefault() bool {
	if o == nil || o.Default == nil {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetDefaultOk() (*bool, bool) {
	if o == nil || o.Default == nil {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *IncidentType) HasDefault() bool {
	if o != nil && o.Default != nil {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *IncidentType) SetDefault(v bool) {
	o.Default = &v
}

// GetDetached returns the Detached field value if set, zero value otherwise.
func (o *IncidentType) GetDetached() bool {
	if o == nil || o.Detached == nil {
		var ret bool
		return ret
	}
	return *o.Detached
}

// GetDetachedOk returns a tuple with the Detached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetDetachedOk() (*bool, bool) {
	if o == nil || o.Detached == nil {
		return nil, false
	}
	return o.Detached, true
}

// HasDetached returns a boolean if a field has been set.
func (o *IncidentType) HasDetached() bool {
	if o != nil && o.Detached != nil {
		return true
	}

	return false
}

// SetDetached gets a reference to the given bool and assigns it to the Detached field.
func (o *IncidentType) SetDetached(v bool) {
	o.Detached = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *IncidentType) GetDisabled() bool {
	if o == nil || o.Disabled == nil {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetDisabledOk() (*bool, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *IncidentType) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *IncidentType) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetExtractSettings returns the ExtractSettings field value if set, zero value otherwise.
func (o *IncidentType) GetExtractSettings() IncidentTypeExtractSettings {
	if o == nil || o.ExtractSettings == nil {
		var ret IncidentTypeExtractSettings
		return ret
	}
	return *o.ExtractSettings
}

// GetExtractSettingsOk returns a tuple with the ExtractSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetExtractSettingsOk() (*IncidentTypeExtractSettings, bool) {
	if o == nil || o.ExtractSettings == nil {
		return nil, false
	}
	return o.ExtractSettings, true
}

// HasExtractSettings returns a boolean if a field has been set.
func (o *IncidentType) HasExtractSettings() bool {
	if o != nil && o.ExtractSettings != nil {
		return true
	}

	return false
}

// SetExtractSettings gets a reference to the given IncidentTypeExtractSettings and assigns it to the ExtractSettings field.
func (o *IncidentType) SetExtractSettings(v IncidentTypeExtractSettings) {
	o.ExtractSettings = &v
}

// GetFromServerVersion returns the FromServerVersion field value if set, zero value otherwise.
func (o *IncidentType) GetFromServerVersion() Version {
	if o == nil || o.FromServerVersion == nil {
		var ret Version
		return ret
	}
	return *o.FromServerVersion
}

// GetFromServerVersionOk returns a tuple with the FromServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetFromServerVersionOk() (*Version, bool) {
	if o == nil || o.FromServerVersion == nil {
		return nil, false
	}
	return o.FromServerVersion, true
}

// HasFromServerVersion returns a boolean if a field has been set.
func (o *IncidentType) HasFromServerVersion() bool {
	if o != nil && o.FromServerVersion != nil {
		return true
	}

	return false
}

// SetFromServerVersion gets a reference to the given Version and assigns it to the FromServerVersion field.
func (o *IncidentType) SetFromServerVersion(v Version) {
	o.FromServerVersion = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *IncidentType) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *IncidentType) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *IncidentType) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *IncidentType) GetHours() int64 {
	if o == nil || o.Hours == nil {
		var ret int64
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetHoursOk() (*int64, bool) {
	if o == nil || o.Hours == nil {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *IncidentType) HasHours() bool {
	if o != nil && o.Hours != nil {
		return true
	}

	return false
}

// SetHours gets a reference to the given int64 and assigns it to the Hours field.
func (o *IncidentType) SetHours(v int64) {
	o.Hours = &v
}

// GetHoursR returns the HoursR field value if set, zero value otherwise.
func (o *IncidentType) GetHoursR() int64 {
	if o == nil || o.HoursR == nil {
		var ret int64
		return ret
	}
	return *o.HoursR
}

// GetHoursROk returns a tuple with the HoursR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetHoursROk() (*int64, bool) {
	if o == nil || o.HoursR == nil {
		return nil, false
	}
	return o.HoursR, true
}

// HasHoursR returns a boolean if a field has been set.
func (o *IncidentType) HasHoursR() bool {
	if o != nil && o.HoursR != nil {
		return true
	}

	return false
}

// SetHoursR gets a reference to the given int64 and assigns it to the HoursR field.
func (o *IncidentType) SetHoursR(v int64) {
	o.HoursR = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IncidentType) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IncidentType) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IncidentType) SetId(v string) {
	o.Id = &v
}

// GetItemVersion returns the ItemVersion field value if set, zero value otherwise.
func (o *IncidentType) GetItemVersion() Version {
	if o == nil || o.ItemVersion == nil {
		var ret Version
		return ret
	}
	return *o.ItemVersion
}

// GetItemVersionOk returns a tuple with the ItemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetItemVersionOk() (*Version, bool) {
	if o == nil || o.ItemVersion == nil {
		return nil, false
	}
	return o.ItemVersion, true
}

// HasItemVersion returns a boolean if a field has been set.
func (o *IncidentType) HasItemVersion() bool {
	if o != nil && o.ItemVersion != nil {
		return true
	}

	return false
}

// SetItemVersion gets a reference to the given Version and assigns it to the ItemVersion field.
func (o *IncidentType) SetItemVersion(v Version) {
	o.ItemVersion = &v
}

// GetLayout returns the Layout field value if set, zero value otherwise.
func (o *IncidentType) GetLayout() string {
	if o == nil || o.Layout == nil {
		var ret string
		return ret
	}
	return *o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetLayoutOk() (*string, bool) {
	if o == nil || o.Layout == nil {
		return nil, false
	}
	return o.Layout, true
}

// HasLayout returns a boolean if a field has been set.
func (o *IncidentType) HasLayout() bool {
	if o != nil && o.Layout != nil {
		return true
	}

	return false
}

// SetLayout gets a reference to the given string and assigns it to the Layout field.
func (o *IncidentType) SetLayout(v string) {
	o.Layout = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *IncidentType) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *IncidentType) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *IncidentType) SetLocked(v bool) {
	o.Locked = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *IncidentType) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *IncidentType) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *IncidentType) SetModified(v time.Time) {
	o.Modified = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IncidentType) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IncidentType) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IncidentType) SetName(v string) {
	o.Name = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *IncidentType) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *IncidentType) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *IncidentType) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetOnChangeRepAlg returns the OnChangeRepAlg field value if set, zero value otherwise.
func (o *IncidentType) GetOnChangeRepAlg() float64 {
	if o == nil || o.OnChangeRepAlg == nil {
		var ret float64
		return ret
	}
	return *o.OnChangeRepAlg
}

// GetOnChangeRepAlgOk returns a tuple with the OnChangeRepAlg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetOnChangeRepAlgOk() (*float64, bool) {
	if o == nil || o.OnChangeRepAlg == nil {
		return nil, false
	}
	return o.OnChangeRepAlg, true
}

// HasOnChangeRepAlg returns a boolean if a field has been set.
func (o *IncidentType) HasOnChangeRepAlg() bool {
	if o != nil && o.OnChangeRepAlg != nil {
		return true
	}

	return false
}

// SetOnChangeRepAlg gets a reference to the given float64 and assigns it to the OnChangeRepAlg field.
func (o *IncidentType) SetOnChangeRepAlg(v float64) {
	o.OnChangeRepAlg = &v
}

// GetPackID returns the PackID field value if set, zero value otherwise.
func (o *IncidentType) GetPackID() string {
	if o == nil || o.PackID == nil {
		var ret string
		return ret
	}
	return *o.PackID
}

// GetPackIDOk returns a tuple with the PackID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetPackIDOk() (*string, bool) {
	if o == nil || o.PackID == nil {
		return nil, false
	}
	return o.PackID, true
}

// HasPackID returns a boolean if a field has been set.
func (o *IncidentType) HasPackID() bool {
	if o != nil && o.PackID != nil {
		return true
	}

	return false
}

// SetPackID gets a reference to the given string and assigns it to the PackID field.
func (o *IncidentType) SetPackID(v string) {
	o.PackID = &v
}

// GetPackPropagationLabels returns the PackPropagationLabels field value if set, zero value otherwise.
func (o *IncidentType) GetPackPropagationLabels() []string {
	if o == nil || o.PackPropagationLabels == nil {
		var ret []string
		return ret
	}
	return *o.PackPropagationLabels
}

// GetPackPropagationLabelsOk returns a tuple with the PackPropagationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetPackPropagationLabelsOk() (*[]string, bool) {
	if o == nil || o.PackPropagationLabels == nil {
		return nil, false
	}
	return o.PackPropagationLabels, true
}

// HasPackPropagationLabels returns a boolean if a field has been set.
func (o *IncidentType) HasPackPropagationLabels() bool {
	if o != nil && o.PackPropagationLabels != nil {
		return true
	}

	return false
}

// SetPackPropagationLabels gets a reference to the given []string and assigns it to the PackPropagationLabels field.
func (o *IncidentType) SetPackPropagationLabels(v []string) {
	o.PackPropagationLabels = &v
}

// GetPlaybookId returns the PlaybookId field value if set, zero value otherwise.
func (o *IncidentType) GetPlaybookId() string {
	if o == nil || o.PlaybookId == nil {
		var ret string
		return ret
	}
	return *o.PlaybookId
}

// GetPlaybookIdOk returns a tuple with the PlaybookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetPlaybookIdOk() (*string, bool) {
	if o == nil || o.PlaybookId == nil {
		return nil, false
	}
	return o.PlaybookId, true
}

// HasPlaybookId returns a boolean if a field has been set.
func (o *IncidentType) HasPlaybookId() bool {
	if o != nil && o.PlaybookId != nil {
		return true
	}

	return false
}

// SetPlaybookId gets a reference to the given string and assigns it to the PlaybookId field.
func (o *IncidentType) SetPlaybookId(v string) {
	o.PlaybookId = &v
}

// GetPreProcessingScript returns the PreProcessingScript field value if set, zero value otherwise.
func (o *IncidentType) GetPreProcessingScript() string {
	if o == nil || o.PreProcessingScript == nil {
		var ret string
		return ret
	}
	return *o.PreProcessingScript
}

// GetPreProcessingScriptOk returns a tuple with the PreProcessingScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetPreProcessingScriptOk() (*string, bool) {
	if o == nil || o.PreProcessingScript == nil {
		return nil, false
	}
	return o.PreProcessingScript, true
}

// HasPreProcessingScript returns a boolean if a field has been set.
func (o *IncidentType) HasPreProcessingScript() bool {
	if o != nil && o.PreProcessingScript != nil {
		return true
	}

	return false
}

// SetPreProcessingScript gets a reference to the given string and assigns it to the PreProcessingScript field.
func (o *IncidentType) SetPreProcessingScript(v string) {
	o.PreProcessingScript = &v
}

// GetPrevName returns the PrevName field value if set, zero value otherwise.
func (o *IncidentType) GetPrevName() string {
	if o == nil || o.PrevName == nil {
		var ret string
		return ret
	}
	return *o.PrevName
}

// GetPrevNameOk returns a tuple with the PrevName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetPrevNameOk() (*string, bool) {
	if o == nil || o.PrevName == nil {
		return nil, false
	}
	return o.PrevName, true
}

// HasPrevName returns a boolean if a field has been set.
func (o *IncidentType) HasPrevName() bool {
	if o != nil && o.PrevName != nil {
		return true
	}

	return false
}

// SetPrevName gets a reference to the given string and assigns it to the PrevName field.
func (o *IncidentType) SetPrevName(v string) {
	o.PrevName = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *IncidentType) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *IncidentType) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *IncidentType) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetPropagationLabels returns the PropagationLabels field value if set, zero value otherwise.
func (o *IncidentType) GetPropagationLabels() []string {
	if o == nil || o.PropagationLabels == nil {
		var ret []string
		return ret
	}
	return *o.PropagationLabels
}

// GetPropagationLabelsOk returns a tuple with the PropagationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetPropagationLabelsOk() (*[]string, bool) {
	if o == nil || o.PropagationLabels == nil {
		return nil, false
	}
	return o.PropagationLabels, true
}

// HasPropagationLabels returns a boolean if a field has been set.
func (o *IncidentType) HasPropagationLabels() bool {
	if o != nil && o.PropagationLabels != nil {
		return true
	}

	return false
}

// SetPropagationLabels gets a reference to the given []string and assigns it to the PropagationLabels field.
func (o *IncidentType) SetPropagationLabels(v []string) {
	o.PropagationLabels = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *IncidentType) GetReadonly() bool {
	if o == nil || o.Readonly == nil {
		var ret bool
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetReadonlyOk() (*bool, bool) {
	if o == nil || o.Readonly == nil {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *IncidentType) HasReadonly() bool {
	if o != nil && o.Readonly != nil {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given bool and assigns it to the Readonly field.
func (o *IncidentType) SetReadonly(v bool) {
	o.Readonly = &v
}

// GetReputationCalc returns the ReputationCalc field value if set, zero value otherwise.
func (o *IncidentType) GetReputationCalc() float64 {
	if o == nil || o.ReputationCalc == nil {
		var ret float64
		return ret
	}
	return *o.ReputationCalc
}

// GetReputationCalcOk returns a tuple with the ReputationCalc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetReputationCalcOk() (*float64, bool) {
	if o == nil || o.ReputationCalc == nil {
		return nil, false
	}
	return o.ReputationCalc, true
}

// HasReputationCalc returns a boolean if a field has been set.
func (o *IncidentType) HasReputationCalc() bool {
	if o != nil && o.ReputationCalc != nil {
		return true
	}

	return false
}

// SetReputationCalc gets a reference to the given float64 and assigns it to the ReputationCalc field.
func (o *IncidentType) SetReputationCalc(v float64) {
	o.ReputationCalc = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *IncidentType) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *IncidentType) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *IncidentType) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetShouldCommit returns the ShouldCommit field value if set, zero value otherwise.
func (o *IncidentType) GetShouldCommit() bool {
	if o == nil || o.ShouldCommit == nil {
		var ret bool
		return ret
	}
	return *o.ShouldCommit
}

// GetShouldCommitOk returns a tuple with the ShouldCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetShouldCommitOk() (*bool, bool) {
	if o == nil || o.ShouldCommit == nil {
		return nil, false
	}
	return o.ShouldCommit, true
}

// HasShouldCommit returns a boolean if a field has been set.
func (o *IncidentType) HasShouldCommit() bool {
	if o != nil && o.ShouldCommit != nil {
		return true
	}

	return false
}

// SetShouldCommit gets a reference to the given bool and assigns it to the ShouldCommit field.
func (o *IncidentType) SetShouldCommit(v bool) {
	o.ShouldCommit = &v
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *IncidentType) GetSla() int64 {
	if o == nil || o.Sla == nil {
		var ret int64
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetSlaOk() (*int64, bool) {
	if o == nil || o.Sla == nil {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *IncidentType) HasSla() bool {
	if o != nil && o.Sla != nil {
		return true
	}

	return false
}

// SetSla gets a reference to the given int64 and assigns it to the Sla field.
func (o *IncidentType) SetSla(v int64) {
	o.Sla = &v
}

// GetSlaReminder returns the SlaReminder field value if set, zero value otherwise.
func (o *IncidentType) GetSlaReminder() int64 {
	if o == nil || o.SlaReminder == nil {
		var ret int64
		return ret
	}
	return *o.SlaReminder
}

// GetSlaReminderOk returns a tuple with the SlaReminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetSlaReminderOk() (*int64, bool) {
	if o == nil || o.SlaReminder == nil {
		return nil, false
	}
	return o.SlaReminder, true
}

// HasSlaReminder returns a boolean if a field has been set.
func (o *IncidentType) HasSlaReminder() bool {
	if o != nil && o.SlaReminder != nil {
		return true
	}

	return false
}

// SetSlaReminder gets a reference to the given int64 and assigns it to the SlaReminder field.
func (o *IncidentType) SetSlaReminder(v int64) {
	o.SlaReminder = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *IncidentType) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *IncidentType) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *IncidentType) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *IncidentType) GetSystem() bool {
	if o == nil || o.System == nil {
		var ret bool
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetSystemOk() (*bool, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *IncidentType) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given bool and assigns it to the System field.
func (o *IncidentType) SetSystem(v bool) {
	o.System = &v
}

// GetToServerVersion returns the ToServerVersion field value if set, zero value otherwise.
func (o *IncidentType) GetToServerVersion() Version {
	if o == nil || o.ToServerVersion == nil {
		var ret Version
		return ret
	}
	return *o.ToServerVersion
}

// GetToServerVersionOk returns a tuple with the ToServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetToServerVersionOk() (*Version, bool) {
	if o == nil || o.ToServerVersion == nil {
		return nil, false
	}
	return o.ToServerVersion, true
}

// HasToServerVersion returns a boolean if a field has been set.
func (o *IncidentType) HasToServerVersion() bool {
	if o != nil && o.ToServerVersion != nil {
		return true
	}

	return false
}

// SetToServerVersion gets a reference to the given Version and assigns it to the ToServerVersion field.
func (o *IncidentType) SetToServerVersion(v Version) {
	o.ToServerVersion = &v
}

// GetVcShouldIgnore returns the VcShouldIgnore field value if set, zero value otherwise.
func (o *IncidentType) GetVcShouldIgnore() bool {
	if o == nil || o.VcShouldIgnore == nil {
		var ret bool
		return ret
	}
	return *o.VcShouldIgnore
}

// GetVcShouldIgnoreOk returns a tuple with the VcShouldIgnore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetVcShouldIgnoreOk() (*bool, bool) {
	if o == nil || o.VcShouldIgnore == nil {
		return nil, false
	}
	return o.VcShouldIgnore, true
}

// HasVcShouldIgnore returns a boolean if a field has been set.
func (o *IncidentType) HasVcShouldIgnore() bool {
	if o != nil && o.VcShouldIgnore != nil {
		return true
	}

	return false
}

// SetVcShouldIgnore gets a reference to the given bool and assigns it to the VcShouldIgnore field.
func (o *IncidentType) SetVcShouldIgnore(v bool) {
	o.VcShouldIgnore = &v
}

// GetVcShouldKeepItemLegacyProdMachine returns the VcShouldKeepItemLegacyProdMachine field value if set, zero value otherwise.
func (o *IncidentType) GetVcShouldKeepItemLegacyProdMachine() bool {
	if o == nil || o.VcShouldKeepItemLegacyProdMachine == nil {
		var ret bool
		return ret
	}
	return *o.VcShouldKeepItemLegacyProdMachine
}

// GetVcShouldKeepItemLegacyProdMachineOk returns a tuple with the VcShouldKeepItemLegacyProdMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetVcShouldKeepItemLegacyProdMachineOk() (*bool, bool) {
	if o == nil || o.VcShouldKeepItemLegacyProdMachine == nil {
		return nil, false
	}
	return o.VcShouldKeepItemLegacyProdMachine, true
}

// HasVcShouldKeepItemLegacyProdMachine returns a boolean if a field has been set.
func (o *IncidentType) HasVcShouldKeepItemLegacyProdMachine() bool {
	if o != nil && o.VcShouldKeepItemLegacyProdMachine != nil {
		return true
	}

	return false
}

// SetVcShouldKeepItemLegacyProdMachine gets a reference to the given bool and assigns it to the VcShouldKeepItemLegacyProdMachine field.
func (o *IncidentType) SetVcShouldKeepItemLegacyProdMachine(v bool) {
	o.VcShouldKeepItemLegacyProdMachine = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IncidentType) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IncidentType) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *IncidentType) SetVersion(v int64) {
	o.Version = &v
}

// GetWeeks returns the Weeks field value if set, zero value otherwise.
func (o *IncidentType) GetWeeks() int64 {
	if o == nil || o.Weeks == nil {
		var ret int64
		return ret
	}
	return *o.Weeks
}

// GetWeeksOk returns a tuple with the Weeks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetWeeksOk() (*int64, bool) {
	if o == nil || o.Weeks == nil {
		return nil, false
	}
	return o.Weeks, true
}

// HasWeeks returns a boolean if a field has been set.
func (o *IncidentType) HasWeeks() bool {
	if o != nil && o.Weeks != nil {
		return true
	}

	return false
}

// SetWeeks gets a reference to the given int64 and assigns it to the Weeks field.
func (o *IncidentType) SetWeeks(v int64) {
	o.Weeks = &v
}

// GetWeeksR returns the WeeksR field value if set, zero value otherwise.
func (o *IncidentType) GetWeeksR() int64 {
	if o == nil || o.WeeksR == nil {
		var ret int64
		return ret
	}
	return *o.WeeksR
}

// GetWeeksROk returns a tuple with the WeeksR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentType) GetWeeksROk() (*int64, bool) {
	if o == nil || o.WeeksR == nil {
		return nil, false
	}
	return o.WeeksR, true
}

// HasWeeksR returns a boolean if a field has been set.
func (o *IncidentType) HasWeeksR() bool {
	if o != nil && o.WeeksR != nil {
		return true
	}

	return false
}

// SetWeeksR gets a reference to the given int64 and assigns it to the WeeksR field.
func (o *IncidentType) SetWeeksR(v int64) {
	o.WeeksR = &v
}

func (o IncidentType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Autorun != nil {
		toSerialize["autorun"] = o.Autorun
	}
	if o.ClosureScript != nil {
		toSerialize["closureScript"] = o.ClosureScript
	}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.CommitMessage != nil {
		toSerialize["commitMessage"] = o.CommitMessage
	}
	if o.Days != nil {
		toSerialize["days"] = o.Days
	}
	if o.DaysR != nil {
		toSerialize["daysR"] = o.DaysR
	}
	if o.Default != nil {
		toSerialize["default"] = o.Default
	}
	if o.Detached != nil {
		toSerialize["detached"] = o.Detached
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if o.ExtractSettings != nil {
		toSerialize["extractSettings"] = o.ExtractSettings
	}
	if o.FromServerVersion != nil {
		toSerialize["fromServerVersion"] = o.FromServerVersion
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Hours != nil {
		toSerialize["hours"] = o.Hours
	}
	if o.HoursR != nil {
		toSerialize["hoursR"] = o.HoursR
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ItemVersion != nil {
		toSerialize["itemVersion"] = o.ItemVersion
	}
	if o.Layout != nil {
		toSerialize["layout"] = o.Layout
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.OnChangeRepAlg != nil {
		toSerialize["onChangeRepAlg"] = o.OnChangeRepAlg
	}
	if o.PackID != nil {
		toSerialize["packID"] = o.PackID
	}
	if o.PackPropagationLabels != nil {
		toSerialize["packPropagationLabels"] = o.PackPropagationLabels
	}
	if o.PlaybookId != nil {
		toSerialize["playbookId"] = o.PlaybookId
	}
	if o.PreProcessingScript != nil {
		toSerialize["preProcessingScript"] = o.PreProcessingScript
	}
	if o.PrevName != nil {
		toSerialize["prevName"] = o.PrevName
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.PropagationLabels != nil {
		toSerialize["propagationLabels"] = o.PropagationLabels
	}
	if o.Readonly != nil {
		toSerialize["readonly"] = o.Readonly
	}
	if o.ReputationCalc != nil {
		toSerialize["reputationCalc"] = o.ReputationCalc
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.ShouldCommit != nil {
		toSerialize["shouldCommit"] = o.ShouldCommit
	}
	if o.Sla != nil {
		toSerialize["sla"] = o.Sla
	}
	if o.SlaReminder != nil {
		toSerialize["slaReminder"] = o.SlaReminder
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	if o.ToServerVersion != nil {
		toSerialize["toServerVersion"] = o.ToServerVersion
	}
	if o.VcShouldIgnore != nil {
		toSerialize["vcShouldIgnore"] = o.VcShouldIgnore
	}
	if o.VcShouldKeepItemLegacyProdMachine != nil {
		toSerialize["vcShouldKeepItemLegacyProdMachine"] = o.VcShouldKeepItemLegacyProdMachine
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Weeks != nil {
		toSerialize["weeks"] = o.Weeks
	}
	if o.WeeksR != nil {
		toSerialize["weeksR"] = o.WeeksR
	}
	return json.Marshal(toSerialize)
}

type NullableIncidentType struct {
	value *IncidentType
	isSet bool
}

func (v NullableIncidentType) Get() *IncidentType {
	return v.value
}

func (v *NullableIncidentType) Set(val *IncidentType) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentType) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentType(val *IncidentType) *NullableIncidentType {
	return &NullableIncidentType{value: val, isSet: true}
}

func (v NullableIncidentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
