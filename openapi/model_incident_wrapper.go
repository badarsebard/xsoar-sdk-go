/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// IncidentWrapper IncidentWrapper is an extension of the Incident entity, which includes an additional field of changed-status for the web client
type IncidentWrapper struct {
	ShardID *int64 `json:"ShardID,omitempty"`
	// Account holds the tenant name so that slicing and dicing on the master can leverage bleve
	Account *string `json:"account,omitempty"`
	// When was this activated
	Activated *time.Time `json:"activated,omitempty"`
	// The user that activated this investigation
	ActivatingingUserId *string `json:"activatingingUserId,omitempty"`
	AllRead             *bool   `json:"allRead,omitempty"`
	AllReadWrite        *bool   `json:"allReadWrite,omitempty"`
	// Attachments
	Attachment *[]Attachment `json:"attachment,omitempty"`
	// AlmostUniqueTime is an attempt to have a unique sortable ID for an incident
	Autime *int64 `json:"autime,omitempty"`
	// Canvases of the incident
	Canvases *[]string `json:"canvases,omitempty"`
	// Category
	Category     *string `json:"category,omitempty"`
	ChangeStatus *string `json:"changeStatus,omitempty"`
	// Notes for closing the incident
	CloseNotes *string `json:"closeNotes,omitempty"`
	// The reason for closing the incident (select from existing predefined values)
	CloseReason *string `json:"closeReason,omitempty"`
	// When was this closed
	Closed *time.Time `json:"closed,omitempty"`
	// The user ID that closed this investigation
	ClosingUserId *string `json:"closingUserId,omitempty"`
	// When was this created
	Created *time.Time `json:"created,omitempty"`
	// Who has created this event - relevant only for manual incidents
	DbotCreatedBy *string `json:"dbotCreatedBy,omitempty"`
	// For mirroring, manage a list of current dirty fields so that we can send delta to outgoing integration
	DbotCurrentDirtyFields *[]string `json:"dbotCurrentDirtyFields,omitempty"`
	// For mirroring, manage a list of dirty fields to not override them from the source of the incident
	DbotDirtyFields *[]string `json:"dbotDirtyFields,omitempty"`
	// DBotMirrorDirection of how to mirror the incident (in/out/both)
	DbotMirrorDirection *string `json:"dbotMirrorDirection,omitempty"`
	// DBotMirrorID of a remote system we are syncing with
	DbotMirrorId *string `json:"dbotMirrorId,omitempty"`
	// DBotMirrorInstance name of a mirror integration instance
	DbotMirrorInstance *string `json:"dbotMirrorInstance,omitempty"`
	// The last time we synced this incident even if we did not update anything
	DbotMirrorLastSync *time.Time `json:"dbotMirrorLastSync,omitempty"`
	// The entry tags I want to sync to remote system
	DbotMirrorTags *[]string `json:"dbotMirrorTags,omitempty"`
	// The details of the incident - reason, etc.
	Details *string `json:"details,omitempty"`
	// DroppedCount ...
	DroppedCount *int64 `json:"droppedCount,omitempty"`
	// SLA
	DueDate *time.Time `json:"dueDate,omitempty"`
	// If this incident was triggered by a feed job
	FeedBased *bool `json:"feedBased,omitempty"`
	// Internal field to make queries on role faster
	HasRole   *bool                `json:"hasRole,omitempty"`
	Highlight *map[string][]string `json:"highlight,omitempty"`
	Id        *string              `json:"id,omitempty"`
	Insights  *int32               `json:"insights,omitempty"`
	// Investigation that was opened as a result of the incoming event
	InvestigationId *string `json:"investigationId,omitempty"`
	// IsDebug ...
	IsDebug *bool `json:"isDebug,omitempty"`
	// IsPlayGround
	IsPlayground *bool `json:"isPlayground,omitempty"`
	// Labels related to incident - each label is composed of a type and value
	Labels *[]Label `json:"labels,omitempty"`
	// If this incident was triggered by a job, this would be the time the **previous** job started
	LastJobRunTime *time.Time `json:"lastJobRunTime,omitempty"`
	LastOpen       *time.Time `json:"lastOpen,omitempty"`
	// LinkedCount ...
	LinkedCount *int64 `json:"linkedCount,omitempty"`
	// LinkedIncidents incidents that were marked as linked by user
	LinkedIncidents *[]string  `json:"linkedIncidents,omitempty"`
	Modified        *time.Time `json:"modified,omitempty"`
	// Incident Name - given by user
	Name *string `json:"name,omitempty"`
	// Incdicates when last this field was changed with a value that supposed to send a notification
	NotifyTime *time.Time `json:"notifyTime,omitempty"`
	NumericId  *int64     `json:"numericId,omitempty"`
	// When this incident has really occurred
	Occurred *time.Time `json:"occurred,omitempty"`
	// Duration incident was open
	OpenDuration *int64 `json:"openDuration,omitempty"`
	// The user who owns this incident
	Owner *string `json:"owner,omitempty"`
	// Parent
	Parent *string `json:"parent,omitempty"`
	// Phase
	Phase *string `json:"phase,omitempty"`
	// The associated playbook for this incident
	PlaybookId           *string `json:"playbookId,omitempty"`
	PreviousAllRead      *bool   `json:"previousAllRead,omitempty"`
	PreviousAllReadWrite *bool   `json:"previousAllReadWrite,omitempty"`
	// Do not change this field manually
	PreviousRoles *[]string `json:"previousRoles,omitempty"`
	PrimaryTerm   *int64    `json:"primaryTerm,omitempty"`
	RawCategory   *string   `json:"rawCategory,omitempty"`
	// The reason for closing the incident (select from existing predefined values)
	RawCloseReason *string `json:"rawCloseReason,omitempty"`
	RawJSON        *string `json:"rawJSON,omitempty"`
	// Incident RawName
	RawName *string `json:"rawName,omitempty"`
	// RawPhase
	RawPhase *string `json:"rawPhase,omitempty"`
	// Incident raw type
	RawType *string `json:"rawType,omitempty"`
	// The reason for the resolve
	Reason *string `json:"reason,omitempty"`
	// When if at all to send a reminder
	Reminder *time.Time `json:"reminder,omitempty"`
	// The role assigned to this investigation
	Roles *[]string `json:"roles,omitempty"`
	// RunStatus of a job
	RunStatus      *string `json:"runStatus,omitempty"`
	SequenceNumber *int64  `json:"sequenceNumber,omitempty"`
	// Severity is the incident severity
	Severity *float64 `json:"severity,omitempty"`
	// SLAState is the incident sla at closure time
	Sla        *float64  `json:"sla,omitempty"`
	SortValues *[]string `json:"sortValues,omitempty"`
	// SourceBrand ...
	SourceBrand *string `json:"sourceBrand,omitempty"`
	// SourceInstance ...
	SourceInstance *string `json:"sourceInstance,omitempty"`
	// IncidentStatus is the status of the incident
	Status *float64 `json:"status,omitempty"`
	// ToDoTaskIDs list of to do task ids
	TodoTaskIds *[]string `json:"todoTaskIds,omitempty"`
	// Incident type
	Type                       *string   `json:"type,omitempty"`
	Version                    *int64    `json:"version,omitempty"`
	XsoarHasReadOnlyRole       *bool     `json:"xsoarHasReadOnlyRole,omitempty"`
	XsoarPreviousReadOnlyRoles *[]string `json:"xsoarPreviousReadOnlyRoles,omitempty"`
	XsoarReadOnlyRoles         *[]string `json:"xsoarReadOnlyRoles,omitempty"`
}

// NewIncidentWrapper instantiates a new IncidentWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentWrapper() *IncidentWrapper {
	this := IncidentWrapper{}
	return &this
}

// NewIncidentWrapperWithDefaults instantiates a new IncidentWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentWrapperWithDefaults() *IncidentWrapper {
	this := IncidentWrapper{}
	return &this
}

// GetShardID returns the ShardID field value if set, zero value otherwise.
func (o *IncidentWrapper) GetShardID() int64 {
	if o == nil || o.ShardID == nil {
		var ret int64
		return ret
	}
	return *o.ShardID
}

// GetShardIDOk returns a tuple with the ShardID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetShardIDOk() (*int64, bool) {
	if o == nil || o.ShardID == nil {
		return nil, false
	}
	return o.ShardID, true
}

// HasShardID returns a boolean if a field has been set.
func (o *IncidentWrapper) HasShardID() bool {
	if o != nil && o.ShardID != nil {
		return true
	}

	return false
}

// SetShardID gets a reference to the given int64 and assigns it to the ShardID field.
func (o *IncidentWrapper) SetShardID(v int64) {
	o.ShardID = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *IncidentWrapper) GetAccount() string {
	if o == nil || o.Account == nil {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetAccountOk() (*string, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *IncidentWrapper) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *IncidentWrapper) SetAccount(v string) {
	o.Account = &v
}

// GetActivated returns the Activated field value if set, zero value otherwise.
func (o *IncidentWrapper) GetActivated() time.Time {
	if o == nil || o.Activated == nil {
		var ret time.Time
		return ret
	}
	return *o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetActivatedOk() (*time.Time, bool) {
	if o == nil || o.Activated == nil {
		return nil, false
	}
	return o.Activated, true
}

// HasActivated returns a boolean if a field has been set.
func (o *IncidentWrapper) HasActivated() bool {
	if o != nil && o.Activated != nil {
		return true
	}

	return false
}

// SetActivated gets a reference to the given time.Time and assigns it to the Activated field.
func (o *IncidentWrapper) SetActivated(v time.Time) {
	o.Activated = &v
}

// GetActivatingingUserId returns the ActivatingingUserId field value if set, zero value otherwise.
func (o *IncidentWrapper) GetActivatingingUserId() string {
	if o == nil || o.ActivatingingUserId == nil {
		var ret string
		return ret
	}
	return *o.ActivatingingUserId
}

// GetActivatingingUserIdOk returns a tuple with the ActivatingingUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetActivatingingUserIdOk() (*string, bool) {
	if o == nil || o.ActivatingingUserId == nil {
		return nil, false
	}
	return o.ActivatingingUserId, true
}

// HasActivatingingUserId returns a boolean if a field has been set.
func (o *IncidentWrapper) HasActivatingingUserId() bool {
	if o != nil && o.ActivatingingUserId != nil {
		return true
	}

	return false
}

// SetActivatingingUserId gets a reference to the given string and assigns it to the ActivatingingUserId field.
func (o *IncidentWrapper) SetActivatingingUserId(v string) {
	o.ActivatingingUserId = &v
}

// GetAllRead returns the AllRead field value if set, zero value otherwise.
func (o *IncidentWrapper) GetAllRead() bool {
	if o == nil || o.AllRead == nil {
		var ret bool
		return ret
	}
	return *o.AllRead
}

// GetAllReadOk returns a tuple with the AllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetAllReadOk() (*bool, bool) {
	if o == nil || o.AllRead == nil {
		return nil, false
	}
	return o.AllRead, true
}

// HasAllRead returns a boolean if a field has been set.
func (o *IncidentWrapper) HasAllRead() bool {
	if o != nil && o.AllRead != nil {
		return true
	}

	return false
}

// SetAllRead gets a reference to the given bool and assigns it to the AllRead field.
func (o *IncidentWrapper) SetAllRead(v bool) {
	o.AllRead = &v
}

// GetAllReadWrite returns the AllReadWrite field value if set, zero value otherwise.
func (o *IncidentWrapper) GetAllReadWrite() bool {
	if o == nil || o.AllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.AllReadWrite
}

// GetAllReadWriteOk returns a tuple with the AllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetAllReadWriteOk() (*bool, bool) {
	if o == nil || o.AllReadWrite == nil {
		return nil, false
	}
	return o.AllReadWrite, true
}

// HasAllReadWrite returns a boolean if a field has been set.
func (o *IncidentWrapper) HasAllReadWrite() bool {
	if o != nil && o.AllReadWrite != nil {
		return true
	}

	return false
}

// SetAllReadWrite gets a reference to the given bool and assigns it to the AllReadWrite field.
func (o *IncidentWrapper) SetAllReadWrite(v bool) {
	o.AllReadWrite = &v
}

// GetAttachment returns the Attachment field value if set, zero value otherwise.
func (o *IncidentWrapper) GetAttachment() []Attachment {
	if o == nil || o.Attachment == nil {
		var ret []Attachment
		return ret
	}
	return *o.Attachment
}

// GetAttachmentOk returns a tuple with the Attachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetAttachmentOk() (*[]Attachment, bool) {
	if o == nil || o.Attachment == nil {
		return nil, false
	}
	return o.Attachment, true
}

// HasAttachment returns a boolean if a field has been set.
func (o *IncidentWrapper) HasAttachment() bool {
	if o != nil && o.Attachment != nil {
		return true
	}

	return false
}

// SetAttachment gets a reference to the given []Attachment and assigns it to the Attachment field.
func (o *IncidentWrapper) SetAttachment(v []Attachment) {
	o.Attachment = &v
}

// GetAutime returns the Autime field value if set, zero value otherwise.
func (o *IncidentWrapper) GetAutime() int64 {
	if o == nil || o.Autime == nil {
		var ret int64
		return ret
	}
	return *o.Autime
}

// GetAutimeOk returns a tuple with the Autime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetAutimeOk() (*int64, bool) {
	if o == nil || o.Autime == nil {
		return nil, false
	}
	return o.Autime, true
}

// HasAutime returns a boolean if a field has been set.
func (o *IncidentWrapper) HasAutime() bool {
	if o != nil && o.Autime != nil {
		return true
	}

	return false
}

// SetAutime gets a reference to the given int64 and assigns it to the Autime field.
func (o *IncidentWrapper) SetAutime(v int64) {
	o.Autime = &v
}

// GetCanvases returns the Canvases field value if set, zero value otherwise.
func (o *IncidentWrapper) GetCanvases() []string {
	if o == nil || o.Canvases == nil {
		var ret []string
		return ret
	}
	return *o.Canvases
}

// GetCanvasesOk returns a tuple with the Canvases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetCanvasesOk() (*[]string, bool) {
	if o == nil || o.Canvases == nil {
		return nil, false
	}
	return o.Canvases, true
}

// HasCanvases returns a boolean if a field has been set.
func (o *IncidentWrapper) HasCanvases() bool {
	if o != nil && o.Canvases != nil {
		return true
	}

	return false
}

// SetCanvases gets a reference to the given []string and assigns it to the Canvases field.
func (o *IncidentWrapper) SetCanvases(v []string) {
	o.Canvases = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *IncidentWrapper) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *IncidentWrapper) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *IncidentWrapper) SetCategory(v string) {
	o.Category = &v
}

// GetChangeStatus returns the ChangeStatus field value if set, zero value otherwise.
func (o *IncidentWrapper) GetChangeStatus() string {
	if o == nil || o.ChangeStatus == nil {
		var ret string
		return ret
	}
	return *o.ChangeStatus
}

// GetChangeStatusOk returns a tuple with the ChangeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetChangeStatusOk() (*string, bool) {
	if o == nil || o.ChangeStatus == nil {
		return nil, false
	}
	return o.ChangeStatus, true
}

// HasChangeStatus returns a boolean if a field has been set.
func (o *IncidentWrapper) HasChangeStatus() bool {
	if o != nil && o.ChangeStatus != nil {
		return true
	}

	return false
}

// SetChangeStatus gets a reference to the given string and assigns it to the ChangeStatus field.
func (o *IncidentWrapper) SetChangeStatus(v string) {
	o.ChangeStatus = &v
}

// GetCloseNotes returns the CloseNotes field value if set, zero value otherwise.
func (o *IncidentWrapper) GetCloseNotes() string {
	if o == nil || o.CloseNotes == nil {
		var ret string
		return ret
	}
	return *o.CloseNotes
}

// GetCloseNotesOk returns a tuple with the CloseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetCloseNotesOk() (*string, bool) {
	if o == nil || o.CloseNotes == nil {
		return nil, false
	}
	return o.CloseNotes, true
}

// HasCloseNotes returns a boolean if a field has been set.
func (o *IncidentWrapper) HasCloseNotes() bool {
	if o != nil && o.CloseNotes != nil {
		return true
	}

	return false
}

// SetCloseNotes gets a reference to the given string and assigns it to the CloseNotes field.
func (o *IncidentWrapper) SetCloseNotes(v string) {
	o.CloseNotes = &v
}

// GetCloseReason returns the CloseReason field value if set, zero value otherwise.
func (o *IncidentWrapper) GetCloseReason() string {
	if o == nil || o.CloseReason == nil {
		var ret string
		return ret
	}
	return *o.CloseReason
}

// GetCloseReasonOk returns a tuple with the CloseReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetCloseReasonOk() (*string, bool) {
	if o == nil || o.CloseReason == nil {
		return nil, false
	}
	return o.CloseReason, true
}

// HasCloseReason returns a boolean if a field has been set.
func (o *IncidentWrapper) HasCloseReason() bool {
	if o != nil && o.CloseReason != nil {
		return true
	}

	return false
}

// SetCloseReason gets a reference to the given string and assigns it to the CloseReason field.
func (o *IncidentWrapper) SetCloseReason(v string) {
	o.CloseReason = &v
}

// GetClosed returns the Closed field value if set, zero value otherwise.
func (o *IncidentWrapper) GetClosed() time.Time {
	if o == nil || o.Closed == nil {
		var ret time.Time
		return ret
	}
	return *o.Closed
}

// GetClosedOk returns a tuple with the Closed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetClosedOk() (*time.Time, bool) {
	if o == nil || o.Closed == nil {
		return nil, false
	}
	return o.Closed, true
}

// HasClosed returns a boolean if a field has been set.
func (o *IncidentWrapper) HasClosed() bool {
	if o != nil && o.Closed != nil {
		return true
	}

	return false
}

// SetClosed gets a reference to the given time.Time and assigns it to the Closed field.
func (o *IncidentWrapper) SetClosed(v time.Time) {
	o.Closed = &v
}

// GetClosingUserId returns the ClosingUserId field value if set, zero value otherwise.
func (o *IncidentWrapper) GetClosingUserId() string {
	if o == nil || o.ClosingUserId == nil {
		var ret string
		return ret
	}
	return *o.ClosingUserId
}

// GetClosingUserIdOk returns a tuple with the ClosingUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetClosingUserIdOk() (*string, bool) {
	if o == nil || o.ClosingUserId == nil {
		return nil, false
	}
	return o.ClosingUserId, true
}

// HasClosingUserId returns a boolean if a field has been set.
func (o *IncidentWrapper) HasClosingUserId() bool {
	if o != nil && o.ClosingUserId != nil {
		return true
	}

	return false
}

// SetClosingUserId gets a reference to the given string and assigns it to the ClosingUserId field.
func (o *IncidentWrapper) SetClosingUserId(v string) {
	o.ClosingUserId = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *IncidentWrapper) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *IncidentWrapper) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *IncidentWrapper) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDbotCreatedBy returns the DbotCreatedBy field value if set, zero value otherwise.
func (o *IncidentWrapper) GetDbotCreatedBy() string {
	if o == nil || o.DbotCreatedBy == nil {
		var ret string
		return ret
	}
	return *o.DbotCreatedBy
}

// GetDbotCreatedByOk returns a tuple with the DbotCreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetDbotCreatedByOk() (*string, bool) {
	if o == nil || o.DbotCreatedBy == nil {
		return nil, false
	}
	return o.DbotCreatedBy, true
}

// HasDbotCreatedBy returns a boolean if a field has been set.
func (o *IncidentWrapper) HasDbotCreatedBy() bool {
	if o != nil && o.DbotCreatedBy != nil {
		return true
	}

	return false
}

// SetDbotCreatedBy gets a reference to the given string and assigns it to the DbotCreatedBy field.
func (o *IncidentWrapper) SetDbotCreatedBy(v string) {
	o.DbotCreatedBy = &v
}

// GetDbotCurrentDirtyFields returns the DbotCurrentDirtyFields field value if set, zero value otherwise.
func (o *IncidentWrapper) GetDbotCurrentDirtyFields() []string {
	if o == nil || o.DbotCurrentDirtyFields == nil {
		var ret []string
		return ret
	}
	return *o.DbotCurrentDirtyFields
}

// GetDbotCurrentDirtyFieldsOk returns a tuple with the DbotCurrentDirtyFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetDbotCurrentDirtyFieldsOk() (*[]string, bool) {
	if o == nil || o.DbotCurrentDirtyFields == nil {
		return nil, false
	}
	return o.DbotCurrentDirtyFields, true
}

// HasDbotCurrentDirtyFields returns a boolean if a field has been set.
func (o *IncidentWrapper) HasDbotCurrentDirtyFields() bool {
	if o != nil && o.DbotCurrentDirtyFields != nil {
		return true
	}

	return false
}

// SetDbotCurrentDirtyFields gets a reference to the given []string and assigns it to the DbotCurrentDirtyFields field.
func (o *IncidentWrapper) SetDbotCurrentDirtyFields(v []string) {
	o.DbotCurrentDirtyFields = &v
}

// GetDbotDirtyFields returns the DbotDirtyFields field value if set, zero value otherwise.
func (o *IncidentWrapper) GetDbotDirtyFields() []string {
	if o == nil || o.DbotDirtyFields == nil {
		var ret []string
		return ret
	}
	return *o.DbotDirtyFields
}

// GetDbotDirtyFieldsOk returns a tuple with the DbotDirtyFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetDbotDirtyFieldsOk() (*[]string, bool) {
	if o == nil || o.DbotDirtyFields == nil {
		return nil, false
	}
	return o.DbotDirtyFields, true
}

// HasDbotDirtyFields returns a boolean if a field has been set.
func (o *IncidentWrapper) HasDbotDirtyFields() bool {
	if o != nil && o.DbotDirtyFields != nil {
		return true
	}

	return false
}

// SetDbotDirtyFields gets a reference to the given []string and assigns it to the DbotDirtyFields field.
func (o *IncidentWrapper) SetDbotDirtyFields(v []string) {
	o.DbotDirtyFields = &v
}

// GetDbotMirrorDirection returns the DbotMirrorDirection field value if set, zero value otherwise.
func (o *IncidentWrapper) GetDbotMirrorDirection() string {
	if o == nil || o.DbotMirrorDirection == nil {
		var ret string
		return ret
	}
	return *o.DbotMirrorDirection
}

// GetDbotMirrorDirectionOk returns a tuple with the DbotMirrorDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetDbotMirrorDirectionOk() (*string, bool) {
	if o == nil || o.DbotMirrorDirection == nil {
		return nil, false
	}
	return o.DbotMirrorDirection, true
}

// HasDbotMirrorDirection returns a boolean if a field has been set.
func (o *IncidentWrapper) HasDbotMirrorDirection() bool {
	if o != nil && o.DbotMirrorDirection != nil {
		return true
	}

	return false
}

// SetDbotMirrorDirection gets a reference to the given string and assigns it to the DbotMirrorDirection field.
func (o *IncidentWrapper) SetDbotMirrorDirection(v string) {
	o.DbotMirrorDirection = &v
}

// GetDbotMirrorId returns the DbotMirrorId field value if set, zero value otherwise.
func (o *IncidentWrapper) GetDbotMirrorId() string {
	if o == nil || o.DbotMirrorId == nil {
		var ret string
		return ret
	}
	return *o.DbotMirrorId
}

// GetDbotMirrorIdOk returns a tuple with the DbotMirrorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetDbotMirrorIdOk() (*string, bool) {
	if o == nil || o.DbotMirrorId == nil {
		return nil, false
	}
	return o.DbotMirrorId, true
}

// HasDbotMirrorId returns a boolean if a field has been set.
func (o *IncidentWrapper) HasDbotMirrorId() bool {
	if o != nil && o.DbotMirrorId != nil {
		return true
	}

	return false
}

// SetDbotMirrorId gets a reference to the given string and assigns it to the DbotMirrorId field.
func (o *IncidentWrapper) SetDbotMirrorId(v string) {
	o.DbotMirrorId = &v
}

// GetDbotMirrorInstance returns the DbotMirrorInstance field value if set, zero value otherwise.
func (o *IncidentWrapper) GetDbotMirrorInstance() string {
	if o == nil || o.DbotMirrorInstance == nil {
		var ret string
		return ret
	}
	return *o.DbotMirrorInstance
}

// GetDbotMirrorInstanceOk returns a tuple with the DbotMirrorInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetDbotMirrorInstanceOk() (*string, bool) {
	if o == nil || o.DbotMirrorInstance == nil {
		return nil, false
	}
	return o.DbotMirrorInstance, true
}

// HasDbotMirrorInstance returns a boolean if a field has been set.
func (o *IncidentWrapper) HasDbotMirrorInstance() bool {
	if o != nil && o.DbotMirrorInstance != nil {
		return true
	}

	return false
}

// SetDbotMirrorInstance gets a reference to the given string and assigns it to the DbotMirrorInstance field.
func (o *IncidentWrapper) SetDbotMirrorInstance(v string) {
	o.DbotMirrorInstance = &v
}

// GetDbotMirrorLastSync returns the DbotMirrorLastSync field value if set, zero value otherwise.
func (o *IncidentWrapper) GetDbotMirrorLastSync() time.Time {
	if o == nil || o.DbotMirrorLastSync == nil {
		var ret time.Time
		return ret
	}
	return *o.DbotMirrorLastSync
}

// GetDbotMirrorLastSyncOk returns a tuple with the DbotMirrorLastSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetDbotMirrorLastSyncOk() (*time.Time, bool) {
	if o == nil || o.DbotMirrorLastSync == nil {
		return nil, false
	}
	return o.DbotMirrorLastSync, true
}

// HasDbotMirrorLastSync returns a boolean if a field has been set.
func (o *IncidentWrapper) HasDbotMirrorLastSync() bool {
	if o != nil && o.DbotMirrorLastSync != nil {
		return true
	}

	return false
}

// SetDbotMirrorLastSync gets a reference to the given time.Time and assigns it to the DbotMirrorLastSync field.
func (o *IncidentWrapper) SetDbotMirrorLastSync(v time.Time) {
	o.DbotMirrorLastSync = &v
}

// GetDbotMirrorTags returns the DbotMirrorTags field value if set, zero value otherwise.
func (o *IncidentWrapper) GetDbotMirrorTags() []string {
	if o == nil || o.DbotMirrorTags == nil {
		var ret []string
		return ret
	}
	return *o.DbotMirrorTags
}

// GetDbotMirrorTagsOk returns a tuple with the DbotMirrorTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetDbotMirrorTagsOk() (*[]string, bool) {
	if o == nil || o.DbotMirrorTags == nil {
		return nil, false
	}
	return o.DbotMirrorTags, true
}

// HasDbotMirrorTags returns a boolean if a field has been set.
func (o *IncidentWrapper) HasDbotMirrorTags() bool {
	if o != nil && o.DbotMirrorTags != nil {
		return true
	}

	return false
}

// SetDbotMirrorTags gets a reference to the given []string and assigns it to the DbotMirrorTags field.
func (o *IncidentWrapper) SetDbotMirrorTags(v []string) {
	o.DbotMirrorTags = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *IncidentWrapper) GetDetails() string {
	if o == nil || o.Details == nil {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetDetailsOk() (*string, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *IncidentWrapper) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *IncidentWrapper) SetDetails(v string) {
	o.Details = &v
}

// GetDroppedCount returns the DroppedCount field value if set, zero value otherwise.
func (o *IncidentWrapper) GetDroppedCount() int64 {
	if o == nil || o.DroppedCount == nil {
		var ret int64
		return ret
	}
	return *o.DroppedCount
}

// GetDroppedCountOk returns a tuple with the DroppedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetDroppedCountOk() (*int64, bool) {
	if o == nil || o.DroppedCount == nil {
		return nil, false
	}
	return o.DroppedCount, true
}

// HasDroppedCount returns a boolean if a field has been set.
func (o *IncidentWrapper) HasDroppedCount() bool {
	if o != nil && o.DroppedCount != nil {
		return true
	}

	return false
}

// SetDroppedCount gets a reference to the given int64 and assigns it to the DroppedCount field.
func (o *IncidentWrapper) SetDroppedCount(v int64) {
	o.DroppedCount = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *IncidentWrapper) GetDueDate() time.Time {
	if o == nil || o.DueDate == nil {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetDueDateOk() (*time.Time, bool) {
	if o == nil || o.DueDate == nil {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *IncidentWrapper) HasDueDate() bool {
	if o != nil && o.DueDate != nil {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *IncidentWrapper) SetDueDate(v time.Time) {
	o.DueDate = &v
}

// GetFeedBased returns the FeedBased field value if set, zero value otherwise.
func (o *IncidentWrapper) GetFeedBased() bool {
	if o == nil || o.FeedBased == nil {
		var ret bool
		return ret
	}
	return *o.FeedBased
}

// GetFeedBasedOk returns a tuple with the FeedBased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetFeedBasedOk() (*bool, bool) {
	if o == nil || o.FeedBased == nil {
		return nil, false
	}
	return o.FeedBased, true
}

// HasFeedBased returns a boolean if a field has been set.
func (o *IncidentWrapper) HasFeedBased() bool {
	if o != nil && o.FeedBased != nil {
		return true
	}

	return false
}

// SetFeedBased gets a reference to the given bool and assigns it to the FeedBased field.
func (o *IncidentWrapper) SetFeedBased(v bool) {
	o.FeedBased = &v
}

// GetHasRole returns the HasRole field value if set, zero value otherwise.
func (o *IncidentWrapper) GetHasRole() bool {
	if o == nil || o.HasRole == nil {
		var ret bool
		return ret
	}
	return *o.HasRole
}

// GetHasRoleOk returns a tuple with the HasRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetHasRoleOk() (*bool, bool) {
	if o == nil || o.HasRole == nil {
		return nil, false
	}
	return o.HasRole, true
}

// HasHasRole returns a boolean if a field has been set.
func (o *IncidentWrapper) HasHasRole() bool {
	if o != nil && o.HasRole != nil {
		return true
	}

	return false
}

// SetHasRole gets a reference to the given bool and assigns it to the HasRole field.
func (o *IncidentWrapper) SetHasRole(v bool) {
	o.HasRole = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *IncidentWrapper) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *IncidentWrapper) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *IncidentWrapper) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IncidentWrapper) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IncidentWrapper) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IncidentWrapper) SetId(v string) {
	o.Id = &v
}

// GetInsights returns the Insights field value if set, zero value otherwise.
func (o *IncidentWrapper) GetInsights() int32 {
	if o == nil || o.Insights == nil {
		var ret int32
		return ret
	}
	return *o.Insights
}

// GetInsightsOk returns a tuple with the Insights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetInsightsOk() (*int32, bool) {
	if o == nil || o.Insights == nil {
		return nil, false
	}
	return o.Insights, true
}

// HasInsights returns a boolean if a field has been set.
func (o *IncidentWrapper) HasInsights() bool {
	if o != nil && o.Insights != nil {
		return true
	}

	return false
}

// SetInsights gets a reference to the given int32 and assigns it to the Insights field.
func (o *IncidentWrapper) SetInsights(v int32) {
	o.Insights = &v
}

// GetInvestigationId returns the InvestigationId field value if set, zero value otherwise.
func (o *IncidentWrapper) GetInvestigationId() string {
	if o == nil || o.InvestigationId == nil {
		var ret string
		return ret
	}
	return *o.InvestigationId
}

// GetInvestigationIdOk returns a tuple with the InvestigationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetInvestigationIdOk() (*string, bool) {
	if o == nil || o.InvestigationId == nil {
		return nil, false
	}
	return o.InvestigationId, true
}

// HasInvestigationId returns a boolean if a field has been set.
func (o *IncidentWrapper) HasInvestigationId() bool {
	if o != nil && o.InvestigationId != nil {
		return true
	}

	return false
}

// SetInvestigationId gets a reference to the given string and assigns it to the InvestigationId field.
func (o *IncidentWrapper) SetInvestigationId(v string) {
	o.InvestigationId = &v
}

// GetIsDebug returns the IsDebug field value if set, zero value otherwise.
func (o *IncidentWrapper) GetIsDebug() bool {
	if o == nil || o.IsDebug == nil {
		var ret bool
		return ret
	}
	return *o.IsDebug
}

// GetIsDebugOk returns a tuple with the IsDebug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetIsDebugOk() (*bool, bool) {
	if o == nil || o.IsDebug == nil {
		return nil, false
	}
	return o.IsDebug, true
}

// HasIsDebug returns a boolean if a field has been set.
func (o *IncidentWrapper) HasIsDebug() bool {
	if o != nil && o.IsDebug != nil {
		return true
	}

	return false
}

// SetIsDebug gets a reference to the given bool and assigns it to the IsDebug field.
func (o *IncidentWrapper) SetIsDebug(v bool) {
	o.IsDebug = &v
}

// GetIsPlayground returns the IsPlayground field value if set, zero value otherwise.
func (o *IncidentWrapper) GetIsPlayground() bool {
	if o == nil || o.IsPlayground == nil {
		var ret bool
		return ret
	}
	return *o.IsPlayground
}

// GetIsPlaygroundOk returns a tuple with the IsPlayground field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetIsPlaygroundOk() (*bool, bool) {
	if o == nil || o.IsPlayground == nil {
		return nil, false
	}
	return o.IsPlayground, true
}

// HasIsPlayground returns a boolean if a field has been set.
func (o *IncidentWrapper) HasIsPlayground() bool {
	if o != nil && o.IsPlayground != nil {
		return true
	}

	return false
}

// SetIsPlayground gets a reference to the given bool and assigns it to the IsPlayground field.
func (o *IncidentWrapper) SetIsPlayground(v bool) {
	o.IsPlayground = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *IncidentWrapper) GetLabels() []Label {
	if o == nil || o.Labels == nil {
		var ret []Label
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetLabelsOk() (*[]Label, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *IncidentWrapper) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []Label and assigns it to the Labels field.
func (o *IncidentWrapper) SetLabels(v []Label) {
	o.Labels = &v
}

// GetLastJobRunTime returns the LastJobRunTime field value if set, zero value otherwise.
func (o *IncidentWrapper) GetLastJobRunTime() time.Time {
	if o == nil || o.LastJobRunTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastJobRunTime
}

// GetLastJobRunTimeOk returns a tuple with the LastJobRunTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetLastJobRunTimeOk() (*time.Time, bool) {
	if o == nil || o.LastJobRunTime == nil {
		return nil, false
	}
	return o.LastJobRunTime, true
}

// HasLastJobRunTime returns a boolean if a field has been set.
func (o *IncidentWrapper) HasLastJobRunTime() bool {
	if o != nil && o.LastJobRunTime != nil {
		return true
	}

	return false
}

// SetLastJobRunTime gets a reference to the given time.Time and assigns it to the LastJobRunTime field.
func (o *IncidentWrapper) SetLastJobRunTime(v time.Time) {
	o.LastJobRunTime = &v
}

// GetLastOpen returns the LastOpen field value if set, zero value otherwise.
func (o *IncidentWrapper) GetLastOpen() time.Time {
	if o == nil || o.LastOpen == nil {
		var ret time.Time
		return ret
	}
	return *o.LastOpen
}

// GetLastOpenOk returns a tuple with the LastOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetLastOpenOk() (*time.Time, bool) {
	if o == nil || o.LastOpen == nil {
		return nil, false
	}
	return o.LastOpen, true
}

// HasLastOpen returns a boolean if a field has been set.
func (o *IncidentWrapper) HasLastOpen() bool {
	if o != nil && o.LastOpen != nil {
		return true
	}

	return false
}

// SetLastOpen gets a reference to the given time.Time and assigns it to the LastOpen field.
func (o *IncidentWrapper) SetLastOpen(v time.Time) {
	o.LastOpen = &v
}

// GetLinkedCount returns the LinkedCount field value if set, zero value otherwise.
func (o *IncidentWrapper) GetLinkedCount() int64 {
	if o == nil || o.LinkedCount == nil {
		var ret int64
		return ret
	}
	return *o.LinkedCount
}

// GetLinkedCountOk returns a tuple with the LinkedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetLinkedCountOk() (*int64, bool) {
	if o == nil || o.LinkedCount == nil {
		return nil, false
	}
	return o.LinkedCount, true
}

// HasLinkedCount returns a boolean if a field has been set.
func (o *IncidentWrapper) HasLinkedCount() bool {
	if o != nil && o.LinkedCount != nil {
		return true
	}

	return false
}

// SetLinkedCount gets a reference to the given int64 and assigns it to the LinkedCount field.
func (o *IncidentWrapper) SetLinkedCount(v int64) {
	o.LinkedCount = &v
}

// GetLinkedIncidents returns the LinkedIncidents field value if set, zero value otherwise.
func (o *IncidentWrapper) GetLinkedIncidents() []string {
	if o == nil || o.LinkedIncidents == nil {
		var ret []string
		return ret
	}
	return *o.LinkedIncidents
}

// GetLinkedIncidentsOk returns a tuple with the LinkedIncidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetLinkedIncidentsOk() (*[]string, bool) {
	if o == nil || o.LinkedIncidents == nil {
		return nil, false
	}
	return o.LinkedIncidents, true
}

// HasLinkedIncidents returns a boolean if a field has been set.
func (o *IncidentWrapper) HasLinkedIncidents() bool {
	if o != nil && o.LinkedIncidents != nil {
		return true
	}

	return false
}

// SetLinkedIncidents gets a reference to the given []string and assigns it to the LinkedIncidents field.
func (o *IncidentWrapper) SetLinkedIncidents(v []string) {
	o.LinkedIncidents = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *IncidentWrapper) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *IncidentWrapper) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *IncidentWrapper) SetModified(v time.Time) {
	o.Modified = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IncidentWrapper) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IncidentWrapper) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IncidentWrapper) SetName(v string) {
	o.Name = &v
}

// GetNotifyTime returns the NotifyTime field value if set, zero value otherwise.
func (o *IncidentWrapper) GetNotifyTime() time.Time {
	if o == nil || o.NotifyTime == nil {
		var ret time.Time
		return ret
	}
	return *o.NotifyTime
}

// GetNotifyTimeOk returns a tuple with the NotifyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetNotifyTimeOk() (*time.Time, bool) {
	if o == nil || o.NotifyTime == nil {
		return nil, false
	}
	return o.NotifyTime, true
}

// HasNotifyTime returns a boolean if a field has been set.
func (o *IncidentWrapper) HasNotifyTime() bool {
	if o != nil && o.NotifyTime != nil {
		return true
	}

	return false
}

// SetNotifyTime gets a reference to the given time.Time and assigns it to the NotifyTime field.
func (o *IncidentWrapper) SetNotifyTime(v time.Time) {
	o.NotifyTime = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *IncidentWrapper) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *IncidentWrapper) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *IncidentWrapper) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetOccurred returns the Occurred field value if set, zero value otherwise.
func (o *IncidentWrapper) GetOccurred() time.Time {
	if o == nil || o.Occurred == nil {
		var ret time.Time
		return ret
	}
	return *o.Occurred
}

// GetOccurredOk returns a tuple with the Occurred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetOccurredOk() (*time.Time, bool) {
	if o == nil || o.Occurred == nil {
		return nil, false
	}
	return o.Occurred, true
}

// HasOccurred returns a boolean if a field has been set.
func (o *IncidentWrapper) HasOccurred() bool {
	if o != nil && o.Occurred != nil {
		return true
	}

	return false
}

// SetOccurred gets a reference to the given time.Time and assigns it to the Occurred field.
func (o *IncidentWrapper) SetOccurred(v time.Time) {
	o.Occurred = &v
}

// GetOpenDuration returns the OpenDuration field value if set, zero value otherwise.
func (o *IncidentWrapper) GetOpenDuration() int64 {
	if o == nil || o.OpenDuration == nil {
		var ret int64
		return ret
	}
	return *o.OpenDuration
}

// GetOpenDurationOk returns a tuple with the OpenDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetOpenDurationOk() (*int64, bool) {
	if o == nil || o.OpenDuration == nil {
		return nil, false
	}
	return o.OpenDuration, true
}

// HasOpenDuration returns a boolean if a field has been set.
func (o *IncidentWrapper) HasOpenDuration() bool {
	if o != nil && o.OpenDuration != nil {
		return true
	}

	return false
}

// SetOpenDuration gets a reference to the given int64 and assigns it to the OpenDuration field.
func (o *IncidentWrapper) SetOpenDuration(v int64) {
	o.OpenDuration = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *IncidentWrapper) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *IncidentWrapper) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *IncidentWrapper) SetOwner(v string) {
	o.Owner = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *IncidentWrapper) GetParent() string {
	if o == nil || o.Parent == nil {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetParentOk() (*string, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *IncidentWrapper) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *IncidentWrapper) SetParent(v string) {
	o.Parent = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *IncidentWrapper) GetPhase() string {
	if o == nil || o.Phase == nil {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetPhaseOk() (*string, bool) {
	if o == nil || o.Phase == nil {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *IncidentWrapper) HasPhase() bool {
	if o != nil && o.Phase != nil {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *IncidentWrapper) SetPhase(v string) {
	o.Phase = &v
}

// GetPlaybookId returns the PlaybookId field value if set, zero value otherwise.
func (o *IncidentWrapper) GetPlaybookId() string {
	if o == nil || o.PlaybookId == nil {
		var ret string
		return ret
	}
	return *o.PlaybookId
}

// GetPlaybookIdOk returns a tuple with the PlaybookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetPlaybookIdOk() (*string, bool) {
	if o == nil || o.PlaybookId == nil {
		return nil, false
	}
	return o.PlaybookId, true
}

// HasPlaybookId returns a boolean if a field has been set.
func (o *IncidentWrapper) HasPlaybookId() bool {
	if o != nil && o.PlaybookId != nil {
		return true
	}

	return false
}

// SetPlaybookId gets a reference to the given string and assigns it to the PlaybookId field.
func (o *IncidentWrapper) SetPlaybookId(v string) {
	o.PlaybookId = &v
}

// GetPreviousAllRead returns the PreviousAllRead field value if set, zero value otherwise.
func (o *IncidentWrapper) GetPreviousAllRead() bool {
	if o == nil || o.PreviousAllRead == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllRead
}

// GetPreviousAllReadOk returns a tuple with the PreviousAllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetPreviousAllReadOk() (*bool, bool) {
	if o == nil || o.PreviousAllRead == nil {
		return nil, false
	}
	return o.PreviousAllRead, true
}

// HasPreviousAllRead returns a boolean if a field has been set.
func (o *IncidentWrapper) HasPreviousAllRead() bool {
	if o != nil && o.PreviousAllRead != nil {
		return true
	}

	return false
}

// SetPreviousAllRead gets a reference to the given bool and assigns it to the PreviousAllRead field.
func (o *IncidentWrapper) SetPreviousAllRead(v bool) {
	o.PreviousAllRead = &v
}

// GetPreviousAllReadWrite returns the PreviousAllReadWrite field value if set, zero value otherwise.
func (o *IncidentWrapper) GetPreviousAllReadWrite() bool {
	if o == nil || o.PreviousAllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllReadWrite
}

// GetPreviousAllReadWriteOk returns a tuple with the PreviousAllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetPreviousAllReadWriteOk() (*bool, bool) {
	if o == nil || o.PreviousAllReadWrite == nil {
		return nil, false
	}
	return o.PreviousAllReadWrite, true
}

// HasPreviousAllReadWrite returns a boolean if a field has been set.
func (o *IncidentWrapper) HasPreviousAllReadWrite() bool {
	if o != nil && o.PreviousAllReadWrite != nil {
		return true
	}

	return false
}

// SetPreviousAllReadWrite gets a reference to the given bool and assigns it to the PreviousAllReadWrite field.
func (o *IncidentWrapper) SetPreviousAllReadWrite(v bool) {
	o.PreviousAllReadWrite = &v
}

// GetPreviousRoles returns the PreviousRoles field value if set, zero value otherwise.
func (o *IncidentWrapper) GetPreviousRoles() []string {
	if o == nil || o.PreviousRoles == nil {
		var ret []string
		return ret
	}
	return *o.PreviousRoles
}

// GetPreviousRolesOk returns a tuple with the PreviousRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetPreviousRolesOk() (*[]string, bool) {
	if o == nil || o.PreviousRoles == nil {
		return nil, false
	}
	return o.PreviousRoles, true
}

// HasPreviousRoles returns a boolean if a field has been set.
func (o *IncidentWrapper) HasPreviousRoles() bool {
	if o != nil && o.PreviousRoles != nil {
		return true
	}

	return false
}

// SetPreviousRoles gets a reference to the given []string and assigns it to the PreviousRoles field.
func (o *IncidentWrapper) SetPreviousRoles(v []string) {
	o.PreviousRoles = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *IncidentWrapper) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *IncidentWrapper) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *IncidentWrapper) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetRawCategory returns the RawCategory field value if set, zero value otherwise.
func (o *IncidentWrapper) GetRawCategory() string {
	if o == nil || o.RawCategory == nil {
		var ret string
		return ret
	}
	return *o.RawCategory
}

// GetRawCategoryOk returns a tuple with the RawCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetRawCategoryOk() (*string, bool) {
	if o == nil || o.RawCategory == nil {
		return nil, false
	}
	return o.RawCategory, true
}

// HasRawCategory returns a boolean if a field has been set.
func (o *IncidentWrapper) HasRawCategory() bool {
	if o != nil && o.RawCategory != nil {
		return true
	}

	return false
}

// SetRawCategory gets a reference to the given string and assigns it to the RawCategory field.
func (o *IncidentWrapper) SetRawCategory(v string) {
	o.RawCategory = &v
}

// GetRawCloseReason returns the RawCloseReason field value if set, zero value otherwise.
func (o *IncidentWrapper) GetRawCloseReason() string {
	if o == nil || o.RawCloseReason == nil {
		var ret string
		return ret
	}
	return *o.RawCloseReason
}

// GetRawCloseReasonOk returns a tuple with the RawCloseReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetRawCloseReasonOk() (*string, bool) {
	if o == nil || o.RawCloseReason == nil {
		return nil, false
	}
	return o.RawCloseReason, true
}

// HasRawCloseReason returns a boolean if a field has been set.
func (o *IncidentWrapper) HasRawCloseReason() bool {
	if o != nil && o.RawCloseReason != nil {
		return true
	}

	return false
}

// SetRawCloseReason gets a reference to the given string and assigns it to the RawCloseReason field.
func (o *IncidentWrapper) SetRawCloseReason(v string) {
	o.RawCloseReason = &v
}

// GetRawJSON returns the RawJSON field value if set, zero value otherwise.
func (o *IncidentWrapper) GetRawJSON() string {
	if o == nil || o.RawJSON == nil {
		var ret string
		return ret
	}
	return *o.RawJSON
}

// GetRawJSONOk returns a tuple with the RawJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetRawJSONOk() (*string, bool) {
	if o == nil || o.RawJSON == nil {
		return nil, false
	}
	return o.RawJSON, true
}

// HasRawJSON returns a boolean if a field has been set.
func (o *IncidentWrapper) HasRawJSON() bool {
	if o != nil && o.RawJSON != nil {
		return true
	}

	return false
}

// SetRawJSON gets a reference to the given string and assigns it to the RawJSON field.
func (o *IncidentWrapper) SetRawJSON(v string) {
	o.RawJSON = &v
}

// GetRawName returns the RawName field value if set, zero value otherwise.
func (o *IncidentWrapper) GetRawName() string {
	if o == nil || o.RawName == nil {
		var ret string
		return ret
	}
	return *o.RawName
}

// GetRawNameOk returns a tuple with the RawName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetRawNameOk() (*string, bool) {
	if o == nil || o.RawName == nil {
		return nil, false
	}
	return o.RawName, true
}

// HasRawName returns a boolean if a field has been set.
func (o *IncidentWrapper) HasRawName() bool {
	if o != nil && o.RawName != nil {
		return true
	}

	return false
}

// SetRawName gets a reference to the given string and assigns it to the RawName field.
func (o *IncidentWrapper) SetRawName(v string) {
	o.RawName = &v
}

// GetRawPhase returns the RawPhase field value if set, zero value otherwise.
func (o *IncidentWrapper) GetRawPhase() string {
	if o == nil || o.RawPhase == nil {
		var ret string
		return ret
	}
	return *o.RawPhase
}

// GetRawPhaseOk returns a tuple with the RawPhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetRawPhaseOk() (*string, bool) {
	if o == nil || o.RawPhase == nil {
		return nil, false
	}
	return o.RawPhase, true
}

// HasRawPhase returns a boolean if a field has been set.
func (o *IncidentWrapper) HasRawPhase() bool {
	if o != nil && o.RawPhase != nil {
		return true
	}

	return false
}

// SetRawPhase gets a reference to the given string and assigns it to the RawPhase field.
func (o *IncidentWrapper) SetRawPhase(v string) {
	o.RawPhase = &v
}

// GetRawType returns the RawType field value if set, zero value otherwise.
func (o *IncidentWrapper) GetRawType() string {
	if o == nil || o.RawType == nil {
		var ret string
		return ret
	}
	return *o.RawType
}

// GetRawTypeOk returns a tuple with the RawType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetRawTypeOk() (*string, bool) {
	if o == nil || o.RawType == nil {
		return nil, false
	}
	return o.RawType, true
}

// HasRawType returns a boolean if a field has been set.
func (o *IncidentWrapper) HasRawType() bool {
	if o != nil && o.RawType != nil {
		return true
	}

	return false
}

// SetRawType gets a reference to the given string and assigns it to the RawType field.
func (o *IncidentWrapper) SetRawType(v string) {
	o.RawType = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *IncidentWrapper) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *IncidentWrapper) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *IncidentWrapper) SetReason(v string) {
	o.Reason = &v
}

// GetReminder returns the Reminder field value if set, zero value otherwise.
func (o *IncidentWrapper) GetReminder() time.Time {
	if o == nil || o.Reminder == nil {
		var ret time.Time
		return ret
	}
	return *o.Reminder
}

// GetReminderOk returns a tuple with the Reminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetReminderOk() (*time.Time, bool) {
	if o == nil || o.Reminder == nil {
		return nil, false
	}
	return o.Reminder, true
}

// HasReminder returns a boolean if a field has been set.
func (o *IncidentWrapper) HasReminder() bool {
	if o != nil && o.Reminder != nil {
		return true
	}

	return false
}

// SetReminder gets a reference to the given time.Time and assigns it to the Reminder field.
func (o *IncidentWrapper) SetReminder(v time.Time) {
	o.Reminder = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *IncidentWrapper) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *IncidentWrapper) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *IncidentWrapper) SetRoles(v []string) {
	o.Roles = &v
}

// GetRunStatus returns the RunStatus field value if set, zero value otherwise.
func (o *IncidentWrapper) GetRunStatus() string {
	if o == nil || o.RunStatus == nil {
		var ret string
		return ret
	}
	return *o.RunStatus
}

// GetRunStatusOk returns a tuple with the RunStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetRunStatusOk() (*string, bool) {
	if o == nil || o.RunStatus == nil {
		return nil, false
	}
	return o.RunStatus, true
}

// HasRunStatus returns a boolean if a field has been set.
func (o *IncidentWrapper) HasRunStatus() bool {
	if o != nil && o.RunStatus != nil {
		return true
	}

	return false
}

// SetRunStatus gets a reference to the given string and assigns it to the RunStatus field.
func (o *IncidentWrapper) SetRunStatus(v string) {
	o.RunStatus = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *IncidentWrapper) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *IncidentWrapper) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *IncidentWrapper) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *IncidentWrapper) GetSeverity() float64 {
	if o == nil || o.Severity == nil {
		var ret float64
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetSeverityOk() (*float64, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *IncidentWrapper) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given float64 and assigns it to the Severity field.
func (o *IncidentWrapper) SetSeverity(v float64) {
	o.Severity = &v
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *IncidentWrapper) GetSla() float64 {
	if o == nil || o.Sla == nil {
		var ret float64
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetSlaOk() (*float64, bool) {
	if o == nil || o.Sla == nil {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *IncidentWrapper) HasSla() bool {
	if o != nil && o.Sla != nil {
		return true
	}

	return false
}

// SetSla gets a reference to the given float64 and assigns it to the Sla field.
func (o *IncidentWrapper) SetSla(v float64) {
	o.Sla = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *IncidentWrapper) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *IncidentWrapper) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *IncidentWrapper) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetSourceBrand returns the SourceBrand field value if set, zero value otherwise.
func (o *IncidentWrapper) GetSourceBrand() string {
	if o == nil || o.SourceBrand == nil {
		var ret string
		return ret
	}
	return *o.SourceBrand
}

// GetSourceBrandOk returns a tuple with the SourceBrand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetSourceBrandOk() (*string, bool) {
	if o == nil || o.SourceBrand == nil {
		return nil, false
	}
	return o.SourceBrand, true
}

// HasSourceBrand returns a boolean if a field has been set.
func (o *IncidentWrapper) HasSourceBrand() bool {
	if o != nil && o.SourceBrand != nil {
		return true
	}

	return false
}

// SetSourceBrand gets a reference to the given string and assigns it to the SourceBrand field.
func (o *IncidentWrapper) SetSourceBrand(v string) {
	o.SourceBrand = &v
}

// GetSourceInstance returns the SourceInstance field value if set, zero value otherwise.
func (o *IncidentWrapper) GetSourceInstance() string {
	if o == nil || o.SourceInstance == nil {
		var ret string
		return ret
	}
	return *o.SourceInstance
}

// GetSourceInstanceOk returns a tuple with the SourceInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetSourceInstanceOk() (*string, bool) {
	if o == nil || o.SourceInstance == nil {
		return nil, false
	}
	return o.SourceInstance, true
}

// HasSourceInstance returns a boolean if a field has been set.
func (o *IncidentWrapper) HasSourceInstance() bool {
	if o != nil && o.SourceInstance != nil {
		return true
	}

	return false
}

// SetSourceInstance gets a reference to the given string and assigns it to the SourceInstance field.
func (o *IncidentWrapper) SetSourceInstance(v string) {
	o.SourceInstance = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IncidentWrapper) GetStatus() float64 {
	if o == nil || o.Status == nil {
		var ret float64
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetStatusOk() (*float64, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IncidentWrapper) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given float64 and assigns it to the Status field.
func (o *IncidentWrapper) SetStatus(v float64) {
	o.Status = &v
}

// GetTodoTaskIds returns the TodoTaskIds field value if set, zero value otherwise.
func (o *IncidentWrapper) GetTodoTaskIds() []string {
	if o == nil || o.TodoTaskIds == nil {
		var ret []string
		return ret
	}
	return *o.TodoTaskIds
}

// GetTodoTaskIdsOk returns a tuple with the TodoTaskIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetTodoTaskIdsOk() (*[]string, bool) {
	if o == nil || o.TodoTaskIds == nil {
		return nil, false
	}
	return o.TodoTaskIds, true
}

// HasTodoTaskIds returns a boolean if a field has been set.
func (o *IncidentWrapper) HasTodoTaskIds() bool {
	if o != nil && o.TodoTaskIds != nil {
		return true
	}

	return false
}

// SetTodoTaskIds gets a reference to the given []string and assigns it to the TodoTaskIds field.
func (o *IncidentWrapper) SetTodoTaskIds(v []string) {
	o.TodoTaskIds = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IncidentWrapper) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IncidentWrapper) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IncidentWrapper) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IncidentWrapper) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IncidentWrapper) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *IncidentWrapper) SetVersion(v int64) {
	o.Version = &v
}

// GetXsoarHasReadOnlyRole returns the XsoarHasReadOnlyRole field value if set, zero value otherwise.
func (o *IncidentWrapper) GetXsoarHasReadOnlyRole() bool {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		var ret bool
		return ret
	}
	return *o.XsoarHasReadOnlyRole
}

// GetXsoarHasReadOnlyRoleOk returns a tuple with the XsoarHasReadOnlyRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetXsoarHasReadOnlyRoleOk() (*bool, bool) {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		return nil, false
	}
	return o.XsoarHasReadOnlyRole, true
}

// HasXsoarHasReadOnlyRole returns a boolean if a field has been set.
func (o *IncidentWrapper) HasXsoarHasReadOnlyRole() bool {
	if o != nil && o.XsoarHasReadOnlyRole != nil {
		return true
	}

	return false
}

// SetXsoarHasReadOnlyRole gets a reference to the given bool and assigns it to the XsoarHasReadOnlyRole field.
func (o *IncidentWrapper) SetXsoarHasReadOnlyRole(v bool) {
	o.XsoarHasReadOnlyRole = &v
}

// GetXsoarPreviousReadOnlyRoles returns the XsoarPreviousReadOnlyRoles field value if set, zero value otherwise.
func (o *IncidentWrapper) GetXsoarPreviousReadOnlyRoles() []string {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarPreviousReadOnlyRoles
}

// GetXsoarPreviousReadOnlyRolesOk returns a tuple with the XsoarPreviousReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetXsoarPreviousReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarPreviousReadOnlyRoles, true
}

// HasXsoarPreviousReadOnlyRoles returns a boolean if a field has been set.
func (o *IncidentWrapper) HasXsoarPreviousReadOnlyRoles() bool {
	if o != nil && o.XsoarPreviousReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarPreviousReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarPreviousReadOnlyRoles field.
func (o *IncidentWrapper) SetXsoarPreviousReadOnlyRoles(v []string) {
	o.XsoarPreviousReadOnlyRoles = &v
}

// GetXsoarReadOnlyRoles returns the XsoarReadOnlyRoles field value if set, zero value otherwise.
func (o *IncidentWrapper) GetXsoarReadOnlyRoles() []string {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarReadOnlyRoles
}

// GetXsoarReadOnlyRolesOk returns a tuple with the XsoarReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentWrapper) GetXsoarReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarReadOnlyRoles, true
}

// HasXsoarReadOnlyRoles returns a boolean if a field has been set.
func (o *IncidentWrapper) HasXsoarReadOnlyRoles() bool {
	if o != nil && o.XsoarReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarReadOnlyRoles field.
func (o *IncidentWrapper) SetXsoarReadOnlyRoles(v []string) {
	o.XsoarReadOnlyRoles = &v
}

func (o IncidentWrapper) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ShardID != nil {
		toSerialize["ShardID"] = o.ShardID
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.Activated != nil {
		toSerialize["activated"] = o.Activated
	}
	if o.ActivatingingUserId != nil {
		toSerialize["activatingingUserId"] = o.ActivatingingUserId
	}
	if o.AllRead != nil {
		toSerialize["allRead"] = o.AllRead
	}
	if o.AllReadWrite != nil {
		toSerialize["allReadWrite"] = o.AllReadWrite
	}
	if o.Attachment != nil {
		toSerialize["attachment"] = o.Attachment
	}
	if o.Autime != nil {
		toSerialize["autime"] = o.Autime
	}
	if o.Canvases != nil {
		toSerialize["canvases"] = o.Canvases
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.ChangeStatus != nil {
		toSerialize["changeStatus"] = o.ChangeStatus
	}
	if o.CloseNotes != nil {
		toSerialize["closeNotes"] = o.CloseNotes
	}
	if o.CloseReason != nil {
		toSerialize["closeReason"] = o.CloseReason
	}
	if o.Closed != nil {
		toSerialize["closed"] = o.Closed
	}
	if o.ClosingUserId != nil {
		toSerialize["closingUserId"] = o.ClosingUserId
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.DbotCreatedBy != nil {
		toSerialize["dbotCreatedBy"] = o.DbotCreatedBy
	}
	if o.DbotCurrentDirtyFields != nil {
		toSerialize["dbotCurrentDirtyFields"] = o.DbotCurrentDirtyFields
	}
	if o.DbotDirtyFields != nil {
		toSerialize["dbotDirtyFields"] = o.DbotDirtyFields
	}
	if o.DbotMirrorDirection != nil {
		toSerialize["dbotMirrorDirection"] = o.DbotMirrorDirection
	}
	if o.DbotMirrorId != nil {
		toSerialize["dbotMirrorId"] = o.DbotMirrorId
	}
	if o.DbotMirrorInstance != nil {
		toSerialize["dbotMirrorInstance"] = o.DbotMirrorInstance
	}
	if o.DbotMirrorLastSync != nil {
		toSerialize["dbotMirrorLastSync"] = o.DbotMirrorLastSync
	}
	if o.DbotMirrorTags != nil {
		toSerialize["dbotMirrorTags"] = o.DbotMirrorTags
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	if o.DroppedCount != nil {
		toSerialize["droppedCount"] = o.DroppedCount
	}
	if o.DueDate != nil {
		toSerialize["dueDate"] = o.DueDate
	}
	if o.FeedBased != nil {
		toSerialize["feedBased"] = o.FeedBased
	}
	if o.HasRole != nil {
		toSerialize["hasRole"] = o.HasRole
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Insights != nil {
		toSerialize["insights"] = o.Insights
	}
	if o.InvestigationId != nil {
		toSerialize["investigationId"] = o.InvestigationId
	}
	if o.IsDebug != nil {
		toSerialize["isDebug"] = o.IsDebug
	}
	if o.IsPlayground != nil {
		toSerialize["isPlayground"] = o.IsPlayground
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.LastJobRunTime != nil {
		toSerialize["lastJobRunTime"] = o.LastJobRunTime
	}
	if o.LastOpen != nil {
		toSerialize["lastOpen"] = o.LastOpen
	}
	if o.LinkedCount != nil {
		toSerialize["linkedCount"] = o.LinkedCount
	}
	if o.LinkedIncidents != nil {
		toSerialize["linkedIncidents"] = o.LinkedIncidents
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NotifyTime != nil {
		toSerialize["notifyTime"] = o.NotifyTime
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.Occurred != nil {
		toSerialize["occurred"] = o.Occurred
	}
	if o.OpenDuration != nil {
		toSerialize["openDuration"] = o.OpenDuration
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.Phase != nil {
		toSerialize["phase"] = o.Phase
	}
	if o.PlaybookId != nil {
		toSerialize["playbookId"] = o.PlaybookId
	}
	if o.PreviousAllRead != nil {
		toSerialize["previousAllRead"] = o.PreviousAllRead
	}
	if o.PreviousAllReadWrite != nil {
		toSerialize["previousAllReadWrite"] = o.PreviousAllReadWrite
	}
	if o.PreviousRoles != nil {
		toSerialize["previousRoles"] = o.PreviousRoles
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.RawCategory != nil {
		toSerialize["rawCategory"] = o.RawCategory
	}
	if o.RawCloseReason != nil {
		toSerialize["rawCloseReason"] = o.RawCloseReason
	}
	if o.RawJSON != nil {
		toSerialize["rawJSON"] = o.RawJSON
	}
	if o.RawName != nil {
		toSerialize["rawName"] = o.RawName
	}
	if o.RawPhase != nil {
		toSerialize["rawPhase"] = o.RawPhase
	}
	if o.RawType != nil {
		toSerialize["rawType"] = o.RawType
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Reminder != nil {
		toSerialize["reminder"] = o.Reminder
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.RunStatus != nil {
		toSerialize["runStatus"] = o.RunStatus
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.Sla != nil {
		toSerialize["sla"] = o.Sla
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.SourceBrand != nil {
		toSerialize["sourceBrand"] = o.SourceBrand
	}
	if o.SourceInstance != nil {
		toSerialize["sourceInstance"] = o.SourceInstance
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.TodoTaskIds != nil {
		toSerialize["todoTaskIds"] = o.TodoTaskIds
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.XsoarHasReadOnlyRole != nil {
		toSerialize["xsoarHasReadOnlyRole"] = o.XsoarHasReadOnlyRole
	}
	if o.XsoarPreviousReadOnlyRoles != nil {
		toSerialize["xsoarPreviousReadOnlyRoles"] = o.XsoarPreviousReadOnlyRoles
	}
	if o.XsoarReadOnlyRoles != nil {
		toSerialize["xsoarReadOnlyRoles"] = o.XsoarReadOnlyRoles
	}
	return json.Marshal(toSerialize)
}

type NullableIncidentWrapper struct {
	value *IncidentWrapper
	isSet bool
}

func (v NullableIncidentWrapper) Get() *IncidentWrapper {
	return v.value
}

func (v *NullableIncidentWrapper) Set(val *IncidentWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentWrapper(val *IncidentWrapper) *NullableIncidentWrapper {
	return &NullableIncidentWrapper{value: val, isSet: true}
}

func (v NullableIncidentWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
