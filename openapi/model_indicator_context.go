/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IndicatorContext struct for IndicatorContext
type IndicatorContext struct {
	EntryId         *string    `json:"entryId,omitempty"`
	Indicator       *IocObject `json:"indicator,omitempty"`
	InvestigationId *string    `json:"investigationId,omitempty"`
	Manually        *bool      `json:"manually,omitempty"`
	SeenNow         *bool      `json:"seenNow,omitempty"`
}

// NewIndicatorContext instantiates a new IndicatorContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndicatorContext() *IndicatorContext {
	this := IndicatorContext{}
	return &this
}

// NewIndicatorContextWithDefaults instantiates a new IndicatorContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndicatorContextWithDefaults() *IndicatorContext {
	this := IndicatorContext{}
	return &this
}

// GetEntryId returns the EntryId field value if set, zero value otherwise.
func (o *IndicatorContext) GetEntryId() string {
	if o == nil || o.EntryId == nil {
		var ret string
		return ret
	}
	return *o.EntryId
}

// GetEntryIdOk returns a tuple with the EntryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorContext) GetEntryIdOk() (*string, bool) {
	if o == nil || o.EntryId == nil {
		return nil, false
	}
	return o.EntryId, true
}

// HasEntryId returns a boolean if a field has been set.
func (o *IndicatorContext) HasEntryId() bool {
	if o != nil && o.EntryId != nil {
		return true
	}

	return false
}

// SetEntryId gets a reference to the given string and assigns it to the EntryId field.
func (o *IndicatorContext) SetEntryId(v string) {
	o.EntryId = &v
}

// GetIndicator returns the Indicator field value if set, zero value otherwise.
func (o *IndicatorContext) GetIndicator() IocObject {
	if o == nil || o.Indicator == nil {
		var ret IocObject
		return ret
	}
	return *o.Indicator
}

// GetIndicatorOk returns a tuple with the Indicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorContext) GetIndicatorOk() (*IocObject, bool) {
	if o == nil || o.Indicator == nil {
		return nil, false
	}
	return o.Indicator, true
}

// HasIndicator returns a boolean if a field has been set.
func (o *IndicatorContext) HasIndicator() bool {
	if o != nil && o.Indicator != nil {
		return true
	}

	return false
}

// SetIndicator gets a reference to the given IocObject and assigns it to the Indicator field.
func (o *IndicatorContext) SetIndicator(v IocObject) {
	o.Indicator = &v
}

// GetInvestigationId returns the InvestigationId field value if set, zero value otherwise.
func (o *IndicatorContext) GetInvestigationId() string {
	if o == nil || o.InvestigationId == nil {
		var ret string
		return ret
	}
	return *o.InvestigationId
}

// GetInvestigationIdOk returns a tuple with the InvestigationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorContext) GetInvestigationIdOk() (*string, bool) {
	if o == nil || o.InvestigationId == nil {
		return nil, false
	}
	return o.InvestigationId, true
}

// HasInvestigationId returns a boolean if a field has been set.
func (o *IndicatorContext) HasInvestigationId() bool {
	if o != nil && o.InvestigationId != nil {
		return true
	}

	return false
}

// SetInvestigationId gets a reference to the given string and assigns it to the InvestigationId field.
func (o *IndicatorContext) SetInvestigationId(v string) {
	o.InvestigationId = &v
}

// GetManually returns the Manually field value if set, zero value otherwise.
func (o *IndicatorContext) GetManually() bool {
	if o == nil || o.Manually == nil {
		var ret bool
		return ret
	}
	return *o.Manually
}

// GetManuallyOk returns a tuple with the Manually field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorContext) GetManuallyOk() (*bool, bool) {
	if o == nil || o.Manually == nil {
		return nil, false
	}
	return o.Manually, true
}

// HasManually returns a boolean if a field has been set.
func (o *IndicatorContext) HasManually() bool {
	if o != nil && o.Manually != nil {
		return true
	}

	return false
}

// SetManually gets a reference to the given bool and assigns it to the Manually field.
func (o *IndicatorContext) SetManually(v bool) {
	o.Manually = &v
}

// GetSeenNow returns the SeenNow field value if set, zero value otherwise.
func (o *IndicatorContext) GetSeenNow() bool {
	if o == nil || o.SeenNow == nil {
		var ret bool
		return ret
	}
	return *o.SeenNow
}

// GetSeenNowOk returns a tuple with the SeenNow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorContext) GetSeenNowOk() (*bool, bool) {
	if o == nil || o.SeenNow == nil {
		return nil, false
	}
	return o.SeenNow, true
}

// HasSeenNow returns a boolean if a field has been set.
func (o *IndicatorContext) HasSeenNow() bool {
	if o != nil && o.SeenNow != nil {
		return true
	}

	return false
}

// SetSeenNow gets a reference to the given bool and assigns it to the SeenNow field.
func (o *IndicatorContext) SetSeenNow(v bool) {
	o.SeenNow = &v
}

func (o IndicatorContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntryId != nil {
		toSerialize["entryId"] = o.EntryId
	}
	if o.Indicator != nil {
		toSerialize["indicator"] = o.Indicator
	}
	if o.InvestigationId != nil {
		toSerialize["investigationId"] = o.InvestigationId
	}
	if o.Manually != nil {
		toSerialize["manually"] = o.Manually
	}
	if o.SeenNow != nil {
		toSerialize["seenNow"] = o.SeenNow
	}
	return json.Marshal(toSerialize)
}

type NullableIndicatorContext struct {
	value *IndicatorContext
	isSet bool
}

func (v NullableIndicatorContext) Get() *IndicatorContext {
	return v.value
}

func (v *NullableIndicatorContext) Set(val *IndicatorContext) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorContext) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorContext(val *IndicatorContext) *NullableIndicatorContext {
	return &NullableIndicatorContext{value: val, isSet: true}
}

func (v NullableIndicatorContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
