/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Info Info - holds all workers status
type Info struct {
	Available               *float64       `json:"Available,omitempty"`
	BufferSpace             *int64         `json:"BufferSpace,omitempty"`
	Busy                    *int64         `json:"Busy,omitempty"`
	HighPriorityAvailable   *float64       `json:"HighPriorityAvailable,omitempty"`
	HighPriorityBufferSpace *int64         `json:"HighPriorityBufferSpace,omitempty"`
	Name                    *string        `json:"Name,omitempty"`
	ProcessInfo             *[]ProcessInfo `json:"ProcessInfo,omitempty"`
	ShouldStop              *bool          `json:"ShouldStop,omitempty"`
	Total                   *int64         `json:"Total,omitempty"`
}

// NewInfo instantiates a new Info object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfo() *Info {
	this := Info{}
	return &this
}

// NewInfoWithDefaults instantiates a new Info object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoWithDefaults() *Info {
	this := Info{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *Info) GetAvailable() float64 {
	if o == nil || o.Available == nil {
		var ret float64
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Info) GetAvailableOk() (*float64, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *Info) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given float64 and assigns it to the Available field.
func (o *Info) SetAvailable(v float64) {
	o.Available = &v
}

// GetBufferSpace returns the BufferSpace field value if set, zero value otherwise.
func (o *Info) GetBufferSpace() int64 {
	if o == nil || o.BufferSpace == nil {
		var ret int64
		return ret
	}
	return *o.BufferSpace
}

// GetBufferSpaceOk returns a tuple with the BufferSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Info) GetBufferSpaceOk() (*int64, bool) {
	if o == nil || o.BufferSpace == nil {
		return nil, false
	}
	return o.BufferSpace, true
}

// HasBufferSpace returns a boolean if a field has been set.
func (o *Info) HasBufferSpace() bool {
	if o != nil && o.BufferSpace != nil {
		return true
	}

	return false
}

// SetBufferSpace gets a reference to the given int64 and assigns it to the BufferSpace field.
func (o *Info) SetBufferSpace(v int64) {
	o.BufferSpace = &v
}

// GetBusy returns the Busy field value if set, zero value otherwise.
func (o *Info) GetBusy() int64 {
	if o == nil || o.Busy == nil {
		var ret int64
		return ret
	}
	return *o.Busy
}

// GetBusyOk returns a tuple with the Busy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Info) GetBusyOk() (*int64, bool) {
	if o == nil || o.Busy == nil {
		return nil, false
	}
	return o.Busy, true
}

// HasBusy returns a boolean if a field has been set.
func (o *Info) HasBusy() bool {
	if o != nil && o.Busy != nil {
		return true
	}

	return false
}

// SetBusy gets a reference to the given int64 and assigns it to the Busy field.
func (o *Info) SetBusy(v int64) {
	o.Busy = &v
}

// GetHighPriorityAvailable returns the HighPriorityAvailable field value if set, zero value otherwise.
func (o *Info) GetHighPriorityAvailable() float64 {
	if o == nil || o.HighPriorityAvailable == nil {
		var ret float64
		return ret
	}
	return *o.HighPriorityAvailable
}

// GetHighPriorityAvailableOk returns a tuple with the HighPriorityAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Info) GetHighPriorityAvailableOk() (*float64, bool) {
	if o == nil || o.HighPriorityAvailable == nil {
		return nil, false
	}
	return o.HighPriorityAvailable, true
}

// HasHighPriorityAvailable returns a boolean if a field has been set.
func (o *Info) HasHighPriorityAvailable() bool {
	if o != nil && o.HighPriorityAvailable != nil {
		return true
	}

	return false
}

// SetHighPriorityAvailable gets a reference to the given float64 and assigns it to the HighPriorityAvailable field.
func (o *Info) SetHighPriorityAvailable(v float64) {
	o.HighPriorityAvailable = &v
}

// GetHighPriorityBufferSpace returns the HighPriorityBufferSpace field value if set, zero value otherwise.
func (o *Info) GetHighPriorityBufferSpace() int64 {
	if o == nil || o.HighPriorityBufferSpace == nil {
		var ret int64
		return ret
	}
	return *o.HighPriorityBufferSpace
}

// GetHighPriorityBufferSpaceOk returns a tuple with the HighPriorityBufferSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Info) GetHighPriorityBufferSpaceOk() (*int64, bool) {
	if o == nil || o.HighPriorityBufferSpace == nil {
		return nil, false
	}
	return o.HighPriorityBufferSpace, true
}

// HasHighPriorityBufferSpace returns a boolean if a field has been set.
func (o *Info) HasHighPriorityBufferSpace() bool {
	if o != nil && o.HighPriorityBufferSpace != nil {
		return true
	}

	return false
}

// SetHighPriorityBufferSpace gets a reference to the given int64 and assigns it to the HighPriorityBufferSpace field.
func (o *Info) SetHighPriorityBufferSpace(v int64) {
	o.HighPriorityBufferSpace = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Info) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Info) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Info) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Info) SetName(v string) {
	o.Name = &v
}

// GetProcessInfo returns the ProcessInfo field value if set, zero value otherwise.
func (o *Info) GetProcessInfo() []ProcessInfo {
	if o == nil || o.ProcessInfo == nil {
		var ret []ProcessInfo
		return ret
	}
	return *o.ProcessInfo
}

// GetProcessInfoOk returns a tuple with the ProcessInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Info) GetProcessInfoOk() (*[]ProcessInfo, bool) {
	if o == nil || o.ProcessInfo == nil {
		return nil, false
	}
	return o.ProcessInfo, true
}

// HasProcessInfo returns a boolean if a field has been set.
func (o *Info) HasProcessInfo() bool {
	if o != nil && o.ProcessInfo != nil {
		return true
	}

	return false
}

// SetProcessInfo gets a reference to the given []ProcessInfo and assigns it to the ProcessInfo field.
func (o *Info) SetProcessInfo(v []ProcessInfo) {
	o.ProcessInfo = &v
}

// GetShouldStop returns the ShouldStop field value if set, zero value otherwise.
func (o *Info) GetShouldStop() bool {
	if o == nil || o.ShouldStop == nil {
		var ret bool
		return ret
	}
	return *o.ShouldStop
}

// GetShouldStopOk returns a tuple with the ShouldStop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Info) GetShouldStopOk() (*bool, bool) {
	if o == nil || o.ShouldStop == nil {
		return nil, false
	}
	return o.ShouldStop, true
}

// HasShouldStop returns a boolean if a field has been set.
func (o *Info) HasShouldStop() bool {
	if o != nil && o.ShouldStop != nil {
		return true
	}

	return false
}

// SetShouldStop gets a reference to the given bool and assigns it to the ShouldStop field.
func (o *Info) SetShouldStop(v bool) {
	o.ShouldStop = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *Info) GetTotal() int64 {
	if o == nil || o.Total == nil {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Info) GetTotalOk() (*int64, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *Info) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *Info) SetTotal(v int64) {
	o.Total = &v
}

func (o Info) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Available != nil {
		toSerialize["Available"] = o.Available
	}
	if o.BufferSpace != nil {
		toSerialize["BufferSpace"] = o.BufferSpace
	}
	if o.Busy != nil {
		toSerialize["Busy"] = o.Busy
	}
	if o.HighPriorityAvailable != nil {
		toSerialize["HighPriorityAvailable"] = o.HighPriorityAvailable
	}
	if o.HighPriorityBufferSpace != nil {
		toSerialize["HighPriorityBufferSpace"] = o.HighPriorityBufferSpace
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.ProcessInfo != nil {
		toSerialize["ProcessInfo"] = o.ProcessInfo
	}
	if o.ShouldStop != nil {
		toSerialize["ShouldStop"] = o.ShouldStop
	}
	if o.Total != nil {
		toSerialize["Total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableInfo struct {
	value *Info
	isSet bool
}

func (v NullableInfo) Get() *Info {
	return v.value
}

func (v *NullableInfo) Set(val *Info) {
	v.value = val
	v.isSet = true
}

func (v NullableInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfo(val *Info) *NullableInfo {
	return &NullableInfo{value: val, isSet: true}
}

func (v NullableInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
