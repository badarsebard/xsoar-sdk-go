/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IntegrationScript struct for IntegrationScript
type IntegrationScript struct {
	Commands               *[]Command `json:"commands,omitempty"`
	DockerImage            *string    `json:"dockerImage,omitempty"`
	Feed                   *bool      `json:"feed,omitempty"`
	IsFetch                *bool      `json:"isFetch,omitempty"`
	IsFetchCredentials     *bool      `json:"isFetchCredentials,omitempty"`
	IsFetchSamples         *bool      `json:"isFetchSamples,omitempty"`
	IsMappable             *bool      `json:"isMappable,omitempty"`
	IsRemoteSyncIn         *bool      `json:"isRemoteSyncIn,omitempty"`
	IsRemoteSyncOut        *bool      `json:"isRemoteSyncOut,omitempty"`
	LongRunning            *bool      `json:"longRunning,omitempty"`
	LongRunningPortMapping *bool      `json:"longRunningPortMapping,omitempty"`
	ResetContext           *bool      `json:"resetContext,omitempty"`
	RunOnce                *bool      `json:"runOnce,omitempty"`
	Script                 *string    `json:"script,omitempty"`
	// ScriptSubType holds the script type version
	Subtype *string `json:"subtype,omitempty"`
	// ScriptType holds the type of a script
	Type *string `json:"type,omitempty"`
}

// NewIntegrationScript instantiates a new IntegrationScript object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationScript() *IntegrationScript {
	this := IntegrationScript{}
	return &this
}

// NewIntegrationScriptWithDefaults instantiates a new IntegrationScript object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationScriptWithDefaults() *IntegrationScript {
	this := IntegrationScript{}
	return &this
}

// GetCommands returns the Commands field value if set, zero value otherwise.
func (o *IntegrationScript) GetCommands() []Command {
	if o == nil || o.Commands == nil {
		var ret []Command
		return ret
	}
	return *o.Commands
}

// GetCommandsOk returns a tuple with the Commands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetCommandsOk() (*[]Command, bool) {
	if o == nil || o.Commands == nil {
		return nil, false
	}
	return o.Commands, true
}

// HasCommands returns a boolean if a field has been set.
func (o *IntegrationScript) HasCommands() bool {
	if o != nil && o.Commands != nil {
		return true
	}

	return false
}

// SetCommands gets a reference to the given []Command and assigns it to the Commands field.
func (o *IntegrationScript) SetCommands(v []Command) {
	o.Commands = &v
}

// GetDockerImage returns the DockerImage field value if set, zero value otherwise.
func (o *IntegrationScript) GetDockerImage() string {
	if o == nil || o.DockerImage == nil {
		var ret string
		return ret
	}
	return *o.DockerImage
}

// GetDockerImageOk returns a tuple with the DockerImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetDockerImageOk() (*string, bool) {
	if o == nil || o.DockerImage == nil {
		return nil, false
	}
	return o.DockerImage, true
}

// HasDockerImage returns a boolean if a field has been set.
func (o *IntegrationScript) HasDockerImage() bool {
	if o != nil && o.DockerImage != nil {
		return true
	}

	return false
}

// SetDockerImage gets a reference to the given string and assigns it to the DockerImage field.
func (o *IntegrationScript) SetDockerImage(v string) {
	o.DockerImage = &v
}

// GetFeed returns the Feed field value if set, zero value otherwise.
func (o *IntegrationScript) GetFeed() bool {
	if o == nil || o.Feed == nil {
		var ret bool
		return ret
	}
	return *o.Feed
}

// GetFeedOk returns a tuple with the Feed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetFeedOk() (*bool, bool) {
	if o == nil || o.Feed == nil {
		return nil, false
	}
	return o.Feed, true
}

// HasFeed returns a boolean if a field has been set.
func (o *IntegrationScript) HasFeed() bool {
	if o != nil && o.Feed != nil {
		return true
	}

	return false
}

// SetFeed gets a reference to the given bool and assigns it to the Feed field.
func (o *IntegrationScript) SetFeed(v bool) {
	o.Feed = &v
}

// GetIsFetch returns the IsFetch field value if set, zero value otherwise.
func (o *IntegrationScript) GetIsFetch() bool {
	if o == nil || o.IsFetch == nil {
		var ret bool
		return ret
	}
	return *o.IsFetch
}

// GetIsFetchOk returns a tuple with the IsFetch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetIsFetchOk() (*bool, bool) {
	if o == nil || o.IsFetch == nil {
		return nil, false
	}
	return o.IsFetch, true
}

// HasIsFetch returns a boolean if a field has been set.
func (o *IntegrationScript) HasIsFetch() bool {
	if o != nil && o.IsFetch != nil {
		return true
	}

	return false
}

// SetIsFetch gets a reference to the given bool and assigns it to the IsFetch field.
func (o *IntegrationScript) SetIsFetch(v bool) {
	o.IsFetch = &v
}

// GetIsFetchCredentials returns the IsFetchCredentials field value if set, zero value otherwise.
func (o *IntegrationScript) GetIsFetchCredentials() bool {
	if o == nil || o.IsFetchCredentials == nil {
		var ret bool
		return ret
	}
	return *o.IsFetchCredentials
}

// GetIsFetchCredentialsOk returns a tuple with the IsFetchCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetIsFetchCredentialsOk() (*bool, bool) {
	if o == nil || o.IsFetchCredentials == nil {
		return nil, false
	}
	return o.IsFetchCredentials, true
}

// HasIsFetchCredentials returns a boolean if a field has been set.
func (o *IntegrationScript) HasIsFetchCredentials() bool {
	if o != nil && o.IsFetchCredentials != nil {
		return true
	}

	return false
}

// SetIsFetchCredentials gets a reference to the given bool and assigns it to the IsFetchCredentials field.
func (o *IntegrationScript) SetIsFetchCredentials(v bool) {
	o.IsFetchCredentials = &v
}

// GetIsFetchSamples returns the IsFetchSamples field value if set, zero value otherwise.
func (o *IntegrationScript) GetIsFetchSamples() bool {
	if o == nil || o.IsFetchSamples == nil {
		var ret bool
		return ret
	}
	return *o.IsFetchSamples
}

// GetIsFetchSamplesOk returns a tuple with the IsFetchSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetIsFetchSamplesOk() (*bool, bool) {
	if o == nil || o.IsFetchSamples == nil {
		return nil, false
	}
	return o.IsFetchSamples, true
}

// HasIsFetchSamples returns a boolean if a field has been set.
func (o *IntegrationScript) HasIsFetchSamples() bool {
	if o != nil && o.IsFetchSamples != nil {
		return true
	}

	return false
}

// SetIsFetchSamples gets a reference to the given bool and assigns it to the IsFetchSamples field.
func (o *IntegrationScript) SetIsFetchSamples(v bool) {
	o.IsFetchSamples = &v
}

// GetIsMappable returns the IsMappable field value if set, zero value otherwise.
func (o *IntegrationScript) GetIsMappable() bool {
	if o == nil || o.IsMappable == nil {
		var ret bool
		return ret
	}
	return *o.IsMappable
}

// GetIsMappableOk returns a tuple with the IsMappable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetIsMappableOk() (*bool, bool) {
	if o == nil || o.IsMappable == nil {
		return nil, false
	}
	return o.IsMappable, true
}

// HasIsMappable returns a boolean if a field has been set.
func (o *IntegrationScript) HasIsMappable() bool {
	if o != nil && o.IsMappable != nil {
		return true
	}

	return false
}

// SetIsMappable gets a reference to the given bool and assigns it to the IsMappable field.
func (o *IntegrationScript) SetIsMappable(v bool) {
	o.IsMappable = &v
}

// GetIsRemoteSyncIn returns the IsRemoteSyncIn field value if set, zero value otherwise.
func (o *IntegrationScript) GetIsRemoteSyncIn() bool {
	if o == nil || o.IsRemoteSyncIn == nil {
		var ret bool
		return ret
	}
	return *o.IsRemoteSyncIn
}

// GetIsRemoteSyncInOk returns a tuple with the IsRemoteSyncIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetIsRemoteSyncInOk() (*bool, bool) {
	if o == nil || o.IsRemoteSyncIn == nil {
		return nil, false
	}
	return o.IsRemoteSyncIn, true
}

// HasIsRemoteSyncIn returns a boolean if a field has been set.
func (o *IntegrationScript) HasIsRemoteSyncIn() bool {
	if o != nil && o.IsRemoteSyncIn != nil {
		return true
	}

	return false
}

// SetIsRemoteSyncIn gets a reference to the given bool and assigns it to the IsRemoteSyncIn field.
func (o *IntegrationScript) SetIsRemoteSyncIn(v bool) {
	o.IsRemoteSyncIn = &v
}

// GetIsRemoteSyncOut returns the IsRemoteSyncOut field value if set, zero value otherwise.
func (o *IntegrationScript) GetIsRemoteSyncOut() bool {
	if o == nil || o.IsRemoteSyncOut == nil {
		var ret bool
		return ret
	}
	return *o.IsRemoteSyncOut
}

// GetIsRemoteSyncOutOk returns a tuple with the IsRemoteSyncOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetIsRemoteSyncOutOk() (*bool, bool) {
	if o == nil || o.IsRemoteSyncOut == nil {
		return nil, false
	}
	return o.IsRemoteSyncOut, true
}

// HasIsRemoteSyncOut returns a boolean if a field has been set.
func (o *IntegrationScript) HasIsRemoteSyncOut() bool {
	if o != nil && o.IsRemoteSyncOut != nil {
		return true
	}

	return false
}

// SetIsRemoteSyncOut gets a reference to the given bool and assigns it to the IsRemoteSyncOut field.
func (o *IntegrationScript) SetIsRemoteSyncOut(v bool) {
	o.IsRemoteSyncOut = &v
}

// GetLongRunning returns the LongRunning field value if set, zero value otherwise.
func (o *IntegrationScript) GetLongRunning() bool {
	if o == nil || o.LongRunning == nil {
		var ret bool
		return ret
	}
	return *o.LongRunning
}

// GetLongRunningOk returns a tuple with the LongRunning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetLongRunningOk() (*bool, bool) {
	if o == nil || o.LongRunning == nil {
		return nil, false
	}
	return o.LongRunning, true
}

// HasLongRunning returns a boolean if a field has been set.
func (o *IntegrationScript) HasLongRunning() bool {
	if o != nil && o.LongRunning != nil {
		return true
	}

	return false
}

// SetLongRunning gets a reference to the given bool and assigns it to the LongRunning field.
func (o *IntegrationScript) SetLongRunning(v bool) {
	o.LongRunning = &v
}

// GetLongRunningPortMapping returns the LongRunningPortMapping field value if set, zero value otherwise.
func (o *IntegrationScript) GetLongRunningPortMapping() bool {
	if o == nil || o.LongRunningPortMapping == nil {
		var ret bool
		return ret
	}
	return *o.LongRunningPortMapping
}

// GetLongRunningPortMappingOk returns a tuple with the LongRunningPortMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetLongRunningPortMappingOk() (*bool, bool) {
	if o == nil || o.LongRunningPortMapping == nil {
		return nil, false
	}
	return o.LongRunningPortMapping, true
}

// HasLongRunningPortMapping returns a boolean if a field has been set.
func (o *IntegrationScript) HasLongRunningPortMapping() bool {
	if o != nil && o.LongRunningPortMapping != nil {
		return true
	}

	return false
}

// SetLongRunningPortMapping gets a reference to the given bool and assigns it to the LongRunningPortMapping field.
func (o *IntegrationScript) SetLongRunningPortMapping(v bool) {
	o.LongRunningPortMapping = &v
}

// GetResetContext returns the ResetContext field value if set, zero value otherwise.
func (o *IntegrationScript) GetResetContext() bool {
	if o == nil || o.ResetContext == nil {
		var ret bool
		return ret
	}
	return *o.ResetContext
}

// GetResetContextOk returns a tuple with the ResetContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetResetContextOk() (*bool, bool) {
	if o == nil || o.ResetContext == nil {
		return nil, false
	}
	return o.ResetContext, true
}

// HasResetContext returns a boolean if a field has been set.
func (o *IntegrationScript) HasResetContext() bool {
	if o != nil && o.ResetContext != nil {
		return true
	}

	return false
}

// SetResetContext gets a reference to the given bool and assigns it to the ResetContext field.
func (o *IntegrationScript) SetResetContext(v bool) {
	o.ResetContext = &v
}

// GetRunOnce returns the RunOnce field value if set, zero value otherwise.
func (o *IntegrationScript) GetRunOnce() bool {
	if o == nil || o.RunOnce == nil {
		var ret bool
		return ret
	}
	return *o.RunOnce
}

// GetRunOnceOk returns a tuple with the RunOnce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetRunOnceOk() (*bool, bool) {
	if o == nil || o.RunOnce == nil {
		return nil, false
	}
	return o.RunOnce, true
}

// HasRunOnce returns a boolean if a field has been set.
func (o *IntegrationScript) HasRunOnce() bool {
	if o != nil && o.RunOnce != nil {
		return true
	}

	return false
}

// SetRunOnce gets a reference to the given bool and assigns it to the RunOnce field.
func (o *IntegrationScript) SetRunOnce(v bool) {
	o.RunOnce = &v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *IntegrationScript) GetScript() string {
	if o == nil || o.Script == nil {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetScriptOk() (*string, bool) {
	if o == nil || o.Script == nil {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *IntegrationScript) HasScript() bool {
	if o != nil && o.Script != nil {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *IntegrationScript) SetScript(v string) {
	o.Script = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *IntegrationScript) GetSubtype() string {
	if o == nil || o.Subtype == nil {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetSubtypeOk() (*string, bool) {
	if o == nil || o.Subtype == nil {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *IntegrationScript) HasSubtype() bool {
	if o != nil && o.Subtype != nil {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *IntegrationScript) SetSubtype(v string) {
	o.Subtype = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IntegrationScript) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationScript) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IntegrationScript) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IntegrationScript) SetType(v string) {
	o.Type = &v
}

func (o IntegrationScript) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Commands != nil {
		toSerialize["commands"] = o.Commands
	}
	if o.DockerImage != nil {
		toSerialize["dockerImage"] = o.DockerImage
	}
	if o.Feed != nil {
		toSerialize["feed"] = o.Feed
	}
	if o.IsFetch != nil {
		toSerialize["isFetch"] = o.IsFetch
	}
	if o.IsFetchCredentials != nil {
		toSerialize["isFetchCredentials"] = o.IsFetchCredentials
	}
	if o.IsFetchSamples != nil {
		toSerialize["isFetchSamples"] = o.IsFetchSamples
	}
	if o.IsMappable != nil {
		toSerialize["isMappable"] = o.IsMappable
	}
	if o.IsRemoteSyncIn != nil {
		toSerialize["isRemoteSyncIn"] = o.IsRemoteSyncIn
	}
	if o.IsRemoteSyncOut != nil {
		toSerialize["isRemoteSyncOut"] = o.IsRemoteSyncOut
	}
	if o.LongRunning != nil {
		toSerialize["longRunning"] = o.LongRunning
	}
	if o.LongRunningPortMapping != nil {
		toSerialize["longRunningPortMapping"] = o.LongRunningPortMapping
	}
	if o.ResetContext != nil {
		toSerialize["resetContext"] = o.ResetContext
	}
	if o.RunOnce != nil {
		toSerialize["runOnce"] = o.RunOnce
	}
	if o.Script != nil {
		toSerialize["script"] = o.Script
	}
	if o.Subtype != nil {
		toSerialize["subtype"] = o.Subtype
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationScript struct {
	value *IntegrationScript
	isSet bool
}

func (v NullableIntegrationScript) Get() *IntegrationScript {
	return v.value
}

func (v *NullableIntegrationScript) Set(val *IntegrationScript) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationScript) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationScript) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationScript(val *IntegrationScript) *NullableIntegrationScript {
	return &NullableIntegrationScript{value: val, isSet: true}
}

func (v NullableIntegrationScript) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationScript) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
