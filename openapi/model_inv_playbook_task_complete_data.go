/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// InvPlaybookTaskCompleteData struct for InvPlaybookTaskCompleteData
type InvPlaybookTaskCompleteData struct {
	Arguments             *map[string]map[string]interface{} `json:"arguments,omitempty"`
	CalculatedDescription *string                            `json:"calculatedDescription,omitempty"`
	CalculatedTaskName    *string                            `json:"calculatedTaskName,omitempty"`
	CompletedBy           *string                            `json:"completedBy,omitempty"`
	CompletedCount        *int64                             `json:"completedCount,omitempty"`
	CompletedDate         *time.Time                         `json:"completedDate,omitempty"`
	Entries               *[]string                          `json:"entries,omitempty"`
	Input                 *string                            `json:"input,omitempty"`
	Outputs               *map[string]map[string]interface{} `json:"outputs,omitempty"`
	PlaybookInputs        *map[string]map[string]interface{} `json:"playbookInputs,omitempty"`
	StartDate             *time.Time                         `json:"startDate,omitempty"`
	// TaskState indicates the state of the task during the incident/investigation execution
	State                *string `json:"state,omitempty"`
	WillNotExecuteCount  *int64  `json:"willNotExecuteCount,omitempty"`
	WillNotExecuteReason *string `json:"willNotExecuteReason,omitempty"`
}

// NewInvPlaybookTaskCompleteData instantiates a new InvPlaybookTaskCompleteData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvPlaybookTaskCompleteData() *InvPlaybookTaskCompleteData {
	this := InvPlaybookTaskCompleteData{}
	return &this
}

// NewInvPlaybookTaskCompleteDataWithDefaults instantiates a new InvPlaybookTaskCompleteData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvPlaybookTaskCompleteDataWithDefaults() *InvPlaybookTaskCompleteData {
	this := InvPlaybookTaskCompleteData{}
	return &this
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetArguments() map[string]map[string]interface{} {
	if o == nil || o.Arguments == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetArgumentsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given map[string]map[string]interface{} and assigns it to the Arguments field.
func (o *InvPlaybookTaskCompleteData) SetArguments(v map[string]map[string]interface{}) {
	o.Arguments = &v
}

// GetCalculatedDescription returns the CalculatedDescription field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetCalculatedDescription() string {
	if o == nil || o.CalculatedDescription == nil {
		var ret string
		return ret
	}
	return *o.CalculatedDescription
}

// GetCalculatedDescriptionOk returns a tuple with the CalculatedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetCalculatedDescriptionOk() (*string, bool) {
	if o == nil || o.CalculatedDescription == nil {
		return nil, false
	}
	return o.CalculatedDescription, true
}

// HasCalculatedDescription returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasCalculatedDescription() bool {
	if o != nil && o.CalculatedDescription != nil {
		return true
	}

	return false
}

// SetCalculatedDescription gets a reference to the given string and assigns it to the CalculatedDescription field.
func (o *InvPlaybookTaskCompleteData) SetCalculatedDescription(v string) {
	o.CalculatedDescription = &v
}

// GetCalculatedTaskName returns the CalculatedTaskName field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetCalculatedTaskName() string {
	if o == nil || o.CalculatedTaskName == nil {
		var ret string
		return ret
	}
	return *o.CalculatedTaskName
}

// GetCalculatedTaskNameOk returns a tuple with the CalculatedTaskName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetCalculatedTaskNameOk() (*string, bool) {
	if o == nil || o.CalculatedTaskName == nil {
		return nil, false
	}
	return o.CalculatedTaskName, true
}

// HasCalculatedTaskName returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasCalculatedTaskName() bool {
	if o != nil && o.CalculatedTaskName != nil {
		return true
	}

	return false
}

// SetCalculatedTaskName gets a reference to the given string and assigns it to the CalculatedTaskName field.
func (o *InvPlaybookTaskCompleteData) SetCalculatedTaskName(v string) {
	o.CalculatedTaskName = &v
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetCompletedBy() string {
	if o == nil || o.CompletedBy == nil {
		var ret string
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetCompletedByOk() (*string, bool) {
	if o == nil || o.CompletedBy == nil {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasCompletedBy() bool {
	if o != nil && o.CompletedBy != nil {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given string and assigns it to the CompletedBy field.
func (o *InvPlaybookTaskCompleteData) SetCompletedBy(v string) {
	o.CompletedBy = &v
}

// GetCompletedCount returns the CompletedCount field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetCompletedCount() int64 {
	if o == nil || o.CompletedCount == nil {
		var ret int64
		return ret
	}
	return *o.CompletedCount
}

// GetCompletedCountOk returns a tuple with the CompletedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetCompletedCountOk() (*int64, bool) {
	if o == nil || o.CompletedCount == nil {
		return nil, false
	}
	return o.CompletedCount, true
}

// HasCompletedCount returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasCompletedCount() bool {
	if o != nil && o.CompletedCount != nil {
		return true
	}

	return false
}

// SetCompletedCount gets a reference to the given int64 and assigns it to the CompletedCount field.
func (o *InvPlaybookTaskCompleteData) SetCompletedCount(v int64) {
	o.CompletedCount = &v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetCompletedDate() time.Time {
	if o == nil || o.CompletedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetCompletedDateOk() (*time.Time, bool) {
	if o == nil || o.CompletedDate == nil {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasCompletedDate() bool {
	if o != nil && o.CompletedDate != nil {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given time.Time and assigns it to the CompletedDate field.
func (o *InvPlaybookTaskCompleteData) SetCompletedDate(v time.Time) {
	o.CompletedDate = &v
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetEntries() []string {
	if o == nil || o.Entries == nil {
		var ret []string
		return ret
	}
	return *o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetEntriesOk() (*[]string, bool) {
	if o == nil || o.Entries == nil {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasEntries() bool {
	if o != nil && o.Entries != nil {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []string and assigns it to the Entries field.
func (o *InvPlaybookTaskCompleteData) SetEntries(v []string) {
	o.Entries = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetInput() string {
	if o == nil || o.Input == nil {
		var ret string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetInputOk() (*string, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given string and assigns it to the Input field.
func (o *InvPlaybookTaskCompleteData) SetInput(v string) {
	o.Input = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetOutputs() map[string]map[string]interface{} {
	if o == nil || o.Outputs == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetOutputsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Outputs == nil {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasOutputs() bool {
	if o != nil && o.Outputs != nil {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given map[string]map[string]interface{} and assigns it to the Outputs field.
func (o *InvPlaybookTaskCompleteData) SetOutputs(v map[string]map[string]interface{}) {
	o.Outputs = &v
}

// GetPlaybookInputs returns the PlaybookInputs field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetPlaybookInputs() map[string]map[string]interface{} {
	if o == nil || o.PlaybookInputs == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.PlaybookInputs
}

// GetPlaybookInputsOk returns a tuple with the PlaybookInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetPlaybookInputsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.PlaybookInputs == nil {
		return nil, false
	}
	return o.PlaybookInputs, true
}

// HasPlaybookInputs returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasPlaybookInputs() bool {
	if o != nil && o.PlaybookInputs != nil {
		return true
	}

	return false
}

// SetPlaybookInputs gets a reference to the given map[string]map[string]interface{} and assigns it to the PlaybookInputs field.
func (o *InvPlaybookTaskCompleteData) SetPlaybookInputs(v map[string]map[string]interface{}) {
	o.PlaybookInputs = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *InvPlaybookTaskCompleteData) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *InvPlaybookTaskCompleteData) SetState(v string) {
	o.State = &v
}

// GetWillNotExecuteCount returns the WillNotExecuteCount field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetWillNotExecuteCount() int64 {
	if o == nil || o.WillNotExecuteCount == nil {
		var ret int64
		return ret
	}
	return *o.WillNotExecuteCount
}

// GetWillNotExecuteCountOk returns a tuple with the WillNotExecuteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetWillNotExecuteCountOk() (*int64, bool) {
	if o == nil || o.WillNotExecuteCount == nil {
		return nil, false
	}
	return o.WillNotExecuteCount, true
}

// HasWillNotExecuteCount returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasWillNotExecuteCount() bool {
	if o != nil && o.WillNotExecuteCount != nil {
		return true
	}

	return false
}

// SetWillNotExecuteCount gets a reference to the given int64 and assigns it to the WillNotExecuteCount field.
func (o *InvPlaybookTaskCompleteData) SetWillNotExecuteCount(v int64) {
	o.WillNotExecuteCount = &v
}

// GetWillNotExecuteReason returns the WillNotExecuteReason field value if set, zero value otherwise.
func (o *InvPlaybookTaskCompleteData) GetWillNotExecuteReason() string {
	if o == nil || o.WillNotExecuteReason == nil {
		var ret string
		return ret
	}
	return *o.WillNotExecuteReason
}

// GetWillNotExecuteReasonOk returns a tuple with the WillNotExecuteReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvPlaybookTaskCompleteData) GetWillNotExecuteReasonOk() (*string, bool) {
	if o == nil || o.WillNotExecuteReason == nil {
		return nil, false
	}
	return o.WillNotExecuteReason, true
}

// HasWillNotExecuteReason returns a boolean if a field has been set.
func (o *InvPlaybookTaskCompleteData) HasWillNotExecuteReason() bool {
	if o != nil && o.WillNotExecuteReason != nil {
		return true
	}

	return false
}

// SetWillNotExecuteReason gets a reference to the given string and assigns it to the WillNotExecuteReason field.
func (o *InvPlaybookTaskCompleteData) SetWillNotExecuteReason(v string) {
	o.WillNotExecuteReason = &v
}

func (o InvPlaybookTaskCompleteData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	if o.CalculatedDescription != nil {
		toSerialize["calculatedDescription"] = o.CalculatedDescription
	}
	if o.CalculatedTaskName != nil {
		toSerialize["calculatedTaskName"] = o.CalculatedTaskName
	}
	if o.CompletedBy != nil {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if o.CompletedCount != nil {
		toSerialize["completedCount"] = o.CompletedCount
	}
	if o.CompletedDate != nil {
		toSerialize["completedDate"] = o.CompletedDate
	}
	if o.Entries != nil {
		toSerialize["entries"] = o.Entries
	}
	if o.Input != nil {
		toSerialize["input"] = o.Input
	}
	if o.Outputs != nil {
		toSerialize["outputs"] = o.Outputs
	}
	if o.PlaybookInputs != nil {
		toSerialize["playbookInputs"] = o.PlaybookInputs
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.WillNotExecuteCount != nil {
		toSerialize["willNotExecuteCount"] = o.WillNotExecuteCount
	}
	if o.WillNotExecuteReason != nil {
		toSerialize["willNotExecuteReason"] = o.WillNotExecuteReason
	}
	return json.Marshal(toSerialize)
}

type NullableInvPlaybookTaskCompleteData struct {
	value *InvPlaybookTaskCompleteData
	isSet bool
}

func (v NullableInvPlaybookTaskCompleteData) Get() *InvPlaybookTaskCompleteData {
	return v.value
}

func (v *NullableInvPlaybookTaskCompleteData) Set(val *InvPlaybookTaskCompleteData) {
	v.value = val
	v.isSet = true
}

func (v NullableInvPlaybookTaskCompleteData) IsSet() bool {
	return v.isSet
}

func (v *NullableInvPlaybookTaskCompleteData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvPlaybookTaskCompleteData(val *InvPlaybookTaskCompleteData) *NullableInvPlaybookTaskCompleteData {
	return &NullableInvPlaybookTaskCompleteData{value: val, isSet: true}
}

func (v NullableInvPlaybookTaskCompleteData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvPlaybookTaskCompleteData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
