/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InvTaskDebug struct for InvTaskDebug
type InvTaskDebug struct {
	BreakpointCondition     *ArgFilter                         `json:"breakpointCondition,omitempty"`
	InputOverrides          *map[string]string                 `json:"inputOverrides,omitempty"`
	IsMarkedWithBreakpoint  *bool                              `json:"isMarkedWithBreakpoint,omitempty"`
	IsMarkedWithSkip        *bool                              `json:"isMarkedWithSkip,omitempty"`
	OutputOverrides         *map[string]map[string]interface{} `json:"outputOverrides,omitempty"`
	ShouldOverrideDebugInfo *bool                              `json:"shouldOverrideDebugInfo,omitempty"`
	SkipConditionOverrideTo *string                            `json:"skipConditionOverrideTo,omitempty"`
	TaskOriginalId          *string                            `json:"taskOriginalId,omitempty"`
}

// NewInvTaskDebug instantiates a new InvTaskDebug object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvTaskDebug() *InvTaskDebug {
	this := InvTaskDebug{}
	return &this
}

// NewInvTaskDebugWithDefaults instantiates a new InvTaskDebug object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvTaskDebugWithDefaults() *InvTaskDebug {
	this := InvTaskDebug{}
	return &this
}

// GetBreakpointCondition returns the BreakpointCondition field value if set, zero value otherwise.
func (o *InvTaskDebug) GetBreakpointCondition() ArgFilter {
	if o == nil || o.BreakpointCondition == nil {
		var ret ArgFilter
		return ret
	}
	return *o.BreakpointCondition
}

// GetBreakpointConditionOk returns a tuple with the BreakpointCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvTaskDebug) GetBreakpointConditionOk() (*ArgFilter, bool) {
	if o == nil || o.BreakpointCondition == nil {
		return nil, false
	}
	return o.BreakpointCondition, true
}

// HasBreakpointCondition returns a boolean if a field has been set.
func (o *InvTaskDebug) HasBreakpointCondition() bool {
	if o != nil && o.BreakpointCondition != nil {
		return true
	}

	return false
}

// SetBreakpointCondition gets a reference to the given ArgFilter and assigns it to the BreakpointCondition field.
func (o *InvTaskDebug) SetBreakpointCondition(v ArgFilter) {
	o.BreakpointCondition = &v
}

// GetInputOverrides returns the InputOverrides field value if set, zero value otherwise.
func (o *InvTaskDebug) GetInputOverrides() map[string]string {
	if o == nil || o.InputOverrides == nil {
		var ret map[string]string
		return ret
	}
	return *o.InputOverrides
}

// GetInputOverridesOk returns a tuple with the InputOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvTaskDebug) GetInputOverridesOk() (*map[string]string, bool) {
	if o == nil || o.InputOverrides == nil {
		return nil, false
	}
	return o.InputOverrides, true
}

// HasInputOverrides returns a boolean if a field has been set.
func (o *InvTaskDebug) HasInputOverrides() bool {
	if o != nil && o.InputOverrides != nil {
		return true
	}

	return false
}

// SetInputOverrides gets a reference to the given map[string]string and assigns it to the InputOverrides field.
func (o *InvTaskDebug) SetInputOverrides(v map[string]string) {
	o.InputOverrides = &v
}

// GetIsMarkedWithBreakpoint returns the IsMarkedWithBreakpoint field value if set, zero value otherwise.
func (o *InvTaskDebug) GetIsMarkedWithBreakpoint() bool {
	if o == nil || o.IsMarkedWithBreakpoint == nil {
		var ret bool
		return ret
	}
	return *o.IsMarkedWithBreakpoint
}

// GetIsMarkedWithBreakpointOk returns a tuple with the IsMarkedWithBreakpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvTaskDebug) GetIsMarkedWithBreakpointOk() (*bool, bool) {
	if o == nil || o.IsMarkedWithBreakpoint == nil {
		return nil, false
	}
	return o.IsMarkedWithBreakpoint, true
}

// HasIsMarkedWithBreakpoint returns a boolean if a field has been set.
func (o *InvTaskDebug) HasIsMarkedWithBreakpoint() bool {
	if o != nil && o.IsMarkedWithBreakpoint != nil {
		return true
	}

	return false
}

// SetIsMarkedWithBreakpoint gets a reference to the given bool and assigns it to the IsMarkedWithBreakpoint field.
func (o *InvTaskDebug) SetIsMarkedWithBreakpoint(v bool) {
	o.IsMarkedWithBreakpoint = &v
}

// GetIsMarkedWithSkip returns the IsMarkedWithSkip field value if set, zero value otherwise.
func (o *InvTaskDebug) GetIsMarkedWithSkip() bool {
	if o == nil || o.IsMarkedWithSkip == nil {
		var ret bool
		return ret
	}
	return *o.IsMarkedWithSkip
}

// GetIsMarkedWithSkipOk returns a tuple with the IsMarkedWithSkip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvTaskDebug) GetIsMarkedWithSkipOk() (*bool, bool) {
	if o == nil || o.IsMarkedWithSkip == nil {
		return nil, false
	}
	return o.IsMarkedWithSkip, true
}

// HasIsMarkedWithSkip returns a boolean if a field has been set.
func (o *InvTaskDebug) HasIsMarkedWithSkip() bool {
	if o != nil && o.IsMarkedWithSkip != nil {
		return true
	}

	return false
}

// SetIsMarkedWithSkip gets a reference to the given bool and assigns it to the IsMarkedWithSkip field.
func (o *InvTaskDebug) SetIsMarkedWithSkip(v bool) {
	o.IsMarkedWithSkip = &v
}

// GetOutputOverrides returns the OutputOverrides field value if set, zero value otherwise.
func (o *InvTaskDebug) GetOutputOverrides() map[string]map[string]interface{} {
	if o == nil || o.OutputOverrides == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.OutputOverrides
}

// GetOutputOverridesOk returns a tuple with the OutputOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvTaskDebug) GetOutputOverridesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.OutputOverrides == nil {
		return nil, false
	}
	return o.OutputOverrides, true
}

// HasOutputOverrides returns a boolean if a field has been set.
func (o *InvTaskDebug) HasOutputOverrides() bool {
	if o != nil && o.OutputOverrides != nil {
		return true
	}

	return false
}

// SetOutputOverrides gets a reference to the given map[string]map[string]interface{} and assigns it to the OutputOverrides field.
func (o *InvTaskDebug) SetOutputOverrides(v map[string]map[string]interface{}) {
	o.OutputOverrides = &v
}

// GetShouldOverrideDebugInfo returns the ShouldOverrideDebugInfo field value if set, zero value otherwise.
func (o *InvTaskDebug) GetShouldOverrideDebugInfo() bool {
	if o == nil || o.ShouldOverrideDebugInfo == nil {
		var ret bool
		return ret
	}
	return *o.ShouldOverrideDebugInfo
}

// GetShouldOverrideDebugInfoOk returns a tuple with the ShouldOverrideDebugInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvTaskDebug) GetShouldOverrideDebugInfoOk() (*bool, bool) {
	if o == nil || o.ShouldOverrideDebugInfo == nil {
		return nil, false
	}
	return o.ShouldOverrideDebugInfo, true
}

// HasShouldOverrideDebugInfo returns a boolean if a field has been set.
func (o *InvTaskDebug) HasShouldOverrideDebugInfo() bool {
	if o != nil && o.ShouldOverrideDebugInfo != nil {
		return true
	}

	return false
}

// SetShouldOverrideDebugInfo gets a reference to the given bool and assigns it to the ShouldOverrideDebugInfo field.
func (o *InvTaskDebug) SetShouldOverrideDebugInfo(v bool) {
	o.ShouldOverrideDebugInfo = &v
}

// GetSkipConditionOverrideTo returns the SkipConditionOverrideTo field value if set, zero value otherwise.
func (o *InvTaskDebug) GetSkipConditionOverrideTo() string {
	if o == nil || o.SkipConditionOverrideTo == nil {
		var ret string
		return ret
	}
	return *o.SkipConditionOverrideTo
}

// GetSkipConditionOverrideToOk returns a tuple with the SkipConditionOverrideTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvTaskDebug) GetSkipConditionOverrideToOk() (*string, bool) {
	if o == nil || o.SkipConditionOverrideTo == nil {
		return nil, false
	}
	return o.SkipConditionOverrideTo, true
}

// HasSkipConditionOverrideTo returns a boolean if a field has been set.
func (o *InvTaskDebug) HasSkipConditionOverrideTo() bool {
	if o != nil && o.SkipConditionOverrideTo != nil {
		return true
	}

	return false
}

// SetSkipConditionOverrideTo gets a reference to the given string and assigns it to the SkipConditionOverrideTo field.
func (o *InvTaskDebug) SetSkipConditionOverrideTo(v string) {
	o.SkipConditionOverrideTo = &v
}

// GetTaskOriginalId returns the TaskOriginalId field value if set, zero value otherwise.
func (o *InvTaskDebug) GetTaskOriginalId() string {
	if o == nil || o.TaskOriginalId == nil {
		var ret string
		return ret
	}
	return *o.TaskOriginalId
}

// GetTaskOriginalIdOk returns a tuple with the TaskOriginalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvTaskDebug) GetTaskOriginalIdOk() (*string, bool) {
	if o == nil || o.TaskOriginalId == nil {
		return nil, false
	}
	return o.TaskOriginalId, true
}

// HasTaskOriginalId returns a boolean if a field has been set.
func (o *InvTaskDebug) HasTaskOriginalId() bool {
	if o != nil && o.TaskOriginalId != nil {
		return true
	}

	return false
}

// SetTaskOriginalId gets a reference to the given string and assigns it to the TaskOriginalId field.
func (o *InvTaskDebug) SetTaskOriginalId(v string) {
	o.TaskOriginalId = &v
}

func (o InvTaskDebug) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BreakpointCondition != nil {
		toSerialize["breakpointCondition"] = o.BreakpointCondition
	}
	if o.InputOverrides != nil {
		toSerialize["inputOverrides"] = o.InputOverrides
	}
	if o.IsMarkedWithBreakpoint != nil {
		toSerialize["isMarkedWithBreakpoint"] = o.IsMarkedWithBreakpoint
	}
	if o.IsMarkedWithSkip != nil {
		toSerialize["isMarkedWithSkip"] = o.IsMarkedWithSkip
	}
	if o.OutputOverrides != nil {
		toSerialize["outputOverrides"] = o.OutputOverrides
	}
	if o.ShouldOverrideDebugInfo != nil {
		toSerialize["shouldOverrideDebugInfo"] = o.ShouldOverrideDebugInfo
	}
	if o.SkipConditionOverrideTo != nil {
		toSerialize["skipConditionOverrideTo"] = o.SkipConditionOverrideTo
	}
	if o.TaskOriginalId != nil {
		toSerialize["taskOriginalId"] = o.TaskOriginalId
	}
	return json.Marshal(toSerialize)
}

type NullableInvTaskDebug struct {
	value *InvTaskDebug
	isSet bool
}

func (v NullableInvTaskDebug) Get() *InvTaskDebug {
	return v.value
}

func (v *NullableInvTaskDebug) Set(val *InvTaskDebug) {
	v.value = val
	v.isSet = true
}

func (v NullableInvTaskDebug) IsSet() bool {
	return v.isSet
}

func (v *NullableInvTaskDebug) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvTaskDebug(val *InvTaskDebug) *NullableInvTaskDebug {
	return &NullableInvTaskDebug{value: val, isSet: true}
}

func (v NullableInvTaskDebug) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvTaskDebug) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
