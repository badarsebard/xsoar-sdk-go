/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Investigation A special investigation called playground is created for each user-project combination and is a private space for the researcher to play in.
type Investigation struct {
	ShardID      *int64 `json:"ShardID,omitempty"`
	AllRead      *bool  `json:"allRead,omitempty"`
	AllReadWrite *bool  `json:"allReadWrite,omitempty"`
	// Category of the investigation
	Category *string `json:"category,omitempty"`
	// ChildInvestigations id's
	ChildInvestigations *[]string `json:"childInvestigations,omitempty"`
	// When was this closed
	Closed *time.Time `json:"closed,omitempty"`
	// The user ID that closed this investigation
	ClosingUserId *string `json:"closingUserId,omitempty"`
	// When was this created
	Created *time.Time `json:"created,omitempty"`
	// The user ID that created this investigation
	CreatingUserId *string `json:"creatingUserId,omitempty"`
	// Who has created this event - relevant only for manual incidents
	DbotCreatedBy *string `json:"dbotCreatedBy,omitempty"`
	// User defined free text details
	Details *string `json:"details,omitempty"`
	// One time entitlements
	Entitlements *[]string `json:"entitlements,omitempty"`
	// EntryUsers
	EntryUsers *[]string `json:"entryUsers,omitempty"`
	// Internal field to make queries on role faster
	HasRole *bool `json:"hasRole,omitempty"`
	// HighPriority - tasks of this investigation should run in high priority
	HighPriority *bool                `json:"highPriority,omitempty"`
	Highlight    *map[string][]string `json:"highlight,omitempty"`
	Id           *string              `json:"id,omitempty"`
	// IsChildInvestigation
	IsChildInvestigation *bool `json:"isChildInvestigation,omitempty"`
	// IsDebug ...
	IsDebug  *bool      `json:"isDebug,omitempty"`
	LastOpen *time.Time `json:"lastOpen,omitempty"`
	// MirrorAutoClose will tell us to close the Chat Module channel if we close investigation
	MirrorAutoClose *map[string]bool `json:"mirrorAutoClose,omitempty"`
	// MirrorTypes holds info about mirror direction and message type to be mirrored message type can be either 'all' or 'chat' direction can be either 'FromDemisto', 'ToDemisto' or 'Both' if this investigation is mirrored
	MirrorTypes *map[string]string `json:"mirrorTypes,omitempty"`
	Modified    *time.Time         `json:"modified,omitempty"`
	// The name of the investigation, which is unique to the project
	Name      *string `json:"name,omitempty"`
	NumericId *int64  `json:"numericId,omitempty"`
	// Duration from open to close time
	OpenDuration *int64 `json:"openDuration,omitempty"`
	// ParentInvestigation - parent id, in case this is a child investigation of another investigation
	ParentInvestigation *string `json:"parentInvestigation,omitempty"`
	// Persistent entitlement per tag. Empty tag will also return an entitlement
	PersistentEntitlements *map[string]string `json:"persistentEntitlements,omitempty"`
	PreviousAllRead        *bool              `json:"previousAllRead,omitempty"`
	PreviousAllReadWrite   *bool              `json:"previousAllReadWrite,omitempty"`
	// Do not change this field manually
	PreviousRoles *[]string `json:"previousRoles,omitempty"`
	PrimaryTerm   *int64    `json:"primaryTerm,omitempty"`
	RawCategory   *string   `json:"rawCategory,omitempty"`
	// The reason for the status (resolve)
	Reason *map[string]string `json:"reason,omitempty"`
	// The role assigned to this investigation
	Roles *[]string `json:"roles,omitempty"`
	// RunStatus of a job
	RunStatus      *string `json:"runStatus,omitempty"`
	SequenceNumber *int64  `json:"sequenceNumber,omitempty"`
	// DEPRECATED - DeprecatedSlackMirrorAutoClose will tell us to close the Slack channel if we close investigation
	SlackMirrorAutoClose *bool `json:"slackMirrorAutoClose,omitempty"`
	// DEPRECATED - DeprecatedSlackMirrorType holds info about mirror direction and message type to be mirror message type can be either 'all' or 'chat' direction can be either 'demisto2Slack', 'slack2Demisto' or 'both' if this investigation is mirrored to Slack
	SlackMirrorType *string   `json:"slackMirrorType,omitempty"`
	SortValues      *[]string `json:"sortValues,omitempty"`
	// InvestigationStatus is the status type
	Status *float64 `json:"status,omitempty"`
	// The systems involved
	Systems *[]System `json:"systems,omitempty"`
	// Tags
	Tags *[]string `json:"tags,omitempty"`
	Type *float64  `json:"type,omitempty"`
	// The users who share this investigation
	Users                      *[]string `json:"users,omitempty"`
	Version                    *int64    `json:"version,omitempty"`
	XsoarHasReadOnlyRole       *bool     `json:"xsoarHasReadOnlyRole,omitempty"`
	XsoarPreviousReadOnlyRoles *[]string `json:"xsoarPreviousReadOnlyRoles,omitempty"`
	XsoarReadOnlyRoles         *[]string `json:"xsoarReadOnlyRoles,omitempty"`
}

// NewInvestigation instantiates a new Investigation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvestigation() *Investigation {
	this := Investigation{}
	return &this
}

// NewInvestigationWithDefaults instantiates a new Investigation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvestigationWithDefaults() *Investigation {
	this := Investigation{}
	return &this
}

// GetShardID returns the ShardID field value if set, zero value otherwise.
func (o *Investigation) GetShardID() int64 {
	if o == nil || o.ShardID == nil {
		var ret int64
		return ret
	}
	return *o.ShardID
}

// GetShardIDOk returns a tuple with the ShardID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetShardIDOk() (*int64, bool) {
	if o == nil || o.ShardID == nil {
		return nil, false
	}
	return o.ShardID, true
}

// HasShardID returns a boolean if a field has been set.
func (o *Investigation) HasShardID() bool {
	if o != nil && o.ShardID != nil {
		return true
	}

	return false
}

// SetShardID gets a reference to the given int64 and assigns it to the ShardID field.
func (o *Investigation) SetShardID(v int64) {
	o.ShardID = &v
}

// GetAllRead returns the AllRead field value if set, zero value otherwise.
func (o *Investigation) GetAllRead() bool {
	if o == nil || o.AllRead == nil {
		var ret bool
		return ret
	}
	return *o.AllRead
}

// GetAllReadOk returns a tuple with the AllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetAllReadOk() (*bool, bool) {
	if o == nil || o.AllRead == nil {
		return nil, false
	}
	return o.AllRead, true
}

// HasAllRead returns a boolean if a field has been set.
func (o *Investigation) HasAllRead() bool {
	if o != nil && o.AllRead != nil {
		return true
	}

	return false
}

// SetAllRead gets a reference to the given bool and assigns it to the AllRead field.
func (o *Investigation) SetAllRead(v bool) {
	o.AllRead = &v
}

// GetAllReadWrite returns the AllReadWrite field value if set, zero value otherwise.
func (o *Investigation) GetAllReadWrite() bool {
	if o == nil || o.AllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.AllReadWrite
}

// GetAllReadWriteOk returns a tuple with the AllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetAllReadWriteOk() (*bool, bool) {
	if o == nil || o.AllReadWrite == nil {
		return nil, false
	}
	return o.AllReadWrite, true
}

// HasAllReadWrite returns a boolean if a field has been set.
func (o *Investigation) HasAllReadWrite() bool {
	if o != nil && o.AllReadWrite != nil {
		return true
	}

	return false
}

// SetAllReadWrite gets a reference to the given bool and assigns it to the AllReadWrite field.
func (o *Investigation) SetAllReadWrite(v bool) {
	o.AllReadWrite = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Investigation) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Investigation) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Investigation) SetCategory(v string) {
	o.Category = &v
}

// GetChildInvestigations returns the ChildInvestigations field value if set, zero value otherwise.
func (o *Investigation) GetChildInvestigations() []string {
	if o == nil || o.ChildInvestigations == nil {
		var ret []string
		return ret
	}
	return *o.ChildInvestigations
}

// GetChildInvestigationsOk returns a tuple with the ChildInvestigations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetChildInvestigationsOk() (*[]string, bool) {
	if o == nil || o.ChildInvestigations == nil {
		return nil, false
	}
	return o.ChildInvestigations, true
}

// HasChildInvestigations returns a boolean if a field has been set.
func (o *Investigation) HasChildInvestigations() bool {
	if o != nil && o.ChildInvestigations != nil {
		return true
	}

	return false
}

// SetChildInvestigations gets a reference to the given []string and assigns it to the ChildInvestigations field.
func (o *Investigation) SetChildInvestigations(v []string) {
	o.ChildInvestigations = &v
}

// GetClosed returns the Closed field value if set, zero value otherwise.
func (o *Investigation) GetClosed() time.Time {
	if o == nil || o.Closed == nil {
		var ret time.Time
		return ret
	}
	return *o.Closed
}

// GetClosedOk returns a tuple with the Closed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetClosedOk() (*time.Time, bool) {
	if o == nil || o.Closed == nil {
		return nil, false
	}
	return o.Closed, true
}

// HasClosed returns a boolean if a field has been set.
func (o *Investigation) HasClosed() bool {
	if o != nil && o.Closed != nil {
		return true
	}

	return false
}

// SetClosed gets a reference to the given time.Time and assigns it to the Closed field.
func (o *Investigation) SetClosed(v time.Time) {
	o.Closed = &v
}

// GetClosingUserId returns the ClosingUserId field value if set, zero value otherwise.
func (o *Investigation) GetClosingUserId() string {
	if o == nil || o.ClosingUserId == nil {
		var ret string
		return ret
	}
	return *o.ClosingUserId
}

// GetClosingUserIdOk returns a tuple with the ClosingUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetClosingUserIdOk() (*string, bool) {
	if o == nil || o.ClosingUserId == nil {
		return nil, false
	}
	return o.ClosingUserId, true
}

// HasClosingUserId returns a boolean if a field has been set.
func (o *Investigation) HasClosingUserId() bool {
	if o != nil && o.ClosingUserId != nil {
		return true
	}

	return false
}

// SetClosingUserId gets a reference to the given string and assigns it to the ClosingUserId field.
func (o *Investigation) SetClosingUserId(v string) {
	o.ClosingUserId = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Investigation) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Investigation) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Investigation) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatingUserId returns the CreatingUserId field value if set, zero value otherwise.
func (o *Investigation) GetCreatingUserId() string {
	if o == nil || o.CreatingUserId == nil {
		var ret string
		return ret
	}
	return *o.CreatingUserId
}

// GetCreatingUserIdOk returns a tuple with the CreatingUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetCreatingUserIdOk() (*string, bool) {
	if o == nil || o.CreatingUserId == nil {
		return nil, false
	}
	return o.CreatingUserId, true
}

// HasCreatingUserId returns a boolean if a field has been set.
func (o *Investigation) HasCreatingUserId() bool {
	if o != nil && o.CreatingUserId != nil {
		return true
	}

	return false
}

// SetCreatingUserId gets a reference to the given string and assigns it to the CreatingUserId field.
func (o *Investigation) SetCreatingUserId(v string) {
	o.CreatingUserId = &v
}

// GetDbotCreatedBy returns the DbotCreatedBy field value if set, zero value otherwise.
func (o *Investigation) GetDbotCreatedBy() string {
	if o == nil || o.DbotCreatedBy == nil {
		var ret string
		return ret
	}
	return *o.DbotCreatedBy
}

// GetDbotCreatedByOk returns a tuple with the DbotCreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetDbotCreatedByOk() (*string, bool) {
	if o == nil || o.DbotCreatedBy == nil {
		return nil, false
	}
	return o.DbotCreatedBy, true
}

// HasDbotCreatedBy returns a boolean if a field has been set.
func (o *Investigation) HasDbotCreatedBy() bool {
	if o != nil && o.DbotCreatedBy != nil {
		return true
	}

	return false
}

// SetDbotCreatedBy gets a reference to the given string and assigns it to the DbotCreatedBy field.
func (o *Investigation) SetDbotCreatedBy(v string) {
	o.DbotCreatedBy = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Investigation) GetDetails() string {
	if o == nil || o.Details == nil {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetDetailsOk() (*string, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Investigation) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *Investigation) SetDetails(v string) {
	o.Details = &v
}

// GetEntitlements returns the Entitlements field value if set, zero value otherwise.
func (o *Investigation) GetEntitlements() []string {
	if o == nil || o.Entitlements == nil {
		var ret []string
		return ret
	}
	return *o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetEntitlementsOk() (*[]string, bool) {
	if o == nil || o.Entitlements == nil {
		return nil, false
	}
	return o.Entitlements, true
}

// HasEntitlements returns a boolean if a field has been set.
func (o *Investigation) HasEntitlements() bool {
	if o != nil && o.Entitlements != nil {
		return true
	}

	return false
}

// SetEntitlements gets a reference to the given []string and assigns it to the Entitlements field.
func (o *Investigation) SetEntitlements(v []string) {
	o.Entitlements = &v
}

// GetEntryUsers returns the EntryUsers field value if set, zero value otherwise.
func (o *Investigation) GetEntryUsers() []string {
	if o == nil || o.EntryUsers == nil {
		var ret []string
		return ret
	}
	return *o.EntryUsers
}

// GetEntryUsersOk returns a tuple with the EntryUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetEntryUsersOk() (*[]string, bool) {
	if o == nil || o.EntryUsers == nil {
		return nil, false
	}
	return o.EntryUsers, true
}

// HasEntryUsers returns a boolean if a field has been set.
func (o *Investigation) HasEntryUsers() bool {
	if o != nil && o.EntryUsers != nil {
		return true
	}

	return false
}

// SetEntryUsers gets a reference to the given []string and assigns it to the EntryUsers field.
func (o *Investigation) SetEntryUsers(v []string) {
	o.EntryUsers = &v
}

// GetHasRole returns the HasRole field value if set, zero value otherwise.
func (o *Investigation) GetHasRole() bool {
	if o == nil || o.HasRole == nil {
		var ret bool
		return ret
	}
	return *o.HasRole
}

// GetHasRoleOk returns a tuple with the HasRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetHasRoleOk() (*bool, bool) {
	if o == nil || o.HasRole == nil {
		return nil, false
	}
	return o.HasRole, true
}

// HasHasRole returns a boolean if a field has been set.
func (o *Investigation) HasHasRole() bool {
	if o != nil && o.HasRole != nil {
		return true
	}

	return false
}

// SetHasRole gets a reference to the given bool and assigns it to the HasRole field.
func (o *Investigation) SetHasRole(v bool) {
	o.HasRole = &v
}

// GetHighPriority returns the HighPriority field value if set, zero value otherwise.
func (o *Investigation) GetHighPriority() bool {
	if o == nil || o.HighPriority == nil {
		var ret bool
		return ret
	}
	return *o.HighPriority
}

// GetHighPriorityOk returns a tuple with the HighPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetHighPriorityOk() (*bool, bool) {
	if o == nil || o.HighPriority == nil {
		return nil, false
	}
	return o.HighPriority, true
}

// HasHighPriority returns a boolean if a field has been set.
func (o *Investigation) HasHighPriority() bool {
	if o != nil && o.HighPriority != nil {
		return true
	}

	return false
}

// SetHighPriority gets a reference to the given bool and assigns it to the HighPriority field.
func (o *Investigation) SetHighPriority(v bool) {
	o.HighPriority = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *Investigation) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *Investigation) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *Investigation) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Investigation) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Investigation) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Investigation) SetId(v string) {
	o.Id = &v
}

// GetIsChildInvestigation returns the IsChildInvestigation field value if set, zero value otherwise.
func (o *Investigation) GetIsChildInvestigation() bool {
	if o == nil || o.IsChildInvestigation == nil {
		var ret bool
		return ret
	}
	return *o.IsChildInvestigation
}

// GetIsChildInvestigationOk returns a tuple with the IsChildInvestigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetIsChildInvestigationOk() (*bool, bool) {
	if o == nil || o.IsChildInvestigation == nil {
		return nil, false
	}
	return o.IsChildInvestigation, true
}

// HasIsChildInvestigation returns a boolean if a field has been set.
func (o *Investigation) HasIsChildInvestigation() bool {
	if o != nil && o.IsChildInvestigation != nil {
		return true
	}

	return false
}

// SetIsChildInvestigation gets a reference to the given bool and assigns it to the IsChildInvestigation field.
func (o *Investigation) SetIsChildInvestigation(v bool) {
	o.IsChildInvestigation = &v
}

// GetIsDebug returns the IsDebug field value if set, zero value otherwise.
func (o *Investigation) GetIsDebug() bool {
	if o == nil || o.IsDebug == nil {
		var ret bool
		return ret
	}
	return *o.IsDebug
}

// GetIsDebugOk returns a tuple with the IsDebug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetIsDebugOk() (*bool, bool) {
	if o == nil || o.IsDebug == nil {
		return nil, false
	}
	return o.IsDebug, true
}

// HasIsDebug returns a boolean if a field has been set.
func (o *Investigation) HasIsDebug() bool {
	if o != nil && o.IsDebug != nil {
		return true
	}

	return false
}

// SetIsDebug gets a reference to the given bool and assigns it to the IsDebug field.
func (o *Investigation) SetIsDebug(v bool) {
	o.IsDebug = &v
}

// GetLastOpen returns the LastOpen field value if set, zero value otherwise.
func (o *Investigation) GetLastOpen() time.Time {
	if o == nil || o.LastOpen == nil {
		var ret time.Time
		return ret
	}
	return *o.LastOpen
}

// GetLastOpenOk returns a tuple with the LastOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetLastOpenOk() (*time.Time, bool) {
	if o == nil || o.LastOpen == nil {
		return nil, false
	}
	return o.LastOpen, true
}

// HasLastOpen returns a boolean if a field has been set.
func (o *Investigation) HasLastOpen() bool {
	if o != nil && o.LastOpen != nil {
		return true
	}

	return false
}

// SetLastOpen gets a reference to the given time.Time and assigns it to the LastOpen field.
func (o *Investigation) SetLastOpen(v time.Time) {
	o.LastOpen = &v
}

// GetMirrorAutoClose returns the MirrorAutoClose field value if set, zero value otherwise.
func (o *Investigation) GetMirrorAutoClose() map[string]bool {
	if o == nil || o.MirrorAutoClose == nil {
		var ret map[string]bool
		return ret
	}
	return *o.MirrorAutoClose
}

// GetMirrorAutoCloseOk returns a tuple with the MirrorAutoClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetMirrorAutoCloseOk() (*map[string]bool, bool) {
	if o == nil || o.MirrorAutoClose == nil {
		return nil, false
	}
	return o.MirrorAutoClose, true
}

// HasMirrorAutoClose returns a boolean if a field has been set.
func (o *Investigation) HasMirrorAutoClose() bool {
	if o != nil && o.MirrorAutoClose != nil {
		return true
	}

	return false
}

// SetMirrorAutoClose gets a reference to the given map[string]bool and assigns it to the MirrorAutoClose field.
func (o *Investigation) SetMirrorAutoClose(v map[string]bool) {
	o.MirrorAutoClose = &v
}

// GetMirrorTypes returns the MirrorTypes field value if set, zero value otherwise.
func (o *Investigation) GetMirrorTypes() map[string]string {
	if o == nil || o.MirrorTypes == nil {
		var ret map[string]string
		return ret
	}
	return *o.MirrorTypes
}

// GetMirrorTypesOk returns a tuple with the MirrorTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetMirrorTypesOk() (*map[string]string, bool) {
	if o == nil || o.MirrorTypes == nil {
		return nil, false
	}
	return o.MirrorTypes, true
}

// HasMirrorTypes returns a boolean if a field has been set.
func (o *Investigation) HasMirrorTypes() bool {
	if o != nil && o.MirrorTypes != nil {
		return true
	}

	return false
}

// SetMirrorTypes gets a reference to the given map[string]string and assigns it to the MirrorTypes field.
func (o *Investigation) SetMirrorTypes(v map[string]string) {
	o.MirrorTypes = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Investigation) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Investigation) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Investigation) SetModified(v time.Time) {
	o.Modified = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Investigation) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Investigation) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Investigation) SetName(v string) {
	o.Name = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *Investigation) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *Investigation) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *Investigation) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetOpenDuration returns the OpenDuration field value if set, zero value otherwise.
func (o *Investigation) GetOpenDuration() int64 {
	if o == nil || o.OpenDuration == nil {
		var ret int64
		return ret
	}
	return *o.OpenDuration
}

// GetOpenDurationOk returns a tuple with the OpenDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetOpenDurationOk() (*int64, bool) {
	if o == nil || o.OpenDuration == nil {
		return nil, false
	}
	return o.OpenDuration, true
}

// HasOpenDuration returns a boolean if a field has been set.
func (o *Investigation) HasOpenDuration() bool {
	if o != nil && o.OpenDuration != nil {
		return true
	}

	return false
}

// SetOpenDuration gets a reference to the given int64 and assigns it to the OpenDuration field.
func (o *Investigation) SetOpenDuration(v int64) {
	o.OpenDuration = &v
}

// GetParentInvestigation returns the ParentInvestigation field value if set, zero value otherwise.
func (o *Investigation) GetParentInvestigation() string {
	if o == nil || o.ParentInvestigation == nil {
		var ret string
		return ret
	}
	return *o.ParentInvestigation
}

// GetParentInvestigationOk returns a tuple with the ParentInvestigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetParentInvestigationOk() (*string, bool) {
	if o == nil || o.ParentInvestigation == nil {
		return nil, false
	}
	return o.ParentInvestigation, true
}

// HasParentInvestigation returns a boolean if a field has been set.
func (o *Investigation) HasParentInvestigation() bool {
	if o != nil && o.ParentInvestigation != nil {
		return true
	}

	return false
}

// SetParentInvestigation gets a reference to the given string and assigns it to the ParentInvestigation field.
func (o *Investigation) SetParentInvestigation(v string) {
	o.ParentInvestigation = &v
}

// GetPersistentEntitlements returns the PersistentEntitlements field value if set, zero value otherwise.
func (o *Investigation) GetPersistentEntitlements() map[string]string {
	if o == nil || o.PersistentEntitlements == nil {
		var ret map[string]string
		return ret
	}
	return *o.PersistentEntitlements
}

// GetPersistentEntitlementsOk returns a tuple with the PersistentEntitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetPersistentEntitlementsOk() (*map[string]string, bool) {
	if o == nil || o.PersistentEntitlements == nil {
		return nil, false
	}
	return o.PersistentEntitlements, true
}

// HasPersistentEntitlements returns a boolean if a field has been set.
func (o *Investigation) HasPersistentEntitlements() bool {
	if o != nil && o.PersistentEntitlements != nil {
		return true
	}

	return false
}

// SetPersistentEntitlements gets a reference to the given map[string]string and assigns it to the PersistentEntitlements field.
func (o *Investigation) SetPersistentEntitlements(v map[string]string) {
	o.PersistentEntitlements = &v
}

// GetPreviousAllRead returns the PreviousAllRead field value if set, zero value otherwise.
func (o *Investigation) GetPreviousAllRead() bool {
	if o == nil || o.PreviousAllRead == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllRead
}

// GetPreviousAllReadOk returns a tuple with the PreviousAllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetPreviousAllReadOk() (*bool, bool) {
	if o == nil || o.PreviousAllRead == nil {
		return nil, false
	}
	return o.PreviousAllRead, true
}

// HasPreviousAllRead returns a boolean if a field has been set.
func (o *Investigation) HasPreviousAllRead() bool {
	if o != nil && o.PreviousAllRead != nil {
		return true
	}

	return false
}

// SetPreviousAllRead gets a reference to the given bool and assigns it to the PreviousAllRead field.
func (o *Investigation) SetPreviousAllRead(v bool) {
	o.PreviousAllRead = &v
}

// GetPreviousAllReadWrite returns the PreviousAllReadWrite field value if set, zero value otherwise.
func (o *Investigation) GetPreviousAllReadWrite() bool {
	if o == nil || o.PreviousAllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllReadWrite
}

// GetPreviousAllReadWriteOk returns a tuple with the PreviousAllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetPreviousAllReadWriteOk() (*bool, bool) {
	if o == nil || o.PreviousAllReadWrite == nil {
		return nil, false
	}
	return o.PreviousAllReadWrite, true
}

// HasPreviousAllReadWrite returns a boolean if a field has been set.
func (o *Investigation) HasPreviousAllReadWrite() bool {
	if o != nil && o.PreviousAllReadWrite != nil {
		return true
	}

	return false
}

// SetPreviousAllReadWrite gets a reference to the given bool and assigns it to the PreviousAllReadWrite field.
func (o *Investigation) SetPreviousAllReadWrite(v bool) {
	o.PreviousAllReadWrite = &v
}

// GetPreviousRoles returns the PreviousRoles field value if set, zero value otherwise.
func (o *Investigation) GetPreviousRoles() []string {
	if o == nil || o.PreviousRoles == nil {
		var ret []string
		return ret
	}
	return *o.PreviousRoles
}

// GetPreviousRolesOk returns a tuple with the PreviousRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetPreviousRolesOk() (*[]string, bool) {
	if o == nil || o.PreviousRoles == nil {
		return nil, false
	}
	return o.PreviousRoles, true
}

// HasPreviousRoles returns a boolean if a field has been set.
func (o *Investigation) HasPreviousRoles() bool {
	if o != nil && o.PreviousRoles != nil {
		return true
	}

	return false
}

// SetPreviousRoles gets a reference to the given []string and assigns it to the PreviousRoles field.
func (o *Investigation) SetPreviousRoles(v []string) {
	o.PreviousRoles = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *Investigation) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *Investigation) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *Investigation) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetRawCategory returns the RawCategory field value if set, zero value otherwise.
func (o *Investigation) GetRawCategory() string {
	if o == nil || o.RawCategory == nil {
		var ret string
		return ret
	}
	return *o.RawCategory
}

// GetRawCategoryOk returns a tuple with the RawCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetRawCategoryOk() (*string, bool) {
	if o == nil || o.RawCategory == nil {
		return nil, false
	}
	return o.RawCategory, true
}

// HasRawCategory returns a boolean if a field has been set.
func (o *Investigation) HasRawCategory() bool {
	if o != nil && o.RawCategory != nil {
		return true
	}

	return false
}

// SetRawCategory gets a reference to the given string and assigns it to the RawCategory field.
func (o *Investigation) SetRawCategory(v string) {
	o.RawCategory = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Investigation) GetReason() map[string]string {
	if o == nil || o.Reason == nil {
		var ret map[string]string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetReasonOk() (*map[string]string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Investigation) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given map[string]string and assigns it to the Reason field.
func (o *Investigation) SetReason(v map[string]string) {
	o.Reason = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Investigation) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Investigation) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *Investigation) SetRoles(v []string) {
	o.Roles = &v
}

// GetRunStatus returns the RunStatus field value if set, zero value otherwise.
func (o *Investigation) GetRunStatus() string {
	if o == nil || o.RunStatus == nil {
		var ret string
		return ret
	}
	return *o.RunStatus
}

// GetRunStatusOk returns a tuple with the RunStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetRunStatusOk() (*string, bool) {
	if o == nil || o.RunStatus == nil {
		return nil, false
	}
	return o.RunStatus, true
}

// HasRunStatus returns a boolean if a field has been set.
func (o *Investigation) HasRunStatus() bool {
	if o != nil && o.RunStatus != nil {
		return true
	}

	return false
}

// SetRunStatus gets a reference to the given string and assigns it to the RunStatus field.
func (o *Investigation) SetRunStatus(v string) {
	o.RunStatus = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *Investigation) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *Investigation) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *Investigation) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetSlackMirrorAutoClose returns the SlackMirrorAutoClose field value if set, zero value otherwise.
func (o *Investigation) GetSlackMirrorAutoClose() bool {
	if o == nil || o.SlackMirrorAutoClose == nil {
		var ret bool
		return ret
	}
	return *o.SlackMirrorAutoClose
}

// GetSlackMirrorAutoCloseOk returns a tuple with the SlackMirrorAutoClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetSlackMirrorAutoCloseOk() (*bool, bool) {
	if o == nil || o.SlackMirrorAutoClose == nil {
		return nil, false
	}
	return o.SlackMirrorAutoClose, true
}

// HasSlackMirrorAutoClose returns a boolean if a field has been set.
func (o *Investigation) HasSlackMirrorAutoClose() bool {
	if o != nil && o.SlackMirrorAutoClose != nil {
		return true
	}

	return false
}

// SetSlackMirrorAutoClose gets a reference to the given bool and assigns it to the SlackMirrorAutoClose field.
func (o *Investigation) SetSlackMirrorAutoClose(v bool) {
	o.SlackMirrorAutoClose = &v
}

// GetSlackMirrorType returns the SlackMirrorType field value if set, zero value otherwise.
func (o *Investigation) GetSlackMirrorType() string {
	if o == nil || o.SlackMirrorType == nil {
		var ret string
		return ret
	}
	return *o.SlackMirrorType
}

// GetSlackMirrorTypeOk returns a tuple with the SlackMirrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetSlackMirrorTypeOk() (*string, bool) {
	if o == nil || o.SlackMirrorType == nil {
		return nil, false
	}
	return o.SlackMirrorType, true
}

// HasSlackMirrorType returns a boolean if a field has been set.
func (o *Investigation) HasSlackMirrorType() bool {
	if o != nil && o.SlackMirrorType != nil {
		return true
	}

	return false
}

// SetSlackMirrorType gets a reference to the given string and assigns it to the SlackMirrorType field.
func (o *Investigation) SetSlackMirrorType(v string) {
	o.SlackMirrorType = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *Investigation) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *Investigation) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *Investigation) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Investigation) GetStatus() float64 {
	if o == nil || o.Status == nil {
		var ret float64
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetStatusOk() (*float64, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Investigation) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given float64 and assigns it to the Status field.
func (o *Investigation) SetStatus(v float64) {
	o.Status = &v
}

// GetSystems returns the Systems field value if set, zero value otherwise.
func (o *Investigation) GetSystems() []System {
	if o == nil || o.Systems == nil {
		var ret []System
		return ret
	}
	return *o.Systems
}

// GetSystemsOk returns a tuple with the Systems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetSystemsOk() (*[]System, bool) {
	if o == nil || o.Systems == nil {
		return nil, false
	}
	return o.Systems, true
}

// HasSystems returns a boolean if a field has been set.
func (o *Investigation) HasSystems() bool {
	if o != nil && o.Systems != nil {
		return true
	}

	return false
}

// SetSystems gets a reference to the given []System and assigns it to the Systems field.
func (o *Investigation) SetSystems(v []System) {
	o.Systems = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Investigation) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Investigation) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Investigation) SetTags(v []string) {
	o.Tags = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Investigation) GetType() float64 {
	if o == nil || o.Type == nil {
		var ret float64
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetTypeOk() (*float64, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Investigation) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given float64 and assigns it to the Type field.
func (o *Investigation) SetType(v float64) {
	o.Type = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *Investigation) GetUsers() []string {
	if o == nil || o.Users == nil {
		var ret []string
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetUsersOk() (*[]string, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *Investigation) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []string and assigns it to the Users field.
func (o *Investigation) SetUsers(v []string) {
	o.Users = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Investigation) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Investigation) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *Investigation) SetVersion(v int64) {
	o.Version = &v
}

// GetXsoarHasReadOnlyRole returns the XsoarHasReadOnlyRole field value if set, zero value otherwise.
func (o *Investigation) GetXsoarHasReadOnlyRole() bool {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		var ret bool
		return ret
	}
	return *o.XsoarHasReadOnlyRole
}

// GetXsoarHasReadOnlyRoleOk returns a tuple with the XsoarHasReadOnlyRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetXsoarHasReadOnlyRoleOk() (*bool, bool) {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		return nil, false
	}
	return o.XsoarHasReadOnlyRole, true
}

// HasXsoarHasReadOnlyRole returns a boolean if a field has been set.
func (o *Investigation) HasXsoarHasReadOnlyRole() bool {
	if o != nil && o.XsoarHasReadOnlyRole != nil {
		return true
	}

	return false
}

// SetXsoarHasReadOnlyRole gets a reference to the given bool and assigns it to the XsoarHasReadOnlyRole field.
func (o *Investigation) SetXsoarHasReadOnlyRole(v bool) {
	o.XsoarHasReadOnlyRole = &v
}

// GetXsoarPreviousReadOnlyRoles returns the XsoarPreviousReadOnlyRoles field value if set, zero value otherwise.
func (o *Investigation) GetXsoarPreviousReadOnlyRoles() []string {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarPreviousReadOnlyRoles
}

// GetXsoarPreviousReadOnlyRolesOk returns a tuple with the XsoarPreviousReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetXsoarPreviousReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarPreviousReadOnlyRoles, true
}

// HasXsoarPreviousReadOnlyRoles returns a boolean if a field has been set.
func (o *Investigation) HasXsoarPreviousReadOnlyRoles() bool {
	if o != nil && o.XsoarPreviousReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarPreviousReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarPreviousReadOnlyRoles field.
func (o *Investigation) SetXsoarPreviousReadOnlyRoles(v []string) {
	o.XsoarPreviousReadOnlyRoles = &v
}

// GetXsoarReadOnlyRoles returns the XsoarReadOnlyRoles field value if set, zero value otherwise.
func (o *Investigation) GetXsoarReadOnlyRoles() []string {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarReadOnlyRoles
}

// GetXsoarReadOnlyRolesOk returns a tuple with the XsoarReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investigation) GetXsoarReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarReadOnlyRoles, true
}

// HasXsoarReadOnlyRoles returns a boolean if a field has been set.
func (o *Investigation) HasXsoarReadOnlyRoles() bool {
	if o != nil && o.XsoarReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarReadOnlyRoles field.
func (o *Investigation) SetXsoarReadOnlyRoles(v []string) {
	o.XsoarReadOnlyRoles = &v
}

func (o Investigation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ShardID != nil {
		toSerialize["ShardID"] = o.ShardID
	}
	if o.AllRead != nil {
		toSerialize["allRead"] = o.AllRead
	}
	if o.AllReadWrite != nil {
		toSerialize["allReadWrite"] = o.AllReadWrite
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.ChildInvestigations != nil {
		toSerialize["childInvestigations"] = o.ChildInvestigations
	}
	if o.Closed != nil {
		toSerialize["closed"] = o.Closed
	}
	if o.ClosingUserId != nil {
		toSerialize["closingUserId"] = o.ClosingUserId
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.CreatingUserId != nil {
		toSerialize["creatingUserId"] = o.CreatingUserId
	}
	if o.DbotCreatedBy != nil {
		toSerialize["dbotCreatedBy"] = o.DbotCreatedBy
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	if o.Entitlements != nil {
		toSerialize["entitlements"] = o.Entitlements
	}
	if o.EntryUsers != nil {
		toSerialize["entryUsers"] = o.EntryUsers
	}
	if o.HasRole != nil {
		toSerialize["hasRole"] = o.HasRole
	}
	if o.HighPriority != nil {
		toSerialize["highPriority"] = o.HighPriority
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsChildInvestigation != nil {
		toSerialize["isChildInvestigation"] = o.IsChildInvestigation
	}
	if o.IsDebug != nil {
		toSerialize["isDebug"] = o.IsDebug
	}
	if o.LastOpen != nil {
		toSerialize["lastOpen"] = o.LastOpen
	}
	if o.MirrorAutoClose != nil {
		toSerialize["mirrorAutoClose"] = o.MirrorAutoClose
	}
	if o.MirrorTypes != nil {
		toSerialize["mirrorTypes"] = o.MirrorTypes
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.OpenDuration != nil {
		toSerialize["openDuration"] = o.OpenDuration
	}
	if o.ParentInvestigation != nil {
		toSerialize["parentInvestigation"] = o.ParentInvestigation
	}
	if o.PersistentEntitlements != nil {
		toSerialize["persistentEntitlements"] = o.PersistentEntitlements
	}
	if o.PreviousAllRead != nil {
		toSerialize["previousAllRead"] = o.PreviousAllRead
	}
	if o.PreviousAllReadWrite != nil {
		toSerialize["previousAllReadWrite"] = o.PreviousAllReadWrite
	}
	if o.PreviousRoles != nil {
		toSerialize["previousRoles"] = o.PreviousRoles
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.RawCategory != nil {
		toSerialize["rawCategory"] = o.RawCategory
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.RunStatus != nil {
		toSerialize["runStatus"] = o.RunStatus
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.SlackMirrorAutoClose != nil {
		toSerialize["slackMirrorAutoClose"] = o.SlackMirrorAutoClose
	}
	if o.SlackMirrorType != nil {
		toSerialize["slackMirrorType"] = o.SlackMirrorType
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Systems != nil {
		toSerialize["systems"] = o.Systems
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.XsoarHasReadOnlyRole != nil {
		toSerialize["xsoarHasReadOnlyRole"] = o.XsoarHasReadOnlyRole
	}
	if o.XsoarPreviousReadOnlyRoles != nil {
		toSerialize["xsoarPreviousReadOnlyRoles"] = o.XsoarPreviousReadOnlyRoles
	}
	if o.XsoarReadOnlyRoles != nil {
		toSerialize["xsoarReadOnlyRoles"] = o.XsoarReadOnlyRoles
	}
	return json.Marshal(toSerialize)
}

type NullableInvestigation struct {
	value *Investigation
	isSet bool
}

func (v NullableInvestigation) Get() *Investigation {
	return v.value
}

func (v *NullableInvestigation) Set(val *Investigation) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestigation) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestigation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestigation(val *Investigation) *NullableInvestigation {
	return &NullableInvestigation{value: val, isSet: true}
}

func (v NullableInvestigation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestigation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
