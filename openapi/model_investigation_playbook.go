/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// InvestigationPlaybook InvestigationPlaybook is a wrapper for a linked list of Playbook tasks
type InvestigationPlaybook struct {
	Dirty               *bool                                         `json:"Dirty,omitempty"`
	ReadyPlaybookInputs *map[string]map[string]map[string]interface{} `json:"ReadyPlaybookInputs,omitempty"`
	// Indicate whether this playbook has new history during this session
	ReplacedPlaybook   *bool   `json:"ReplacedPlaybook,omitempty"`
	ShardID            *int64  `json:"ShardID,omitempty"`
	UpdatedOperatorIDs *bool   `json:"UpdatedOperatorIDs,omitempty"`
	AllRead            *bool   `json:"allRead,omitempty"`
	AllReadWrite       *bool   `json:"allReadWrite,omitempty"`
	AutoExtracting     *bool   `json:"autoExtracting,omitempty"`
	Comment            *string `json:"comment,omitempty"`
	// Who has created this event - relevant only for manual incidents
	DbotCreatedBy *string `json:"dbotCreatedBy,omitempty"`
	// Internal field to make queries on role faster
	HasRole   *bool                `json:"hasRole,omitempty"`
	Highlight *map[string][]string `json:"highlight,omitempty"`
	Id        *string              `json:"id,omitempty"`
	// Incident create date
	IncidentCreateDate *time.Time `json:"incidentCreateDate,omitempty"`
	// PlaybookInputs - array of PlaybookInput
	Inputs          *[]PlaybookInput      `json:"inputs,omitempty"`
	InvPBDebugInfo  *InvPlaybookDebugInfo `json:"invPBDebugInfo,omitempty"`
	InvestigationId *string               `json:"investigationId,omitempty"`
	IsTIM           *bool                 `json:"isTIM,omitempty"`
	Modified        *time.Time            `json:"modified,omitempty"`
	Name            *string               `json:"name,omitempty"`
	NumericId       *int64                `json:"numericId,omitempty"`
	// PlaybookOutputs - array of PlaybookOutput
	Outputs *[]PlaybookOutput `json:"outputs,omitempty"`
	// in: body
	PbHistory *[]InvestigationPlaybookData `json:"pbHistory,omitempty"`
	// Tasks that are marked for running, but cannot yet run due to incomplete parents
	PendingTasks         *map[string]map[string]interface{} `json:"pendingTasks,omitempty"`
	PlaybookId           *string                            `json:"playbookId,omitempty"`
	PreviousAllRead      *bool                              `json:"previousAllRead,omitempty"`
	PreviousAllReadWrite *bool                              `json:"previousAllReadWrite,omitempty"`
	// Do not change this field manually
	PreviousRoles    *[]string `json:"previousRoles,omitempty"`
	PrimaryTerm      *int64    `json:"primaryTerm,omitempty"`
	Quiet            *bool     `json:"quiet,omitempty"`
	RecoveryAttempts *int64    `json:"recoveryAttempts,omitempty"`
	// The role assigned to this investigation
	Roles          *[]string `json:"roles,omitempty"`
	SequenceNumber *int64    `json:"sequenceNumber,omitempty"`
	// Holds the ID of the responsible cluster app server
	ServerId   *string    `json:"serverId,omitempty"`
	SortValues *[]string  `json:"sortValues,omitempty"`
	StartDate  *time.Time `json:"startDate,omitempty"`
	// FirstTask is the root task of the playbook
	StartTaskId *string `json:"startTaskId,omitempty"`
	// InvestigationPlaybookState indicates the state of the running playbook
	State              *string                               `json:"state,omitempty"`
	SubPlaybookInputs  *map[string][]PlaybookInput           `json:"subPlaybookInputs,omitempty"`
	SubPlaybookOutputs *map[string][]PlaybookOutput          `json:"subPlaybookOutputs,omitempty"`
	Tasks              *map[string]InvestigationPlaybookTask `json:"tasks,omitempty"`
	Version            *int64                                `json:"version,omitempty"`
	// PlaybookView represents the view in client of playbook graph
	View                       *map[string]interface{} `json:"view,omitempty"`
	XsoarHasReadOnlyRole       *bool                   `json:"xsoarHasReadOnlyRole,omitempty"`
	XsoarPreviousReadOnlyRoles *[]string               `json:"xsoarPreviousReadOnlyRoles,omitempty"`
	XsoarReadOnlyRoles         *[]string               `json:"xsoarReadOnlyRoles,omitempty"`
}

// NewInvestigationPlaybook instantiates a new InvestigationPlaybook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvestigationPlaybook() *InvestigationPlaybook {
	this := InvestigationPlaybook{}
	return &this
}

// NewInvestigationPlaybookWithDefaults instantiates a new InvestigationPlaybook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvestigationPlaybookWithDefaults() *InvestigationPlaybook {
	this := InvestigationPlaybook{}
	return &this
}

// GetDirty returns the Dirty field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetDirty() bool {
	if o == nil || o.Dirty == nil {
		var ret bool
		return ret
	}
	return *o.Dirty
}

// GetDirtyOk returns a tuple with the Dirty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetDirtyOk() (*bool, bool) {
	if o == nil || o.Dirty == nil {
		return nil, false
	}
	return o.Dirty, true
}

// HasDirty returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasDirty() bool {
	if o != nil && o.Dirty != nil {
		return true
	}

	return false
}

// SetDirty gets a reference to the given bool and assigns it to the Dirty field.
func (o *InvestigationPlaybook) SetDirty(v bool) {
	o.Dirty = &v
}

// GetReadyPlaybookInputs returns the ReadyPlaybookInputs field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetReadyPlaybookInputs() map[string]map[string]map[string]interface{} {
	if o == nil || o.ReadyPlaybookInputs == nil {
		var ret map[string]map[string]map[string]interface{}
		return ret
	}
	return *o.ReadyPlaybookInputs
}

// GetReadyPlaybookInputsOk returns a tuple with the ReadyPlaybookInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetReadyPlaybookInputsOk() (*map[string]map[string]map[string]interface{}, bool) {
	if o == nil || o.ReadyPlaybookInputs == nil {
		return nil, false
	}
	return o.ReadyPlaybookInputs, true
}

// HasReadyPlaybookInputs returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasReadyPlaybookInputs() bool {
	if o != nil && o.ReadyPlaybookInputs != nil {
		return true
	}

	return false
}

// SetReadyPlaybookInputs gets a reference to the given map[string]map[string]map[string]interface{} and assigns it to the ReadyPlaybookInputs field.
func (o *InvestigationPlaybook) SetReadyPlaybookInputs(v map[string]map[string]map[string]interface{}) {
	o.ReadyPlaybookInputs = &v
}

// GetReplacedPlaybook returns the ReplacedPlaybook field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetReplacedPlaybook() bool {
	if o == nil || o.ReplacedPlaybook == nil {
		var ret bool
		return ret
	}
	return *o.ReplacedPlaybook
}

// GetReplacedPlaybookOk returns a tuple with the ReplacedPlaybook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetReplacedPlaybookOk() (*bool, bool) {
	if o == nil || o.ReplacedPlaybook == nil {
		return nil, false
	}
	return o.ReplacedPlaybook, true
}

// HasReplacedPlaybook returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasReplacedPlaybook() bool {
	if o != nil && o.ReplacedPlaybook != nil {
		return true
	}

	return false
}

// SetReplacedPlaybook gets a reference to the given bool and assigns it to the ReplacedPlaybook field.
func (o *InvestigationPlaybook) SetReplacedPlaybook(v bool) {
	o.ReplacedPlaybook = &v
}

// GetShardID returns the ShardID field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetShardID() int64 {
	if o == nil || o.ShardID == nil {
		var ret int64
		return ret
	}
	return *o.ShardID
}

// GetShardIDOk returns a tuple with the ShardID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetShardIDOk() (*int64, bool) {
	if o == nil || o.ShardID == nil {
		return nil, false
	}
	return o.ShardID, true
}

// HasShardID returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasShardID() bool {
	if o != nil && o.ShardID != nil {
		return true
	}

	return false
}

// SetShardID gets a reference to the given int64 and assigns it to the ShardID field.
func (o *InvestigationPlaybook) SetShardID(v int64) {
	o.ShardID = &v
}

// GetUpdatedOperatorIDs returns the UpdatedOperatorIDs field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetUpdatedOperatorIDs() bool {
	if o == nil || o.UpdatedOperatorIDs == nil {
		var ret bool
		return ret
	}
	return *o.UpdatedOperatorIDs
}

// GetUpdatedOperatorIDsOk returns a tuple with the UpdatedOperatorIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetUpdatedOperatorIDsOk() (*bool, bool) {
	if o == nil || o.UpdatedOperatorIDs == nil {
		return nil, false
	}
	return o.UpdatedOperatorIDs, true
}

// HasUpdatedOperatorIDs returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasUpdatedOperatorIDs() bool {
	if o != nil && o.UpdatedOperatorIDs != nil {
		return true
	}

	return false
}

// SetUpdatedOperatorIDs gets a reference to the given bool and assigns it to the UpdatedOperatorIDs field.
func (o *InvestigationPlaybook) SetUpdatedOperatorIDs(v bool) {
	o.UpdatedOperatorIDs = &v
}

// GetAllRead returns the AllRead field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetAllRead() bool {
	if o == nil || o.AllRead == nil {
		var ret bool
		return ret
	}
	return *o.AllRead
}

// GetAllReadOk returns a tuple with the AllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetAllReadOk() (*bool, bool) {
	if o == nil || o.AllRead == nil {
		return nil, false
	}
	return o.AllRead, true
}

// HasAllRead returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasAllRead() bool {
	if o != nil && o.AllRead != nil {
		return true
	}

	return false
}

// SetAllRead gets a reference to the given bool and assigns it to the AllRead field.
func (o *InvestigationPlaybook) SetAllRead(v bool) {
	o.AllRead = &v
}

// GetAllReadWrite returns the AllReadWrite field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetAllReadWrite() bool {
	if o == nil || o.AllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.AllReadWrite
}

// GetAllReadWriteOk returns a tuple with the AllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetAllReadWriteOk() (*bool, bool) {
	if o == nil || o.AllReadWrite == nil {
		return nil, false
	}
	return o.AllReadWrite, true
}

// HasAllReadWrite returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasAllReadWrite() bool {
	if o != nil && o.AllReadWrite != nil {
		return true
	}

	return false
}

// SetAllReadWrite gets a reference to the given bool and assigns it to the AllReadWrite field.
func (o *InvestigationPlaybook) SetAllReadWrite(v bool) {
	o.AllReadWrite = &v
}

// GetAutoExtracting returns the AutoExtracting field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetAutoExtracting() bool {
	if o == nil || o.AutoExtracting == nil {
		var ret bool
		return ret
	}
	return *o.AutoExtracting
}

// GetAutoExtractingOk returns a tuple with the AutoExtracting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetAutoExtractingOk() (*bool, bool) {
	if o == nil || o.AutoExtracting == nil {
		return nil, false
	}
	return o.AutoExtracting, true
}

// HasAutoExtracting returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasAutoExtracting() bool {
	if o != nil && o.AutoExtracting != nil {
		return true
	}

	return false
}

// SetAutoExtracting gets a reference to the given bool and assigns it to the AutoExtracting field.
func (o *InvestigationPlaybook) SetAutoExtracting(v bool) {
	o.AutoExtracting = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *InvestigationPlaybook) SetComment(v string) {
	o.Comment = &v
}

// GetDbotCreatedBy returns the DbotCreatedBy field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetDbotCreatedBy() string {
	if o == nil || o.DbotCreatedBy == nil {
		var ret string
		return ret
	}
	return *o.DbotCreatedBy
}

// GetDbotCreatedByOk returns a tuple with the DbotCreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetDbotCreatedByOk() (*string, bool) {
	if o == nil || o.DbotCreatedBy == nil {
		return nil, false
	}
	return o.DbotCreatedBy, true
}

// HasDbotCreatedBy returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasDbotCreatedBy() bool {
	if o != nil && o.DbotCreatedBy != nil {
		return true
	}

	return false
}

// SetDbotCreatedBy gets a reference to the given string and assigns it to the DbotCreatedBy field.
func (o *InvestigationPlaybook) SetDbotCreatedBy(v string) {
	o.DbotCreatedBy = &v
}

// GetHasRole returns the HasRole field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetHasRole() bool {
	if o == nil || o.HasRole == nil {
		var ret bool
		return ret
	}
	return *o.HasRole
}

// GetHasRoleOk returns a tuple with the HasRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetHasRoleOk() (*bool, bool) {
	if o == nil || o.HasRole == nil {
		return nil, false
	}
	return o.HasRole, true
}

// HasHasRole returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasHasRole() bool {
	if o != nil && o.HasRole != nil {
		return true
	}

	return false
}

// SetHasRole gets a reference to the given bool and assigns it to the HasRole field.
func (o *InvestigationPlaybook) SetHasRole(v bool) {
	o.HasRole = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *InvestigationPlaybook) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InvestigationPlaybook) SetId(v string) {
	o.Id = &v
}

// GetIncidentCreateDate returns the IncidentCreateDate field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetIncidentCreateDate() time.Time {
	if o == nil || o.IncidentCreateDate == nil {
		var ret time.Time
		return ret
	}
	return *o.IncidentCreateDate
}

// GetIncidentCreateDateOk returns a tuple with the IncidentCreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetIncidentCreateDateOk() (*time.Time, bool) {
	if o == nil || o.IncidentCreateDate == nil {
		return nil, false
	}
	return o.IncidentCreateDate, true
}

// HasIncidentCreateDate returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasIncidentCreateDate() bool {
	if o != nil && o.IncidentCreateDate != nil {
		return true
	}

	return false
}

// SetIncidentCreateDate gets a reference to the given time.Time and assigns it to the IncidentCreateDate field.
func (o *InvestigationPlaybook) SetIncidentCreateDate(v time.Time) {
	o.IncidentCreateDate = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetInputs() []PlaybookInput {
	if o == nil || o.Inputs == nil {
		var ret []PlaybookInput
		return ret
	}
	return *o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetInputsOk() (*[]PlaybookInput, bool) {
	if o == nil || o.Inputs == nil {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasInputs() bool {
	if o != nil && o.Inputs != nil {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []PlaybookInput and assigns it to the Inputs field.
func (o *InvestigationPlaybook) SetInputs(v []PlaybookInput) {
	o.Inputs = &v
}

// GetInvPBDebugInfo returns the InvPBDebugInfo field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetInvPBDebugInfo() InvPlaybookDebugInfo {
	if o == nil || o.InvPBDebugInfo == nil {
		var ret InvPlaybookDebugInfo
		return ret
	}
	return *o.InvPBDebugInfo
}

// GetInvPBDebugInfoOk returns a tuple with the InvPBDebugInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetInvPBDebugInfoOk() (*InvPlaybookDebugInfo, bool) {
	if o == nil || o.InvPBDebugInfo == nil {
		return nil, false
	}
	return o.InvPBDebugInfo, true
}

// HasInvPBDebugInfo returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasInvPBDebugInfo() bool {
	if o != nil && o.InvPBDebugInfo != nil {
		return true
	}

	return false
}

// SetInvPBDebugInfo gets a reference to the given InvPlaybookDebugInfo and assigns it to the InvPBDebugInfo field.
func (o *InvestigationPlaybook) SetInvPBDebugInfo(v InvPlaybookDebugInfo) {
	o.InvPBDebugInfo = &v
}

// GetInvestigationId returns the InvestigationId field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetInvestigationId() string {
	if o == nil || o.InvestigationId == nil {
		var ret string
		return ret
	}
	return *o.InvestigationId
}

// GetInvestigationIdOk returns a tuple with the InvestigationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetInvestigationIdOk() (*string, bool) {
	if o == nil || o.InvestigationId == nil {
		return nil, false
	}
	return o.InvestigationId, true
}

// HasInvestigationId returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasInvestigationId() bool {
	if o != nil && o.InvestigationId != nil {
		return true
	}

	return false
}

// SetInvestigationId gets a reference to the given string and assigns it to the InvestigationId field.
func (o *InvestigationPlaybook) SetInvestigationId(v string) {
	o.InvestigationId = &v
}

// GetIsTIM returns the IsTIM field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetIsTIM() bool {
	if o == nil || o.IsTIM == nil {
		var ret bool
		return ret
	}
	return *o.IsTIM
}

// GetIsTIMOk returns a tuple with the IsTIM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetIsTIMOk() (*bool, bool) {
	if o == nil || o.IsTIM == nil {
		return nil, false
	}
	return o.IsTIM, true
}

// HasIsTIM returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasIsTIM() bool {
	if o != nil && o.IsTIM != nil {
		return true
	}

	return false
}

// SetIsTIM gets a reference to the given bool and assigns it to the IsTIM field.
func (o *InvestigationPlaybook) SetIsTIM(v bool) {
	o.IsTIM = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *InvestigationPlaybook) SetModified(v time.Time) {
	o.Modified = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InvestigationPlaybook) SetName(v string) {
	o.Name = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *InvestigationPlaybook) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetOutputs() []PlaybookOutput {
	if o == nil || o.Outputs == nil {
		var ret []PlaybookOutput
		return ret
	}
	return *o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetOutputsOk() (*[]PlaybookOutput, bool) {
	if o == nil || o.Outputs == nil {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasOutputs() bool {
	if o != nil && o.Outputs != nil {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []PlaybookOutput and assigns it to the Outputs field.
func (o *InvestigationPlaybook) SetOutputs(v []PlaybookOutput) {
	o.Outputs = &v
}

// GetPbHistory returns the PbHistory field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetPbHistory() []InvestigationPlaybookData {
	if o == nil || o.PbHistory == nil {
		var ret []InvestigationPlaybookData
		return ret
	}
	return *o.PbHistory
}

// GetPbHistoryOk returns a tuple with the PbHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetPbHistoryOk() (*[]InvestigationPlaybookData, bool) {
	if o == nil || o.PbHistory == nil {
		return nil, false
	}
	return o.PbHistory, true
}

// HasPbHistory returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasPbHistory() bool {
	if o != nil && o.PbHistory != nil {
		return true
	}

	return false
}

// SetPbHistory gets a reference to the given []InvestigationPlaybookData and assigns it to the PbHistory field.
func (o *InvestigationPlaybook) SetPbHistory(v []InvestigationPlaybookData) {
	o.PbHistory = &v
}

// GetPendingTasks returns the PendingTasks field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetPendingTasks() map[string]map[string]interface{} {
	if o == nil || o.PendingTasks == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.PendingTasks
}

// GetPendingTasksOk returns a tuple with the PendingTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetPendingTasksOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.PendingTasks == nil {
		return nil, false
	}
	return o.PendingTasks, true
}

// HasPendingTasks returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasPendingTasks() bool {
	if o != nil && o.PendingTasks != nil {
		return true
	}

	return false
}

// SetPendingTasks gets a reference to the given map[string]map[string]interface{} and assigns it to the PendingTasks field.
func (o *InvestigationPlaybook) SetPendingTasks(v map[string]map[string]interface{}) {
	o.PendingTasks = &v
}

// GetPlaybookId returns the PlaybookId field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetPlaybookId() string {
	if o == nil || o.PlaybookId == nil {
		var ret string
		return ret
	}
	return *o.PlaybookId
}

// GetPlaybookIdOk returns a tuple with the PlaybookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetPlaybookIdOk() (*string, bool) {
	if o == nil || o.PlaybookId == nil {
		return nil, false
	}
	return o.PlaybookId, true
}

// HasPlaybookId returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasPlaybookId() bool {
	if o != nil && o.PlaybookId != nil {
		return true
	}

	return false
}

// SetPlaybookId gets a reference to the given string and assigns it to the PlaybookId field.
func (o *InvestigationPlaybook) SetPlaybookId(v string) {
	o.PlaybookId = &v
}

// GetPreviousAllRead returns the PreviousAllRead field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetPreviousAllRead() bool {
	if o == nil || o.PreviousAllRead == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllRead
}

// GetPreviousAllReadOk returns a tuple with the PreviousAllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetPreviousAllReadOk() (*bool, bool) {
	if o == nil || o.PreviousAllRead == nil {
		return nil, false
	}
	return o.PreviousAllRead, true
}

// HasPreviousAllRead returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasPreviousAllRead() bool {
	if o != nil && o.PreviousAllRead != nil {
		return true
	}

	return false
}

// SetPreviousAllRead gets a reference to the given bool and assigns it to the PreviousAllRead field.
func (o *InvestigationPlaybook) SetPreviousAllRead(v bool) {
	o.PreviousAllRead = &v
}

// GetPreviousAllReadWrite returns the PreviousAllReadWrite field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetPreviousAllReadWrite() bool {
	if o == nil || o.PreviousAllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllReadWrite
}

// GetPreviousAllReadWriteOk returns a tuple with the PreviousAllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetPreviousAllReadWriteOk() (*bool, bool) {
	if o == nil || o.PreviousAllReadWrite == nil {
		return nil, false
	}
	return o.PreviousAllReadWrite, true
}

// HasPreviousAllReadWrite returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasPreviousAllReadWrite() bool {
	if o != nil && o.PreviousAllReadWrite != nil {
		return true
	}

	return false
}

// SetPreviousAllReadWrite gets a reference to the given bool and assigns it to the PreviousAllReadWrite field.
func (o *InvestigationPlaybook) SetPreviousAllReadWrite(v bool) {
	o.PreviousAllReadWrite = &v
}

// GetPreviousRoles returns the PreviousRoles field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetPreviousRoles() []string {
	if o == nil || o.PreviousRoles == nil {
		var ret []string
		return ret
	}
	return *o.PreviousRoles
}

// GetPreviousRolesOk returns a tuple with the PreviousRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetPreviousRolesOk() (*[]string, bool) {
	if o == nil || o.PreviousRoles == nil {
		return nil, false
	}
	return o.PreviousRoles, true
}

// HasPreviousRoles returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasPreviousRoles() bool {
	if o != nil && o.PreviousRoles != nil {
		return true
	}

	return false
}

// SetPreviousRoles gets a reference to the given []string and assigns it to the PreviousRoles field.
func (o *InvestigationPlaybook) SetPreviousRoles(v []string) {
	o.PreviousRoles = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *InvestigationPlaybook) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetQuiet returns the Quiet field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetQuiet() bool {
	if o == nil || o.Quiet == nil {
		var ret bool
		return ret
	}
	return *o.Quiet
}

// GetQuietOk returns a tuple with the Quiet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetQuietOk() (*bool, bool) {
	if o == nil || o.Quiet == nil {
		return nil, false
	}
	return o.Quiet, true
}

// HasQuiet returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasQuiet() bool {
	if o != nil && o.Quiet != nil {
		return true
	}

	return false
}

// SetQuiet gets a reference to the given bool and assigns it to the Quiet field.
func (o *InvestigationPlaybook) SetQuiet(v bool) {
	o.Quiet = &v
}

// GetRecoveryAttempts returns the RecoveryAttempts field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetRecoveryAttempts() int64 {
	if o == nil || o.RecoveryAttempts == nil {
		var ret int64
		return ret
	}
	return *o.RecoveryAttempts
}

// GetRecoveryAttemptsOk returns a tuple with the RecoveryAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetRecoveryAttemptsOk() (*int64, bool) {
	if o == nil || o.RecoveryAttempts == nil {
		return nil, false
	}
	return o.RecoveryAttempts, true
}

// HasRecoveryAttempts returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasRecoveryAttempts() bool {
	if o != nil && o.RecoveryAttempts != nil {
		return true
	}

	return false
}

// SetRecoveryAttempts gets a reference to the given int64 and assigns it to the RecoveryAttempts field.
func (o *InvestigationPlaybook) SetRecoveryAttempts(v int64) {
	o.RecoveryAttempts = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *InvestigationPlaybook) SetRoles(v []string) {
	o.Roles = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *InvestigationPlaybook) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetServerId() string {
	if o == nil || o.ServerId == nil {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetServerIdOk() (*string, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *InvestigationPlaybook) SetServerId(v string) {
	o.ServerId = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *InvestigationPlaybook) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *InvestigationPlaybook) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStartTaskId returns the StartTaskId field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetStartTaskId() string {
	if o == nil || o.StartTaskId == nil {
		var ret string
		return ret
	}
	return *o.StartTaskId
}

// GetStartTaskIdOk returns a tuple with the StartTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetStartTaskIdOk() (*string, bool) {
	if o == nil || o.StartTaskId == nil {
		return nil, false
	}
	return o.StartTaskId, true
}

// HasStartTaskId returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasStartTaskId() bool {
	if o != nil && o.StartTaskId != nil {
		return true
	}

	return false
}

// SetStartTaskId gets a reference to the given string and assigns it to the StartTaskId field.
func (o *InvestigationPlaybook) SetStartTaskId(v string) {
	o.StartTaskId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *InvestigationPlaybook) SetState(v string) {
	o.State = &v
}

// GetSubPlaybookInputs returns the SubPlaybookInputs field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetSubPlaybookInputs() map[string][]PlaybookInput {
	if o == nil || o.SubPlaybookInputs == nil {
		var ret map[string][]PlaybookInput
		return ret
	}
	return *o.SubPlaybookInputs
}

// GetSubPlaybookInputsOk returns a tuple with the SubPlaybookInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetSubPlaybookInputsOk() (*map[string][]PlaybookInput, bool) {
	if o == nil || o.SubPlaybookInputs == nil {
		return nil, false
	}
	return o.SubPlaybookInputs, true
}

// HasSubPlaybookInputs returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasSubPlaybookInputs() bool {
	if o != nil && o.SubPlaybookInputs != nil {
		return true
	}

	return false
}

// SetSubPlaybookInputs gets a reference to the given map[string][]PlaybookInput and assigns it to the SubPlaybookInputs field.
func (o *InvestigationPlaybook) SetSubPlaybookInputs(v map[string][]PlaybookInput) {
	o.SubPlaybookInputs = &v
}

// GetSubPlaybookOutputs returns the SubPlaybookOutputs field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetSubPlaybookOutputs() map[string][]PlaybookOutput {
	if o == nil || o.SubPlaybookOutputs == nil {
		var ret map[string][]PlaybookOutput
		return ret
	}
	return *o.SubPlaybookOutputs
}

// GetSubPlaybookOutputsOk returns a tuple with the SubPlaybookOutputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetSubPlaybookOutputsOk() (*map[string][]PlaybookOutput, bool) {
	if o == nil || o.SubPlaybookOutputs == nil {
		return nil, false
	}
	return o.SubPlaybookOutputs, true
}

// HasSubPlaybookOutputs returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasSubPlaybookOutputs() bool {
	if o != nil && o.SubPlaybookOutputs != nil {
		return true
	}

	return false
}

// SetSubPlaybookOutputs gets a reference to the given map[string][]PlaybookOutput and assigns it to the SubPlaybookOutputs field.
func (o *InvestigationPlaybook) SetSubPlaybookOutputs(v map[string][]PlaybookOutput) {
	o.SubPlaybookOutputs = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetTasks() map[string]InvestigationPlaybookTask {
	if o == nil || o.Tasks == nil {
		var ret map[string]InvestigationPlaybookTask
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetTasksOk() (*map[string]InvestigationPlaybookTask, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given map[string]InvestigationPlaybookTask and assigns it to the Tasks field.
func (o *InvestigationPlaybook) SetTasks(v map[string]InvestigationPlaybookTask) {
	o.Tasks = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *InvestigationPlaybook) SetVersion(v int64) {
	o.Version = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetView() map[string]interface{} {
	if o == nil || o.View == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetViewOk() (*map[string]interface{}, bool) {
	if o == nil || o.View == nil {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasView() bool {
	if o != nil && o.View != nil {
		return true
	}

	return false
}

// SetView gets a reference to the given map[string]interface{} and assigns it to the View field.
func (o *InvestigationPlaybook) SetView(v map[string]interface{}) {
	o.View = &v
}

// GetXsoarHasReadOnlyRole returns the XsoarHasReadOnlyRole field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetXsoarHasReadOnlyRole() bool {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		var ret bool
		return ret
	}
	return *o.XsoarHasReadOnlyRole
}

// GetXsoarHasReadOnlyRoleOk returns a tuple with the XsoarHasReadOnlyRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetXsoarHasReadOnlyRoleOk() (*bool, bool) {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		return nil, false
	}
	return o.XsoarHasReadOnlyRole, true
}

// HasXsoarHasReadOnlyRole returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasXsoarHasReadOnlyRole() bool {
	if o != nil && o.XsoarHasReadOnlyRole != nil {
		return true
	}

	return false
}

// SetXsoarHasReadOnlyRole gets a reference to the given bool and assigns it to the XsoarHasReadOnlyRole field.
func (o *InvestigationPlaybook) SetXsoarHasReadOnlyRole(v bool) {
	o.XsoarHasReadOnlyRole = &v
}

// GetXsoarPreviousReadOnlyRoles returns the XsoarPreviousReadOnlyRoles field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetXsoarPreviousReadOnlyRoles() []string {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarPreviousReadOnlyRoles
}

// GetXsoarPreviousReadOnlyRolesOk returns a tuple with the XsoarPreviousReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetXsoarPreviousReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarPreviousReadOnlyRoles, true
}

// HasXsoarPreviousReadOnlyRoles returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasXsoarPreviousReadOnlyRoles() bool {
	if o != nil && o.XsoarPreviousReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarPreviousReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarPreviousReadOnlyRoles field.
func (o *InvestigationPlaybook) SetXsoarPreviousReadOnlyRoles(v []string) {
	o.XsoarPreviousReadOnlyRoles = &v
}

// GetXsoarReadOnlyRoles returns the XsoarReadOnlyRoles field value if set, zero value otherwise.
func (o *InvestigationPlaybook) GetXsoarReadOnlyRoles() []string {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarReadOnlyRoles
}

// GetXsoarReadOnlyRolesOk returns a tuple with the XsoarReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybook) GetXsoarReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarReadOnlyRoles, true
}

// HasXsoarReadOnlyRoles returns a boolean if a field has been set.
func (o *InvestigationPlaybook) HasXsoarReadOnlyRoles() bool {
	if o != nil && o.XsoarReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarReadOnlyRoles field.
func (o *InvestigationPlaybook) SetXsoarReadOnlyRoles(v []string) {
	o.XsoarReadOnlyRoles = &v
}

func (o InvestigationPlaybook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dirty != nil {
		toSerialize["Dirty"] = o.Dirty
	}
	if o.ReadyPlaybookInputs != nil {
		toSerialize["ReadyPlaybookInputs"] = o.ReadyPlaybookInputs
	}
	if o.ReplacedPlaybook != nil {
		toSerialize["ReplacedPlaybook"] = o.ReplacedPlaybook
	}
	if o.ShardID != nil {
		toSerialize["ShardID"] = o.ShardID
	}
	if o.UpdatedOperatorIDs != nil {
		toSerialize["UpdatedOperatorIDs"] = o.UpdatedOperatorIDs
	}
	if o.AllRead != nil {
		toSerialize["allRead"] = o.AllRead
	}
	if o.AllReadWrite != nil {
		toSerialize["allReadWrite"] = o.AllReadWrite
	}
	if o.AutoExtracting != nil {
		toSerialize["autoExtracting"] = o.AutoExtracting
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.DbotCreatedBy != nil {
		toSerialize["dbotCreatedBy"] = o.DbotCreatedBy
	}
	if o.HasRole != nil {
		toSerialize["hasRole"] = o.HasRole
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IncidentCreateDate != nil {
		toSerialize["incidentCreateDate"] = o.IncidentCreateDate
	}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	if o.InvPBDebugInfo != nil {
		toSerialize["invPBDebugInfo"] = o.InvPBDebugInfo
	}
	if o.InvestigationId != nil {
		toSerialize["investigationId"] = o.InvestigationId
	}
	if o.IsTIM != nil {
		toSerialize["isTIM"] = o.IsTIM
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.Outputs != nil {
		toSerialize["outputs"] = o.Outputs
	}
	if o.PbHistory != nil {
		toSerialize["pbHistory"] = o.PbHistory
	}
	if o.PendingTasks != nil {
		toSerialize["pendingTasks"] = o.PendingTasks
	}
	if o.PlaybookId != nil {
		toSerialize["playbookId"] = o.PlaybookId
	}
	if o.PreviousAllRead != nil {
		toSerialize["previousAllRead"] = o.PreviousAllRead
	}
	if o.PreviousAllReadWrite != nil {
		toSerialize["previousAllReadWrite"] = o.PreviousAllReadWrite
	}
	if o.PreviousRoles != nil {
		toSerialize["previousRoles"] = o.PreviousRoles
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.Quiet != nil {
		toSerialize["quiet"] = o.Quiet
	}
	if o.RecoveryAttempts != nil {
		toSerialize["recoveryAttempts"] = o.RecoveryAttempts
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.ServerId != nil {
		toSerialize["serverId"] = o.ServerId
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.StartTaskId != nil {
		toSerialize["startTaskId"] = o.StartTaskId
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.SubPlaybookInputs != nil {
		toSerialize["subPlaybookInputs"] = o.SubPlaybookInputs
	}
	if o.SubPlaybookOutputs != nil {
		toSerialize["subPlaybookOutputs"] = o.SubPlaybookOutputs
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.View != nil {
		toSerialize["view"] = o.View
	}
	if o.XsoarHasReadOnlyRole != nil {
		toSerialize["xsoarHasReadOnlyRole"] = o.XsoarHasReadOnlyRole
	}
	if o.XsoarPreviousReadOnlyRoles != nil {
		toSerialize["xsoarPreviousReadOnlyRoles"] = o.XsoarPreviousReadOnlyRoles
	}
	if o.XsoarReadOnlyRoles != nil {
		toSerialize["xsoarReadOnlyRoles"] = o.XsoarReadOnlyRoles
	}
	return json.Marshal(toSerialize)
}

type NullableInvestigationPlaybook struct {
	value *InvestigationPlaybook
	isSet bool
}

func (v NullableInvestigationPlaybook) Get() *InvestigationPlaybook {
	return v.value
}

func (v *NullableInvestigationPlaybook) Set(val *InvestigationPlaybook) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestigationPlaybook) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestigationPlaybook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestigationPlaybook(val *InvestigationPlaybook) *NullableInvestigationPlaybook {
	return &NullableInvestigationPlaybook{value: val, isSet: true}
}

func (v NullableInvestigationPlaybook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestigationPlaybook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
