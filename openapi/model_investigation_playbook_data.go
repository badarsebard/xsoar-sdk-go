/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// InvestigationPlaybookData InvestigationPlaybookData returns all data of an investigation playbook, not including history
type InvestigationPlaybookData struct {
	ReadyPlaybookInputs *map[string]map[string]map[string]interface{} `json:"ReadyPlaybookInputs,omitempty"`
	AutoExtracting      *bool                                         `json:"autoExtracting,omitempty"`
	Comment             *string                                       `json:"comment,omitempty"`
	// PlaybookInputs - array of PlaybookInput
	Inputs          *[]PlaybookInput `json:"inputs,omitempty"`
	InvestigationId *string          `json:"investigationId,omitempty"`
	IsTIM           *bool            `json:"isTIM,omitempty"`
	Name            *string          `json:"name,omitempty"`
	// PlaybookOutputs - array of PlaybookOutput
	Outputs *[]PlaybookOutput `json:"outputs,omitempty"`
	// Tasks that are marked for running, but cannot yet run due to incomplete parents
	PendingTasks *map[string]map[string]interface{} `json:"pendingTasks,omitempty"`
	PlaybookId   *string                            `json:"playbookId,omitempty"`
	Quiet        *bool                              `json:"quiet,omitempty"`
	StartDate    *time.Time                         `json:"startDate,omitempty"`
	// FirstTask is the root task of the playbook
	StartTaskId *string `json:"startTaskId,omitempty"`
	// InvestigationPlaybookState indicates the state of the running playbook
	State              *string                               `json:"state,omitempty"`
	SubPlaybookInputs  *map[string][]PlaybookInput           `json:"subPlaybookInputs,omitempty"`
	SubPlaybookOutputs *map[string][]PlaybookOutput          `json:"subPlaybookOutputs,omitempty"`
	Tasks              *map[string]InvestigationPlaybookTask `json:"tasks,omitempty"`
	// PlaybookView represents the view in client of playbook graph
	View *map[string]interface{} `json:"view,omitempty"`
}

// NewInvestigationPlaybookData instantiates a new InvestigationPlaybookData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvestigationPlaybookData() *InvestigationPlaybookData {
	this := InvestigationPlaybookData{}
	return &this
}

// NewInvestigationPlaybookDataWithDefaults instantiates a new InvestigationPlaybookData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvestigationPlaybookDataWithDefaults() *InvestigationPlaybookData {
	this := InvestigationPlaybookData{}
	return &this
}

// GetReadyPlaybookInputs returns the ReadyPlaybookInputs field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetReadyPlaybookInputs() map[string]map[string]map[string]interface{} {
	if o == nil || o.ReadyPlaybookInputs == nil {
		var ret map[string]map[string]map[string]interface{}
		return ret
	}
	return *o.ReadyPlaybookInputs
}

// GetReadyPlaybookInputsOk returns a tuple with the ReadyPlaybookInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetReadyPlaybookInputsOk() (*map[string]map[string]map[string]interface{}, bool) {
	if o == nil || o.ReadyPlaybookInputs == nil {
		return nil, false
	}
	return o.ReadyPlaybookInputs, true
}

// HasReadyPlaybookInputs returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasReadyPlaybookInputs() bool {
	if o != nil && o.ReadyPlaybookInputs != nil {
		return true
	}

	return false
}

// SetReadyPlaybookInputs gets a reference to the given map[string]map[string]map[string]interface{} and assigns it to the ReadyPlaybookInputs field.
func (o *InvestigationPlaybookData) SetReadyPlaybookInputs(v map[string]map[string]map[string]interface{}) {
	o.ReadyPlaybookInputs = &v
}

// GetAutoExtracting returns the AutoExtracting field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetAutoExtracting() bool {
	if o == nil || o.AutoExtracting == nil {
		var ret bool
		return ret
	}
	return *o.AutoExtracting
}

// GetAutoExtractingOk returns a tuple with the AutoExtracting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetAutoExtractingOk() (*bool, bool) {
	if o == nil || o.AutoExtracting == nil {
		return nil, false
	}
	return o.AutoExtracting, true
}

// HasAutoExtracting returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasAutoExtracting() bool {
	if o != nil && o.AutoExtracting != nil {
		return true
	}

	return false
}

// SetAutoExtracting gets a reference to the given bool and assigns it to the AutoExtracting field.
func (o *InvestigationPlaybookData) SetAutoExtracting(v bool) {
	o.AutoExtracting = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *InvestigationPlaybookData) SetComment(v string) {
	o.Comment = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetInputs() []PlaybookInput {
	if o == nil || o.Inputs == nil {
		var ret []PlaybookInput
		return ret
	}
	return *o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetInputsOk() (*[]PlaybookInput, bool) {
	if o == nil || o.Inputs == nil {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasInputs() bool {
	if o != nil && o.Inputs != nil {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []PlaybookInput and assigns it to the Inputs field.
func (o *InvestigationPlaybookData) SetInputs(v []PlaybookInput) {
	o.Inputs = &v
}

// GetInvestigationId returns the InvestigationId field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetInvestigationId() string {
	if o == nil || o.InvestigationId == nil {
		var ret string
		return ret
	}
	return *o.InvestigationId
}

// GetInvestigationIdOk returns a tuple with the InvestigationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetInvestigationIdOk() (*string, bool) {
	if o == nil || o.InvestigationId == nil {
		return nil, false
	}
	return o.InvestigationId, true
}

// HasInvestigationId returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasInvestigationId() bool {
	if o != nil && o.InvestigationId != nil {
		return true
	}

	return false
}

// SetInvestigationId gets a reference to the given string and assigns it to the InvestigationId field.
func (o *InvestigationPlaybookData) SetInvestigationId(v string) {
	o.InvestigationId = &v
}

// GetIsTIM returns the IsTIM field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetIsTIM() bool {
	if o == nil || o.IsTIM == nil {
		var ret bool
		return ret
	}
	return *o.IsTIM
}

// GetIsTIMOk returns a tuple with the IsTIM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetIsTIMOk() (*bool, bool) {
	if o == nil || o.IsTIM == nil {
		return nil, false
	}
	return o.IsTIM, true
}

// HasIsTIM returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasIsTIM() bool {
	if o != nil && o.IsTIM != nil {
		return true
	}

	return false
}

// SetIsTIM gets a reference to the given bool and assigns it to the IsTIM field.
func (o *InvestigationPlaybookData) SetIsTIM(v bool) {
	o.IsTIM = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InvestigationPlaybookData) SetName(v string) {
	o.Name = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetOutputs() []PlaybookOutput {
	if o == nil || o.Outputs == nil {
		var ret []PlaybookOutput
		return ret
	}
	return *o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetOutputsOk() (*[]PlaybookOutput, bool) {
	if o == nil || o.Outputs == nil {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasOutputs() bool {
	if o != nil && o.Outputs != nil {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []PlaybookOutput and assigns it to the Outputs field.
func (o *InvestigationPlaybookData) SetOutputs(v []PlaybookOutput) {
	o.Outputs = &v
}

// GetPendingTasks returns the PendingTasks field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetPendingTasks() map[string]map[string]interface{} {
	if o == nil || o.PendingTasks == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.PendingTasks
}

// GetPendingTasksOk returns a tuple with the PendingTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetPendingTasksOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.PendingTasks == nil {
		return nil, false
	}
	return o.PendingTasks, true
}

// HasPendingTasks returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasPendingTasks() bool {
	if o != nil && o.PendingTasks != nil {
		return true
	}

	return false
}

// SetPendingTasks gets a reference to the given map[string]map[string]interface{} and assigns it to the PendingTasks field.
func (o *InvestigationPlaybookData) SetPendingTasks(v map[string]map[string]interface{}) {
	o.PendingTasks = &v
}

// GetPlaybookId returns the PlaybookId field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetPlaybookId() string {
	if o == nil || o.PlaybookId == nil {
		var ret string
		return ret
	}
	return *o.PlaybookId
}

// GetPlaybookIdOk returns a tuple with the PlaybookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetPlaybookIdOk() (*string, bool) {
	if o == nil || o.PlaybookId == nil {
		return nil, false
	}
	return o.PlaybookId, true
}

// HasPlaybookId returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasPlaybookId() bool {
	if o != nil && o.PlaybookId != nil {
		return true
	}

	return false
}

// SetPlaybookId gets a reference to the given string and assigns it to the PlaybookId field.
func (o *InvestigationPlaybookData) SetPlaybookId(v string) {
	o.PlaybookId = &v
}

// GetQuiet returns the Quiet field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetQuiet() bool {
	if o == nil || o.Quiet == nil {
		var ret bool
		return ret
	}
	return *o.Quiet
}

// GetQuietOk returns a tuple with the Quiet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetQuietOk() (*bool, bool) {
	if o == nil || o.Quiet == nil {
		return nil, false
	}
	return o.Quiet, true
}

// HasQuiet returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasQuiet() bool {
	if o != nil && o.Quiet != nil {
		return true
	}

	return false
}

// SetQuiet gets a reference to the given bool and assigns it to the Quiet field.
func (o *InvestigationPlaybookData) SetQuiet(v bool) {
	o.Quiet = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *InvestigationPlaybookData) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStartTaskId returns the StartTaskId field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetStartTaskId() string {
	if o == nil || o.StartTaskId == nil {
		var ret string
		return ret
	}
	return *o.StartTaskId
}

// GetStartTaskIdOk returns a tuple with the StartTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetStartTaskIdOk() (*string, bool) {
	if o == nil || o.StartTaskId == nil {
		return nil, false
	}
	return o.StartTaskId, true
}

// HasStartTaskId returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasStartTaskId() bool {
	if o != nil && o.StartTaskId != nil {
		return true
	}

	return false
}

// SetStartTaskId gets a reference to the given string and assigns it to the StartTaskId field.
func (o *InvestigationPlaybookData) SetStartTaskId(v string) {
	o.StartTaskId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *InvestigationPlaybookData) SetState(v string) {
	o.State = &v
}

// GetSubPlaybookInputs returns the SubPlaybookInputs field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetSubPlaybookInputs() map[string][]PlaybookInput {
	if o == nil || o.SubPlaybookInputs == nil {
		var ret map[string][]PlaybookInput
		return ret
	}
	return *o.SubPlaybookInputs
}

// GetSubPlaybookInputsOk returns a tuple with the SubPlaybookInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetSubPlaybookInputsOk() (*map[string][]PlaybookInput, bool) {
	if o == nil || o.SubPlaybookInputs == nil {
		return nil, false
	}
	return o.SubPlaybookInputs, true
}

// HasSubPlaybookInputs returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasSubPlaybookInputs() bool {
	if o != nil && o.SubPlaybookInputs != nil {
		return true
	}

	return false
}

// SetSubPlaybookInputs gets a reference to the given map[string][]PlaybookInput and assigns it to the SubPlaybookInputs field.
func (o *InvestigationPlaybookData) SetSubPlaybookInputs(v map[string][]PlaybookInput) {
	o.SubPlaybookInputs = &v
}

// GetSubPlaybookOutputs returns the SubPlaybookOutputs field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetSubPlaybookOutputs() map[string][]PlaybookOutput {
	if o == nil || o.SubPlaybookOutputs == nil {
		var ret map[string][]PlaybookOutput
		return ret
	}
	return *o.SubPlaybookOutputs
}

// GetSubPlaybookOutputsOk returns a tuple with the SubPlaybookOutputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetSubPlaybookOutputsOk() (*map[string][]PlaybookOutput, bool) {
	if o == nil || o.SubPlaybookOutputs == nil {
		return nil, false
	}
	return o.SubPlaybookOutputs, true
}

// HasSubPlaybookOutputs returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasSubPlaybookOutputs() bool {
	if o != nil && o.SubPlaybookOutputs != nil {
		return true
	}

	return false
}

// SetSubPlaybookOutputs gets a reference to the given map[string][]PlaybookOutput and assigns it to the SubPlaybookOutputs field.
func (o *InvestigationPlaybookData) SetSubPlaybookOutputs(v map[string][]PlaybookOutput) {
	o.SubPlaybookOutputs = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetTasks() map[string]InvestigationPlaybookTask {
	if o == nil || o.Tasks == nil {
		var ret map[string]InvestigationPlaybookTask
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetTasksOk() (*map[string]InvestigationPlaybookTask, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given map[string]InvestigationPlaybookTask and assigns it to the Tasks field.
func (o *InvestigationPlaybookData) SetTasks(v map[string]InvestigationPlaybookTask) {
	o.Tasks = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *InvestigationPlaybookData) GetView() map[string]interface{} {
	if o == nil || o.View == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookData) GetViewOk() (*map[string]interface{}, bool) {
	if o == nil || o.View == nil {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *InvestigationPlaybookData) HasView() bool {
	if o != nil && o.View != nil {
		return true
	}

	return false
}

// SetView gets a reference to the given map[string]interface{} and assigns it to the View field.
func (o *InvestigationPlaybookData) SetView(v map[string]interface{}) {
	o.View = &v
}

func (o InvestigationPlaybookData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReadyPlaybookInputs != nil {
		toSerialize["ReadyPlaybookInputs"] = o.ReadyPlaybookInputs
	}
	if o.AutoExtracting != nil {
		toSerialize["autoExtracting"] = o.AutoExtracting
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	if o.InvestigationId != nil {
		toSerialize["investigationId"] = o.InvestigationId
	}
	if o.IsTIM != nil {
		toSerialize["isTIM"] = o.IsTIM
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Outputs != nil {
		toSerialize["outputs"] = o.Outputs
	}
	if o.PendingTasks != nil {
		toSerialize["pendingTasks"] = o.PendingTasks
	}
	if o.PlaybookId != nil {
		toSerialize["playbookId"] = o.PlaybookId
	}
	if o.Quiet != nil {
		toSerialize["quiet"] = o.Quiet
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.StartTaskId != nil {
		toSerialize["startTaskId"] = o.StartTaskId
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.SubPlaybookInputs != nil {
		toSerialize["subPlaybookInputs"] = o.SubPlaybookInputs
	}
	if o.SubPlaybookOutputs != nil {
		toSerialize["subPlaybookOutputs"] = o.SubPlaybookOutputs
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	if o.View != nil {
		toSerialize["view"] = o.View
	}
	return json.Marshal(toSerialize)
}

type NullableInvestigationPlaybookData struct {
	value *InvestigationPlaybookData
	isSet bool
}

func (v NullableInvestigationPlaybookData) Get() *InvestigationPlaybookData {
	return v.value
}

func (v *NullableInvestigationPlaybookData) Set(val *InvestigationPlaybookData) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestigationPlaybookData) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestigationPlaybookData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestigationPlaybookData(val *InvestigationPlaybookData) *NullableInvestigationPlaybookData {
	return &NullableInvestigationPlaybookData{value: val, isSet: true}
}

func (v NullableInvestigationPlaybookData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestigationPlaybookData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
