/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// InvestigationPlaybookTask InvestigationPlaybookTask is the Task in the playbook context as a node
type InvestigationPlaybookTask struct {
	Arguments             *map[string]map[string]interface{} `json:"arguments,omitempty"`
	Assignee              *string                            `json:"assignee,omitempty"`
	AssigneeSet           *bool                              `json:"assigneeSet,omitempty"`
	BlockingTasks         *[]string                          `json:"blockingTasks,omitempty"`
	CalculatedDescription *string                            `json:"calculatedDescription,omitempty"`
	CalculatedTaskName    *string                            `json:"calculatedTaskName,omitempty"`
	// Whether this task had any comments or not
	Comments       *bool      `json:"comments,omitempty"`
	CompletedBy    *string    `json:"completedBy,omitempty"`
	CompletedCount *int64     `json:"completedCount,omitempty"`
	CompletedDate  *time.Time `json:"completedDate,omitempty"`
	// Conditions - optional list of conditions to run when task is conditional. we check conditions by their order (e.i. - considering the first one that satisfied)
	Conditions             *[]TaskCondition `json:"conditions,omitempty"`
	ContinueOnError        *bool            `json:"continueOnError,omitempty"`
	DefaultAssignee        *string          `json:"defaultAssignee,omitempty"`
	DefaultAssigneeComplex *AdvanceArg      `json:"defaultAssigneeComplex,omitempty"`
	DefaultReminder        *int64           `json:"defaultReminder,omitempty"`
	DoNotSaveTaskHistory   *bool            `json:"doNotSaveTaskHistory,omitempty"`
	DueDate                *time.Time       `json:"dueDate,omitempty"`
	DueDateDuration        *int64           `json:"dueDateDuration,omitempty"`
	DueDateSet             *bool            `json:"dueDateSet,omitempty"`
	Entries                *[]string        `json:"entries,omitempty"`
	EvidenceData           *EvidenceData    `json:"evidenceData,omitempty"`
	ExecutionCount         *int64           `json:"executionCount,omitempty"`
	FieldMapping           *[]FieldMapping  `json:"fieldMapping,omitempty"`
	// Parameters needed for loops
	ForEachIndex  *int64                               `json:"forEachIndex,omitempty"`
	ForEachInputs *map[string][]map[string]interface{} `json:"forEachInputs,omitempty"`
	Form          *DataCollectionForm                  `json:"form,omitempty"`
	FormDisplay   *FormDisplay                         `json:"formDisplay,omitempty"`
	Id            *string                              `json:"id,omitempty"`
	// Do not run this task in a worker
	IgnoreWorker              *bool           `json:"ignoreWorker,omitempty"`
	Indent                    *int64          `json:"indent,omitempty"`
	Input                     *string         `json:"input,omitempty"`
	IsAutoSwitchedToQuietMode *bool           `json:"isAutoSwitchedToQuietMode,omitempty"`
	IsOverSize                *bool           `json:"isOverSize,omitempty"`
	Loop                      *TaskLoop       `json:"loop,omitempty"`
	Message                   *NotifiableItem `json:"message,omitempty"`
	// content item which caused task to skip
	MissingContentItem *string `json:"missingContentItem,omitempty"`
	// NextPollTime Time of the next scheduled command execution
	NextPollingTime *time.Time                         `json:"nextPollingTime,omitempty"`
	NextTasks       *map[string][]string               `json:"nextTasks,omitempty"`
	Note            *bool                              `json:"note,omitempty"`
	Outputs         *map[string]map[string]interface{} `json:"outputs,omitempty"`
	// the number of tasks that are waiting on blocked in subplaybooks of this task
	ParentBlockCount *int64  `json:"parentBlockCount,omitempty"`
	ParentPlaybookID *string `json:"parentPlaybookID,omitempty"`
	// Indicates whether this task was patched to InvPB and did not originally belong to the playbook
	Patched        *bool                              `json:"patched,omitempty"`
	PlaybookInputs *map[string]map[string]interface{} `json:"playbookInputs,omitempty"`
	// PollingEntryIDs IDs of entries that are still polling
	PollingEntries     *[]string            `json:"pollingEntries,omitempty"`
	PollingTimeoutTime *time.Time           `json:"pollingTimeoutTime,omitempty"`
	PreviousTasks      *map[string][]string `json:"previousTasks,omitempty"`
	// QuietMode quiet mode for playbook task
	QuietMode *int64 `json:"quietMode,omitempty"`
	// Duration in minutes, this field is not persisted here
	Reminder             *int64                 `json:"reminder,omitempty"`
	ReputationCalc       *float64               `json:"reputationCalc,omitempty"`
	RestrictedCompletion *bool                  `json:"restrictedCompletion,omitempty"`
	ScriptArguments      *map[string]AdvanceArg `json:"scriptArguments,omitempty"`
	SeparateContext      *bool                  `json:"separateContext,omitempty"`
	// Skip - if true then this task will be skipped and all the tasks which comes after this task and depend on it will skip (WillNotExecute)
	Skip *bool `json:"skip,omitempty"`
	// SkipUnavailable if true then will check if automation exists, integration of that command is installed and active or sub playbook exists in Demisto
	SkipUnavailable               *bool      `json:"skipUnavailable,omitempty"`
	Sla                           *SLA       `json:"sla,omitempty"`
	SlaReminder                   *SLA       `json:"slaReminder,omitempty"`
	StartDate                     *time.Time `json:"startDate,omitempty"`
	StartedExecutingHarmfulScript *bool      `json:"startedExecutingHarmfulScript,omitempty"`
	// TaskState indicates the state of the task during the incident/investigation execution
	State       *string                `json:"state,omitempty"`
	SubPlaybook *InvestigationPlaybook `json:"subPlaybook,omitempty"`
	Task        *Task                  `json:"task,omitempty"`
	// History complete data
	TaskCompleteData *[]InvPlaybookTaskCompleteData `json:"taskCompleteData,omitempty"`
	TaskDebug        *InvTaskDebug                  `json:"taskDebug,omitempty"`
	TaskId           *string                        `json:"taskId,omitempty"`
	TaskSize         *int64                         `json:"taskSize,omitempty"`
	// SLA fields
	TimerTriggers *[]TimerTrigger `json:"timerTriggers,omitempty"`
	TimesPolled   *int64          `json:"timesPolled,omitempty"`
	// TaskType is the Task in the playbook context as a node
	Type *string `json:"type,omitempty"`
	// TaskView represents the view in client of the tasks graph
	View                 *map[string]interface{} `json:"view,omitempty"`
	WillNotExecuteCount  *int64                  `json:"willNotExecuteCount,omitempty"`
	WillNotExecuteReason *string                 `json:"willNotExecuteReason,omitempty"`
}

// NewInvestigationPlaybookTask instantiates a new InvestigationPlaybookTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvestigationPlaybookTask() *InvestigationPlaybookTask {
	this := InvestigationPlaybookTask{}
	return &this
}

// NewInvestigationPlaybookTaskWithDefaults instantiates a new InvestigationPlaybookTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvestigationPlaybookTaskWithDefaults() *InvestigationPlaybookTask {
	this := InvestigationPlaybookTask{}
	return &this
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetArguments() map[string]map[string]interface{} {
	if o == nil || o.Arguments == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetArgumentsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given map[string]map[string]interface{} and assigns it to the Arguments field.
func (o *InvestigationPlaybookTask) SetArguments(v map[string]map[string]interface{}) {
	o.Arguments = &v
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetAssignee() string {
	if o == nil || o.Assignee == nil {
		var ret string
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetAssigneeOk() (*string, bool) {
	if o == nil || o.Assignee == nil {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasAssignee() bool {
	if o != nil && o.Assignee != nil {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given string and assigns it to the Assignee field.
func (o *InvestigationPlaybookTask) SetAssignee(v string) {
	o.Assignee = &v
}

// GetAssigneeSet returns the AssigneeSet field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetAssigneeSet() bool {
	if o == nil || o.AssigneeSet == nil {
		var ret bool
		return ret
	}
	return *o.AssigneeSet
}

// GetAssigneeSetOk returns a tuple with the AssigneeSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetAssigneeSetOk() (*bool, bool) {
	if o == nil || o.AssigneeSet == nil {
		return nil, false
	}
	return o.AssigneeSet, true
}

// HasAssigneeSet returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasAssigneeSet() bool {
	if o != nil && o.AssigneeSet != nil {
		return true
	}

	return false
}

// SetAssigneeSet gets a reference to the given bool and assigns it to the AssigneeSet field.
func (o *InvestigationPlaybookTask) SetAssigneeSet(v bool) {
	o.AssigneeSet = &v
}

// GetBlockingTasks returns the BlockingTasks field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetBlockingTasks() []string {
	if o == nil || o.BlockingTasks == nil {
		var ret []string
		return ret
	}
	return *o.BlockingTasks
}

// GetBlockingTasksOk returns a tuple with the BlockingTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetBlockingTasksOk() (*[]string, bool) {
	if o == nil || o.BlockingTasks == nil {
		return nil, false
	}
	return o.BlockingTasks, true
}

// HasBlockingTasks returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasBlockingTasks() bool {
	if o != nil && o.BlockingTasks != nil {
		return true
	}

	return false
}

// SetBlockingTasks gets a reference to the given []string and assigns it to the BlockingTasks field.
func (o *InvestigationPlaybookTask) SetBlockingTasks(v []string) {
	o.BlockingTasks = &v
}

// GetCalculatedDescription returns the CalculatedDescription field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetCalculatedDescription() string {
	if o == nil || o.CalculatedDescription == nil {
		var ret string
		return ret
	}
	return *o.CalculatedDescription
}

// GetCalculatedDescriptionOk returns a tuple with the CalculatedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetCalculatedDescriptionOk() (*string, bool) {
	if o == nil || o.CalculatedDescription == nil {
		return nil, false
	}
	return o.CalculatedDescription, true
}

// HasCalculatedDescription returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasCalculatedDescription() bool {
	if o != nil && o.CalculatedDescription != nil {
		return true
	}

	return false
}

// SetCalculatedDescription gets a reference to the given string and assigns it to the CalculatedDescription field.
func (o *InvestigationPlaybookTask) SetCalculatedDescription(v string) {
	o.CalculatedDescription = &v
}

// GetCalculatedTaskName returns the CalculatedTaskName field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetCalculatedTaskName() string {
	if o == nil || o.CalculatedTaskName == nil {
		var ret string
		return ret
	}
	return *o.CalculatedTaskName
}

// GetCalculatedTaskNameOk returns a tuple with the CalculatedTaskName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetCalculatedTaskNameOk() (*string, bool) {
	if o == nil || o.CalculatedTaskName == nil {
		return nil, false
	}
	return o.CalculatedTaskName, true
}

// HasCalculatedTaskName returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasCalculatedTaskName() bool {
	if o != nil && o.CalculatedTaskName != nil {
		return true
	}

	return false
}

// SetCalculatedTaskName gets a reference to the given string and assigns it to the CalculatedTaskName field.
func (o *InvestigationPlaybookTask) SetCalculatedTaskName(v string) {
	o.CalculatedTaskName = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetComments() bool {
	if o == nil || o.Comments == nil {
		var ret bool
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetCommentsOk() (*bool, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given bool and assigns it to the Comments field.
func (o *InvestigationPlaybookTask) SetComments(v bool) {
	o.Comments = &v
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetCompletedBy() string {
	if o == nil || o.CompletedBy == nil {
		var ret string
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetCompletedByOk() (*string, bool) {
	if o == nil || o.CompletedBy == nil {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasCompletedBy() bool {
	if o != nil && o.CompletedBy != nil {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given string and assigns it to the CompletedBy field.
func (o *InvestigationPlaybookTask) SetCompletedBy(v string) {
	o.CompletedBy = &v
}

// GetCompletedCount returns the CompletedCount field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetCompletedCount() int64 {
	if o == nil || o.CompletedCount == nil {
		var ret int64
		return ret
	}
	return *o.CompletedCount
}

// GetCompletedCountOk returns a tuple with the CompletedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetCompletedCountOk() (*int64, bool) {
	if o == nil || o.CompletedCount == nil {
		return nil, false
	}
	return o.CompletedCount, true
}

// HasCompletedCount returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasCompletedCount() bool {
	if o != nil && o.CompletedCount != nil {
		return true
	}

	return false
}

// SetCompletedCount gets a reference to the given int64 and assigns it to the CompletedCount field.
func (o *InvestigationPlaybookTask) SetCompletedCount(v int64) {
	o.CompletedCount = &v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetCompletedDate() time.Time {
	if o == nil || o.CompletedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetCompletedDateOk() (*time.Time, bool) {
	if o == nil || o.CompletedDate == nil {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasCompletedDate() bool {
	if o != nil && o.CompletedDate != nil {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given time.Time and assigns it to the CompletedDate field.
func (o *InvestigationPlaybookTask) SetCompletedDate(v time.Time) {
	o.CompletedDate = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetConditions() []TaskCondition {
	if o == nil || o.Conditions == nil {
		var ret []TaskCondition
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetConditionsOk() (*[]TaskCondition, bool) {
	if o == nil || o.Conditions == nil {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasConditions() bool {
	if o != nil && o.Conditions != nil {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []TaskCondition and assigns it to the Conditions field.
func (o *InvestigationPlaybookTask) SetConditions(v []TaskCondition) {
	o.Conditions = &v
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil || o.ContinueOnError == nil {
		return nil, false
	}
	return o.ContinueOnError, true
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError != nil {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given bool and assigns it to the ContinueOnError field.
func (o *InvestigationPlaybookTask) SetContinueOnError(v bool) {
	o.ContinueOnError = &v
}

// GetDefaultAssignee returns the DefaultAssignee field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetDefaultAssignee() string {
	if o == nil || o.DefaultAssignee == nil {
		var ret string
		return ret
	}
	return *o.DefaultAssignee
}

// GetDefaultAssigneeOk returns a tuple with the DefaultAssignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetDefaultAssigneeOk() (*string, bool) {
	if o == nil || o.DefaultAssignee == nil {
		return nil, false
	}
	return o.DefaultAssignee, true
}

// HasDefaultAssignee returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasDefaultAssignee() bool {
	if o != nil && o.DefaultAssignee != nil {
		return true
	}

	return false
}

// SetDefaultAssignee gets a reference to the given string and assigns it to the DefaultAssignee field.
func (o *InvestigationPlaybookTask) SetDefaultAssignee(v string) {
	o.DefaultAssignee = &v
}

// GetDefaultAssigneeComplex returns the DefaultAssigneeComplex field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetDefaultAssigneeComplex() AdvanceArg {
	if o == nil || o.DefaultAssigneeComplex == nil {
		var ret AdvanceArg
		return ret
	}
	return *o.DefaultAssigneeComplex
}

// GetDefaultAssigneeComplexOk returns a tuple with the DefaultAssigneeComplex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetDefaultAssigneeComplexOk() (*AdvanceArg, bool) {
	if o == nil || o.DefaultAssigneeComplex == nil {
		return nil, false
	}
	return o.DefaultAssigneeComplex, true
}

// HasDefaultAssigneeComplex returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasDefaultAssigneeComplex() bool {
	if o != nil && o.DefaultAssigneeComplex != nil {
		return true
	}

	return false
}

// SetDefaultAssigneeComplex gets a reference to the given AdvanceArg and assigns it to the DefaultAssigneeComplex field.
func (o *InvestigationPlaybookTask) SetDefaultAssigneeComplex(v AdvanceArg) {
	o.DefaultAssigneeComplex = &v
}

// GetDefaultReminder returns the DefaultReminder field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetDefaultReminder() int64 {
	if o == nil || o.DefaultReminder == nil {
		var ret int64
		return ret
	}
	return *o.DefaultReminder
}

// GetDefaultReminderOk returns a tuple with the DefaultReminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetDefaultReminderOk() (*int64, bool) {
	if o == nil || o.DefaultReminder == nil {
		return nil, false
	}
	return o.DefaultReminder, true
}

// HasDefaultReminder returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasDefaultReminder() bool {
	if o != nil && o.DefaultReminder != nil {
		return true
	}

	return false
}

// SetDefaultReminder gets a reference to the given int64 and assigns it to the DefaultReminder field.
func (o *InvestigationPlaybookTask) SetDefaultReminder(v int64) {
	o.DefaultReminder = &v
}

// GetDoNotSaveTaskHistory returns the DoNotSaveTaskHistory field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetDoNotSaveTaskHistory() bool {
	if o == nil || o.DoNotSaveTaskHistory == nil {
		var ret bool
		return ret
	}
	return *o.DoNotSaveTaskHistory
}

// GetDoNotSaveTaskHistoryOk returns a tuple with the DoNotSaveTaskHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetDoNotSaveTaskHistoryOk() (*bool, bool) {
	if o == nil || o.DoNotSaveTaskHistory == nil {
		return nil, false
	}
	return o.DoNotSaveTaskHistory, true
}

// HasDoNotSaveTaskHistory returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasDoNotSaveTaskHistory() bool {
	if o != nil && o.DoNotSaveTaskHistory != nil {
		return true
	}

	return false
}

// SetDoNotSaveTaskHistory gets a reference to the given bool and assigns it to the DoNotSaveTaskHistory field.
func (o *InvestigationPlaybookTask) SetDoNotSaveTaskHistory(v bool) {
	o.DoNotSaveTaskHistory = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetDueDate() time.Time {
	if o == nil || o.DueDate == nil {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetDueDateOk() (*time.Time, bool) {
	if o == nil || o.DueDate == nil {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasDueDate() bool {
	if o != nil && o.DueDate != nil {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *InvestigationPlaybookTask) SetDueDate(v time.Time) {
	o.DueDate = &v
}

// GetDueDateDuration returns the DueDateDuration field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetDueDateDuration() int64 {
	if o == nil || o.DueDateDuration == nil {
		var ret int64
		return ret
	}
	return *o.DueDateDuration
}

// GetDueDateDurationOk returns a tuple with the DueDateDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetDueDateDurationOk() (*int64, bool) {
	if o == nil || o.DueDateDuration == nil {
		return nil, false
	}
	return o.DueDateDuration, true
}

// HasDueDateDuration returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasDueDateDuration() bool {
	if o != nil && o.DueDateDuration != nil {
		return true
	}

	return false
}

// SetDueDateDuration gets a reference to the given int64 and assigns it to the DueDateDuration field.
func (o *InvestigationPlaybookTask) SetDueDateDuration(v int64) {
	o.DueDateDuration = &v
}

// GetDueDateSet returns the DueDateSet field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetDueDateSet() bool {
	if o == nil || o.DueDateSet == nil {
		var ret bool
		return ret
	}
	return *o.DueDateSet
}

// GetDueDateSetOk returns a tuple with the DueDateSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetDueDateSetOk() (*bool, bool) {
	if o == nil || o.DueDateSet == nil {
		return nil, false
	}
	return o.DueDateSet, true
}

// HasDueDateSet returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasDueDateSet() bool {
	if o != nil && o.DueDateSet != nil {
		return true
	}

	return false
}

// SetDueDateSet gets a reference to the given bool and assigns it to the DueDateSet field.
func (o *InvestigationPlaybookTask) SetDueDateSet(v bool) {
	o.DueDateSet = &v
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetEntries() []string {
	if o == nil || o.Entries == nil {
		var ret []string
		return ret
	}
	return *o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetEntriesOk() (*[]string, bool) {
	if o == nil || o.Entries == nil {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasEntries() bool {
	if o != nil && o.Entries != nil {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []string and assigns it to the Entries field.
func (o *InvestigationPlaybookTask) SetEntries(v []string) {
	o.Entries = &v
}

// GetEvidenceData returns the EvidenceData field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetEvidenceData() EvidenceData {
	if o == nil || o.EvidenceData == nil {
		var ret EvidenceData
		return ret
	}
	return *o.EvidenceData
}

// GetEvidenceDataOk returns a tuple with the EvidenceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetEvidenceDataOk() (*EvidenceData, bool) {
	if o == nil || o.EvidenceData == nil {
		return nil, false
	}
	return o.EvidenceData, true
}

// HasEvidenceData returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasEvidenceData() bool {
	if o != nil && o.EvidenceData != nil {
		return true
	}

	return false
}

// SetEvidenceData gets a reference to the given EvidenceData and assigns it to the EvidenceData field.
func (o *InvestigationPlaybookTask) SetEvidenceData(v EvidenceData) {
	o.EvidenceData = &v
}

// GetExecutionCount returns the ExecutionCount field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetExecutionCount() int64 {
	if o == nil || o.ExecutionCount == nil {
		var ret int64
		return ret
	}
	return *o.ExecutionCount
}

// GetExecutionCountOk returns a tuple with the ExecutionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetExecutionCountOk() (*int64, bool) {
	if o == nil || o.ExecutionCount == nil {
		return nil, false
	}
	return o.ExecutionCount, true
}

// HasExecutionCount returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasExecutionCount() bool {
	if o != nil && o.ExecutionCount != nil {
		return true
	}

	return false
}

// SetExecutionCount gets a reference to the given int64 and assigns it to the ExecutionCount field.
func (o *InvestigationPlaybookTask) SetExecutionCount(v int64) {
	o.ExecutionCount = &v
}

// GetFieldMapping returns the FieldMapping field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetFieldMapping() []FieldMapping {
	if o == nil || o.FieldMapping == nil {
		var ret []FieldMapping
		return ret
	}
	return *o.FieldMapping
}

// GetFieldMappingOk returns a tuple with the FieldMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetFieldMappingOk() (*[]FieldMapping, bool) {
	if o == nil || o.FieldMapping == nil {
		return nil, false
	}
	return o.FieldMapping, true
}

// HasFieldMapping returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasFieldMapping() bool {
	if o != nil && o.FieldMapping != nil {
		return true
	}

	return false
}

// SetFieldMapping gets a reference to the given []FieldMapping and assigns it to the FieldMapping field.
func (o *InvestigationPlaybookTask) SetFieldMapping(v []FieldMapping) {
	o.FieldMapping = &v
}

// GetForEachIndex returns the ForEachIndex field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetForEachIndex() int64 {
	if o == nil || o.ForEachIndex == nil {
		var ret int64
		return ret
	}
	return *o.ForEachIndex
}

// GetForEachIndexOk returns a tuple with the ForEachIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetForEachIndexOk() (*int64, bool) {
	if o == nil || o.ForEachIndex == nil {
		return nil, false
	}
	return o.ForEachIndex, true
}

// HasForEachIndex returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasForEachIndex() bool {
	if o != nil && o.ForEachIndex != nil {
		return true
	}

	return false
}

// SetForEachIndex gets a reference to the given int64 and assigns it to the ForEachIndex field.
func (o *InvestigationPlaybookTask) SetForEachIndex(v int64) {
	o.ForEachIndex = &v
}

// GetForEachInputs returns the ForEachInputs field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetForEachInputs() map[string][]map[string]interface{} {
	if o == nil || o.ForEachInputs == nil {
		var ret map[string][]map[string]interface{}
		return ret
	}
	return *o.ForEachInputs
}

// GetForEachInputsOk returns a tuple with the ForEachInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetForEachInputsOk() (*map[string][]map[string]interface{}, bool) {
	if o == nil || o.ForEachInputs == nil {
		return nil, false
	}
	return o.ForEachInputs, true
}

// HasForEachInputs returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasForEachInputs() bool {
	if o != nil && o.ForEachInputs != nil {
		return true
	}

	return false
}

// SetForEachInputs gets a reference to the given map[string][]map[string]interface{} and assigns it to the ForEachInputs field.
func (o *InvestigationPlaybookTask) SetForEachInputs(v map[string][]map[string]interface{}) {
	o.ForEachInputs = &v
}

// GetForm returns the Form field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetForm() DataCollectionForm {
	if o == nil || o.Form == nil {
		var ret DataCollectionForm
		return ret
	}
	return *o.Form
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetFormOk() (*DataCollectionForm, bool) {
	if o == nil || o.Form == nil {
		return nil, false
	}
	return o.Form, true
}

// HasForm returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasForm() bool {
	if o != nil && o.Form != nil {
		return true
	}

	return false
}

// SetForm gets a reference to the given DataCollectionForm and assigns it to the Form field.
func (o *InvestigationPlaybookTask) SetForm(v DataCollectionForm) {
	o.Form = &v
}

// GetFormDisplay returns the FormDisplay field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetFormDisplay() FormDisplay {
	if o == nil || o.FormDisplay == nil {
		var ret FormDisplay
		return ret
	}
	return *o.FormDisplay
}

// GetFormDisplayOk returns a tuple with the FormDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetFormDisplayOk() (*FormDisplay, bool) {
	if o == nil || o.FormDisplay == nil {
		return nil, false
	}
	return o.FormDisplay, true
}

// HasFormDisplay returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasFormDisplay() bool {
	if o != nil && o.FormDisplay != nil {
		return true
	}

	return false
}

// SetFormDisplay gets a reference to the given FormDisplay and assigns it to the FormDisplay field.
func (o *InvestigationPlaybookTask) SetFormDisplay(v FormDisplay) {
	o.FormDisplay = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InvestigationPlaybookTask) SetId(v string) {
	o.Id = &v
}

// GetIgnoreWorker returns the IgnoreWorker field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetIgnoreWorker() bool {
	if o == nil || o.IgnoreWorker == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreWorker
}

// GetIgnoreWorkerOk returns a tuple with the IgnoreWorker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetIgnoreWorkerOk() (*bool, bool) {
	if o == nil || o.IgnoreWorker == nil {
		return nil, false
	}
	return o.IgnoreWorker, true
}

// HasIgnoreWorker returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasIgnoreWorker() bool {
	if o != nil && o.IgnoreWorker != nil {
		return true
	}

	return false
}

// SetIgnoreWorker gets a reference to the given bool and assigns it to the IgnoreWorker field.
func (o *InvestigationPlaybookTask) SetIgnoreWorker(v bool) {
	o.IgnoreWorker = &v
}

// GetIndent returns the Indent field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetIndent() int64 {
	if o == nil || o.Indent == nil {
		var ret int64
		return ret
	}
	return *o.Indent
}

// GetIndentOk returns a tuple with the Indent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetIndentOk() (*int64, bool) {
	if o == nil || o.Indent == nil {
		return nil, false
	}
	return o.Indent, true
}

// HasIndent returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasIndent() bool {
	if o != nil && o.Indent != nil {
		return true
	}

	return false
}

// SetIndent gets a reference to the given int64 and assigns it to the Indent field.
func (o *InvestigationPlaybookTask) SetIndent(v int64) {
	o.Indent = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetInput() string {
	if o == nil || o.Input == nil {
		var ret string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetInputOk() (*string, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given string and assigns it to the Input field.
func (o *InvestigationPlaybookTask) SetInput(v string) {
	o.Input = &v
}

// GetIsAutoSwitchedToQuietMode returns the IsAutoSwitchedToQuietMode field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetIsAutoSwitchedToQuietMode() bool {
	if o == nil || o.IsAutoSwitchedToQuietMode == nil {
		var ret bool
		return ret
	}
	return *o.IsAutoSwitchedToQuietMode
}

// GetIsAutoSwitchedToQuietModeOk returns a tuple with the IsAutoSwitchedToQuietMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetIsAutoSwitchedToQuietModeOk() (*bool, bool) {
	if o == nil || o.IsAutoSwitchedToQuietMode == nil {
		return nil, false
	}
	return o.IsAutoSwitchedToQuietMode, true
}

// HasIsAutoSwitchedToQuietMode returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasIsAutoSwitchedToQuietMode() bool {
	if o != nil && o.IsAutoSwitchedToQuietMode != nil {
		return true
	}

	return false
}

// SetIsAutoSwitchedToQuietMode gets a reference to the given bool and assigns it to the IsAutoSwitchedToQuietMode field.
func (o *InvestigationPlaybookTask) SetIsAutoSwitchedToQuietMode(v bool) {
	o.IsAutoSwitchedToQuietMode = &v
}

// GetIsOverSize returns the IsOverSize field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetIsOverSize() bool {
	if o == nil || o.IsOverSize == nil {
		var ret bool
		return ret
	}
	return *o.IsOverSize
}

// GetIsOverSizeOk returns a tuple with the IsOverSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetIsOverSizeOk() (*bool, bool) {
	if o == nil || o.IsOverSize == nil {
		return nil, false
	}
	return o.IsOverSize, true
}

// HasIsOverSize returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasIsOverSize() bool {
	if o != nil && o.IsOverSize != nil {
		return true
	}

	return false
}

// SetIsOverSize gets a reference to the given bool and assigns it to the IsOverSize field.
func (o *InvestigationPlaybookTask) SetIsOverSize(v bool) {
	o.IsOverSize = &v
}

// GetLoop returns the Loop field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetLoop() TaskLoop {
	if o == nil || o.Loop == nil {
		var ret TaskLoop
		return ret
	}
	return *o.Loop
}

// GetLoopOk returns a tuple with the Loop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetLoopOk() (*TaskLoop, bool) {
	if o == nil || o.Loop == nil {
		return nil, false
	}
	return o.Loop, true
}

// HasLoop returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasLoop() bool {
	if o != nil && o.Loop != nil {
		return true
	}

	return false
}

// SetLoop gets a reference to the given TaskLoop and assigns it to the Loop field.
func (o *InvestigationPlaybookTask) SetLoop(v TaskLoop) {
	o.Loop = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetMessage() NotifiableItem {
	if o == nil || o.Message == nil {
		var ret NotifiableItem
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetMessageOk() (*NotifiableItem, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NotifiableItem and assigns it to the Message field.
func (o *InvestigationPlaybookTask) SetMessage(v NotifiableItem) {
	o.Message = &v
}

// GetMissingContentItem returns the MissingContentItem field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetMissingContentItem() string {
	if o == nil || o.MissingContentItem == nil {
		var ret string
		return ret
	}
	return *o.MissingContentItem
}

// GetMissingContentItemOk returns a tuple with the MissingContentItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetMissingContentItemOk() (*string, bool) {
	if o == nil || o.MissingContentItem == nil {
		return nil, false
	}
	return o.MissingContentItem, true
}

// HasMissingContentItem returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasMissingContentItem() bool {
	if o != nil && o.MissingContentItem != nil {
		return true
	}

	return false
}

// SetMissingContentItem gets a reference to the given string and assigns it to the MissingContentItem field.
func (o *InvestigationPlaybookTask) SetMissingContentItem(v string) {
	o.MissingContentItem = &v
}

// GetNextPollingTime returns the NextPollingTime field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetNextPollingTime() time.Time {
	if o == nil || o.NextPollingTime == nil {
		var ret time.Time
		return ret
	}
	return *o.NextPollingTime
}

// GetNextPollingTimeOk returns a tuple with the NextPollingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetNextPollingTimeOk() (*time.Time, bool) {
	if o == nil || o.NextPollingTime == nil {
		return nil, false
	}
	return o.NextPollingTime, true
}

// HasNextPollingTime returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasNextPollingTime() bool {
	if o != nil && o.NextPollingTime != nil {
		return true
	}

	return false
}

// SetNextPollingTime gets a reference to the given time.Time and assigns it to the NextPollingTime field.
func (o *InvestigationPlaybookTask) SetNextPollingTime(v time.Time) {
	o.NextPollingTime = &v
}

// GetNextTasks returns the NextTasks field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetNextTasks() map[string][]string {
	if o == nil || o.NextTasks == nil {
		var ret map[string][]string
		return ret
	}
	return *o.NextTasks
}

// GetNextTasksOk returns a tuple with the NextTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetNextTasksOk() (*map[string][]string, bool) {
	if o == nil || o.NextTasks == nil {
		return nil, false
	}
	return o.NextTasks, true
}

// HasNextTasks returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasNextTasks() bool {
	if o != nil && o.NextTasks != nil {
		return true
	}

	return false
}

// SetNextTasks gets a reference to the given map[string][]string and assigns it to the NextTasks field.
func (o *InvestigationPlaybookTask) SetNextTasks(v map[string][]string) {
	o.NextTasks = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetNote() bool {
	if o == nil || o.Note == nil {
		var ret bool
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetNoteOk() (*bool, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given bool and assigns it to the Note field.
func (o *InvestigationPlaybookTask) SetNote(v bool) {
	o.Note = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetOutputs() map[string]map[string]interface{} {
	if o == nil || o.Outputs == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetOutputsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Outputs == nil {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasOutputs() bool {
	if o != nil && o.Outputs != nil {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given map[string]map[string]interface{} and assigns it to the Outputs field.
func (o *InvestigationPlaybookTask) SetOutputs(v map[string]map[string]interface{}) {
	o.Outputs = &v
}

// GetParentBlockCount returns the ParentBlockCount field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetParentBlockCount() int64 {
	if o == nil || o.ParentBlockCount == nil {
		var ret int64
		return ret
	}
	return *o.ParentBlockCount
}

// GetParentBlockCountOk returns a tuple with the ParentBlockCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetParentBlockCountOk() (*int64, bool) {
	if o == nil || o.ParentBlockCount == nil {
		return nil, false
	}
	return o.ParentBlockCount, true
}

// HasParentBlockCount returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasParentBlockCount() bool {
	if o != nil && o.ParentBlockCount != nil {
		return true
	}

	return false
}

// SetParentBlockCount gets a reference to the given int64 and assigns it to the ParentBlockCount field.
func (o *InvestigationPlaybookTask) SetParentBlockCount(v int64) {
	o.ParentBlockCount = &v
}

// GetParentPlaybookID returns the ParentPlaybookID field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetParentPlaybookID() string {
	if o == nil || o.ParentPlaybookID == nil {
		var ret string
		return ret
	}
	return *o.ParentPlaybookID
}

// GetParentPlaybookIDOk returns a tuple with the ParentPlaybookID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetParentPlaybookIDOk() (*string, bool) {
	if o == nil || o.ParentPlaybookID == nil {
		return nil, false
	}
	return o.ParentPlaybookID, true
}

// HasParentPlaybookID returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasParentPlaybookID() bool {
	if o != nil && o.ParentPlaybookID != nil {
		return true
	}

	return false
}

// SetParentPlaybookID gets a reference to the given string and assigns it to the ParentPlaybookID field.
func (o *InvestigationPlaybookTask) SetParentPlaybookID(v string) {
	o.ParentPlaybookID = &v
}

// GetPatched returns the Patched field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetPatched() bool {
	if o == nil || o.Patched == nil {
		var ret bool
		return ret
	}
	return *o.Patched
}

// GetPatchedOk returns a tuple with the Patched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetPatchedOk() (*bool, bool) {
	if o == nil || o.Patched == nil {
		return nil, false
	}
	return o.Patched, true
}

// HasPatched returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasPatched() bool {
	if o != nil && o.Patched != nil {
		return true
	}

	return false
}

// SetPatched gets a reference to the given bool and assigns it to the Patched field.
func (o *InvestigationPlaybookTask) SetPatched(v bool) {
	o.Patched = &v
}

// GetPlaybookInputs returns the PlaybookInputs field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetPlaybookInputs() map[string]map[string]interface{} {
	if o == nil || o.PlaybookInputs == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.PlaybookInputs
}

// GetPlaybookInputsOk returns a tuple with the PlaybookInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetPlaybookInputsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.PlaybookInputs == nil {
		return nil, false
	}
	return o.PlaybookInputs, true
}

// HasPlaybookInputs returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasPlaybookInputs() bool {
	if o != nil && o.PlaybookInputs != nil {
		return true
	}

	return false
}

// SetPlaybookInputs gets a reference to the given map[string]map[string]interface{} and assigns it to the PlaybookInputs field.
func (o *InvestigationPlaybookTask) SetPlaybookInputs(v map[string]map[string]interface{}) {
	o.PlaybookInputs = &v
}

// GetPollingEntries returns the PollingEntries field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetPollingEntries() []string {
	if o == nil || o.PollingEntries == nil {
		var ret []string
		return ret
	}
	return *o.PollingEntries
}

// GetPollingEntriesOk returns a tuple with the PollingEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetPollingEntriesOk() (*[]string, bool) {
	if o == nil || o.PollingEntries == nil {
		return nil, false
	}
	return o.PollingEntries, true
}

// HasPollingEntries returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasPollingEntries() bool {
	if o != nil && o.PollingEntries != nil {
		return true
	}

	return false
}

// SetPollingEntries gets a reference to the given []string and assigns it to the PollingEntries field.
func (o *InvestigationPlaybookTask) SetPollingEntries(v []string) {
	o.PollingEntries = &v
}

// GetPollingTimeoutTime returns the PollingTimeoutTime field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetPollingTimeoutTime() time.Time {
	if o == nil || o.PollingTimeoutTime == nil {
		var ret time.Time
		return ret
	}
	return *o.PollingTimeoutTime
}

// GetPollingTimeoutTimeOk returns a tuple with the PollingTimeoutTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetPollingTimeoutTimeOk() (*time.Time, bool) {
	if o == nil || o.PollingTimeoutTime == nil {
		return nil, false
	}
	return o.PollingTimeoutTime, true
}

// HasPollingTimeoutTime returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasPollingTimeoutTime() bool {
	if o != nil && o.PollingTimeoutTime != nil {
		return true
	}

	return false
}

// SetPollingTimeoutTime gets a reference to the given time.Time and assigns it to the PollingTimeoutTime field.
func (o *InvestigationPlaybookTask) SetPollingTimeoutTime(v time.Time) {
	o.PollingTimeoutTime = &v
}

// GetPreviousTasks returns the PreviousTasks field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetPreviousTasks() map[string][]string {
	if o == nil || o.PreviousTasks == nil {
		var ret map[string][]string
		return ret
	}
	return *o.PreviousTasks
}

// GetPreviousTasksOk returns a tuple with the PreviousTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetPreviousTasksOk() (*map[string][]string, bool) {
	if o == nil || o.PreviousTasks == nil {
		return nil, false
	}
	return o.PreviousTasks, true
}

// HasPreviousTasks returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasPreviousTasks() bool {
	if o != nil && o.PreviousTasks != nil {
		return true
	}

	return false
}

// SetPreviousTasks gets a reference to the given map[string][]string and assigns it to the PreviousTasks field.
func (o *InvestigationPlaybookTask) SetPreviousTasks(v map[string][]string) {
	o.PreviousTasks = &v
}

// GetQuietMode returns the QuietMode field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetQuietMode() int64 {
	if o == nil || o.QuietMode == nil {
		var ret int64
		return ret
	}
	return *o.QuietMode
}

// GetQuietModeOk returns a tuple with the QuietMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetQuietModeOk() (*int64, bool) {
	if o == nil || o.QuietMode == nil {
		return nil, false
	}
	return o.QuietMode, true
}

// HasQuietMode returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasQuietMode() bool {
	if o != nil && o.QuietMode != nil {
		return true
	}

	return false
}

// SetQuietMode gets a reference to the given int64 and assigns it to the QuietMode field.
func (o *InvestigationPlaybookTask) SetQuietMode(v int64) {
	o.QuietMode = &v
}

// GetReminder returns the Reminder field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetReminder() int64 {
	if o == nil || o.Reminder == nil {
		var ret int64
		return ret
	}
	return *o.Reminder
}

// GetReminderOk returns a tuple with the Reminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetReminderOk() (*int64, bool) {
	if o == nil || o.Reminder == nil {
		return nil, false
	}
	return o.Reminder, true
}

// HasReminder returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasReminder() bool {
	if o != nil && o.Reminder != nil {
		return true
	}

	return false
}

// SetReminder gets a reference to the given int64 and assigns it to the Reminder field.
func (o *InvestigationPlaybookTask) SetReminder(v int64) {
	o.Reminder = &v
}

// GetReputationCalc returns the ReputationCalc field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetReputationCalc() float64 {
	if o == nil || o.ReputationCalc == nil {
		var ret float64
		return ret
	}
	return *o.ReputationCalc
}

// GetReputationCalcOk returns a tuple with the ReputationCalc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetReputationCalcOk() (*float64, bool) {
	if o == nil || o.ReputationCalc == nil {
		return nil, false
	}
	return o.ReputationCalc, true
}

// HasReputationCalc returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasReputationCalc() bool {
	if o != nil && o.ReputationCalc != nil {
		return true
	}

	return false
}

// SetReputationCalc gets a reference to the given float64 and assigns it to the ReputationCalc field.
func (o *InvestigationPlaybookTask) SetReputationCalc(v float64) {
	o.ReputationCalc = &v
}

// GetRestrictedCompletion returns the RestrictedCompletion field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetRestrictedCompletion() bool {
	if o == nil || o.RestrictedCompletion == nil {
		var ret bool
		return ret
	}
	return *o.RestrictedCompletion
}

// GetRestrictedCompletionOk returns a tuple with the RestrictedCompletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetRestrictedCompletionOk() (*bool, bool) {
	if o == nil || o.RestrictedCompletion == nil {
		return nil, false
	}
	return o.RestrictedCompletion, true
}

// HasRestrictedCompletion returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasRestrictedCompletion() bool {
	if o != nil && o.RestrictedCompletion != nil {
		return true
	}

	return false
}

// SetRestrictedCompletion gets a reference to the given bool and assigns it to the RestrictedCompletion field.
func (o *InvestigationPlaybookTask) SetRestrictedCompletion(v bool) {
	o.RestrictedCompletion = &v
}

// GetScriptArguments returns the ScriptArguments field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetScriptArguments() map[string]AdvanceArg {
	if o == nil || o.ScriptArguments == nil {
		var ret map[string]AdvanceArg
		return ret
	}
	return *o.ScriptArguments
}

// GetScriptArgumentsOk returns a tuple with the ScriptArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetScriptArgumentsOk() (*map[string]AdvanceArg, bool) {
	if o == nil || o.ScriptArguments == nil {
		return nil, false
	}
	return o.ScriptArguments, true
}

// HasScriptArguments returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasScriptArguments() bool {
	if o != nil && o.ScriptArguments != nil {
		return true
	}

	return false
}

// SetScriptArguments gets a reference to the given map[string]AdvanceArg and assigns it to the ScriptArguments field.
func (o *InvestigationPlaybookTask) SetScriptArguments(v map[string]AdvanceArg) {
	o.ScriptArguments = &v
}

// GetSeparateContext returns the SeparateContext field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetSeparateContext() bool {
	if o == nil || o.SeparateContext == nil {
		var ret bool
		return ret
	}
	return *o.SeparateContext
}

// GetSeparateContextOk returns a tuple with the SeparateContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetSeparateContextOk() (*bool, bool) {
	if o == nil || o.SeparateContext == nil {
		return nil, false
	}
	return o.SeparateContext, true
}

// HasSeparateContext returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasSeparateContext() bool {
	if o != nil && o.SeparateContext != nil {
		return true
	}

	return false
}

// SetSeparateContext gets a reference to the given bool and assigns it to the SeparateContext field.
func (o *InvestigationPlaybookTask) SetSeparateContext(v bool) {
	o.SeparateContext = &v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetSkip() bool {
	if o == nil || o.Skip == nil {
		var ret bool
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetSkipOk() (*bool, bool) {
	if o == nil || o.Skip == nil {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasSkip() bool {
	if o != nil && o.Skip != nil {
		return true
	}

	return false
}

// SetSkip gets a reference to the given bool and assigns it to the Skip field.
func (o *InvestigationPlaybookTask) SetSkip(v bool) {
	o.Skip = &v
}

// GetSkipUnavailable returns the SkipUnavailable field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetSkipUnavailable() bool {
	if o == nil || o.SkipUnavailable == nil {
		var ret bool
		return ret
	}
	return *o.SkipUnavailable
}

// GetSkipUnavailableOk returns a tuple with the SkipUnavailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetSkipUnavailableOk() (*bool, bool) {
	if o == nil || o.SkipUnavailable == nil {
		return nil, false
	}
	return o.SkipUnavailable, true
}

// HasSkipUnavailable returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasSkipUnavailable() bool {
	if o != nil && o.SkipUnavailable != nil {
		return true
	}

	return false
}

// SetSkipUnavailable gets a reference to the given bool and assigns it to the SkipUnavailable field.
func (o *InvestigationPlaybookTask) SetSkipUnavailable(v bool) {
	o.SkipUnavailable = &v
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetSla() SLA {
	if o == nil || o.Sla == nil {
		var ret SLA
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetSlaOk() (*SLA, bool) {
	if o == nil || o.Sla == nil {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasSla() bool {
	if o != nil && o.Sla != nil {
		return true
	}

	return false
}

// SetSla gets a reference to the given SLA and assigns it to the Sla field.
func (o *InvestigationPlaybookTask) SetSla(v SLA) {
	o.Sla = &v
}

// GetSlaReminder returns the SlaReminder field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetSlaReminder() SLA {
	if o == nil || o.SlaReminder == nil {
		var ret SLA
		return ret
	}
	return *o.SlaReminder
}

// GetSlaReminderOk returns a tuple with the SlaReminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetSlaReminderOk() (*SLA, bool) {
	if o == nil || o.SlaReminder == nil {
		return nil, false
	}
	return o.SlaReminder, true
}

// HasSlaReminder returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasSlaReminder() bool {
	if o != nil && o.SlaReminder != nil {
		return true
	}

	return false
}

// SetSlaReminder gets a reference to the given SLA and assigns it to the SlaReminder field.
func (o *InvestigationPlaybookTask) SetSlaReminder(v SLA) {
	o.SlaReminder = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *InvestigationPlaybookTask) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStartedExecutingHarmfulScript returns the StartedExecutingHarmfulScript field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetStartedExecutingHarmfulScript() bool {
	if o == nil || o.StartedExecutingHarmfulScript == nil {
		var ret bool
		return ret
	}
	return *o.StartedExecutingHarmfulScript
}

// GetStartedExecutingHarmfulScriptOk returns a tuple with the StartedExecutingHarmfulScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetStartedExecutingHarmfulScriptOk() (*bool, bool) {
	if o == nil || o.StartedExecutingHarmfulScript == nil {
		return nil, false
	}
	return o.StartedExecutingHarmfulScript, true
}

// HasStartedExecutingHarmfulScript returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasStartedExecutingHarmfulScript() bool {
	if o != nil && o.StartedExecutingHarmfulScript != nil {
		return true
	}

	return false
}

// SetStartedExecutingHarmfulScript gets a reference to the given bool and assigns it to the StartedExecutingHarmfulScript field.
func (o *InvestigationPlaybookTask) SetStartedExecutingHarmfulScript(v bool) {
	o.StartedExecutingHarmfulScript = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *InvestigationPlaybookTask) SetState(v string) {
	o.State = &v
}

// GetSubPlaybook returns the SubPlaybook field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetSubPlaybook() InvestigationPlaybook {
	if o == nil || o.SubPlaybook == nil {
		var ret InvestigationPlaybook
		return ret
	}
	return *o.SubPlaybook
}

// GetSubPlaybookOk returns a tuple with the SubPlaybook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetSubPlaybookOk() (*InvestigationPlaybook, bool) {
	if o == nil || o.SubPlaybook == nil {
		return nil, false
	}
	return o.SubPlaybook, true
}

// HasSubPlaybook returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasSubPlaybook() bool {
	if o != nil && o.SubPlaybook != nil {
		return true
	}

	return false
}

// SetSubPlaybook gets a reference to the given InvestigationPlaybook and assigns it to the SubPlaybook field.
func (o *InvestigationPlaybookTask) SetSubPlaybook(v InvestigationPlaybook) {
	o.SubPlaybook = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetTask() Task {
	if o == nil || o.Task == nil {
		var ret Task
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetTaskOk() (*Task, bool) {
	if o == nil || o.Task == nil {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasTask() bool {
	if o != nil && o.Task != nil {
		return true
	}

	return false
}

// SetTask gets a reference to the given Task and assigns it to the Task field.
func (o *InvestigationPlaybookTask) SetTask(v Task) {
	o.Task = &v
}

// GetTaskCompleteData returns the TaskCompleteData field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetTaskCompleteData() []InvPlaybookTaskCompleteData {
	if o == nil || o.TaskCompleteData == nil {
		var ret []InvPlaybookTaskCompleteData
		return ret
	}
	return *o.TaskCompleteData
}

// GetTaskCompleteDataOk returns a tuple with the TaskCompleteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetTaskCompleteDataOk() (*[]InvPlaybookTaskCompleteData, bool) {
	if o == nil || o.TaskCompleteData == nil {
		return nil, false
	}
	return o.TaskCompleteData, true
}

// HasTaskCompleteData returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasTaskCompleteData() bool {
	if o != nil && o.TaskCompleteData != nil {
		return true
	}

	return false
}

// SetTaskCompleteData gets a reference to the given []InvPlaybookTaskCompleteData and assigns it to the TaskCompleteData field.
func (o *InvestigationPlaybookTask) SetTaskCompleteData(v []InvPlaybookTaskCompleteData) {
	o.TaskCompleteData = &v
}

// GetTaskDebug returns the TaskDebug field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetTaskDebug() InvTaskDebug {
	if o == nil || o.TaskDebug == nil {
		var ret InvTaskDebug
		return ret
	}
	return *o.TaskDebug
}

// GetTaskDebugOk returns a tuple with the TaskDebug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetTaskDebugOk() (*InvTaskDebug, bool) {
	if o == nil || o.TaskDebug == nil {
		return nil, false
	}
	return o.TaskDebug, true
}

// HasTaskDebug returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasTaskDebug() bool {
	if o != nil && o.TaskDebug != nil {
		return true
	}

	return false
}

// SetTaskDebug gets a reference to the given InvTaskDebug and assigns it to the TaskDebug field.
func (o *InvestigationPlaybookTask) SetTaskDebug(v InvTaskDebug) {
	o.TaskDebug = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetTaskId() string {
	if o == nil || o.TaskId == nil {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetTaskIdOk() (*string, bool) {
	if o == nil || o.TaskId == nil {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasTaskId() bool {
	if o != nil && o.TaskId != nil {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *InvestigationPlaybookTask) SetTaskId(v string) {
	o.TaskId = &v
}

// GetTaskSize returns the TaskSize field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetTaskSize() int64 {
	if o == nil || o.TaskSize == nil {
		var ret int64
		return ret
	}
	return *o.TaskSize
}

// GetTaskSizeOk returns a tuple with the TaskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetTaskSizeOk() (*int64, bool) {
	if o == nil || o.TaskSize == nil {
		return nil, false
	}
	return o.TaskSize, true
}

// HasTaskSize returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasTaskSize() bool {
	if o != nil && o.TaskSize != nil {
		return true
	}

	return false
}

// SetTaskSize gets a reference to the given int64 and assigns it to the TaskSize field.
func (o *InvestigationPlaybookTask) SetTaskSize(v int64) {
	o.TaskSize = &v
}

// GetTimerTriggers returns the TimerTriggers field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetTimerTriggers() []TimerTrigger {
	if o == nil || o.TimerTriggers == nil {
		var ret []TimerTrigger
		return ret
	}
	return *o.TimerTriggers
}

// GetTimerTriggersOk returns a tuple with the TimerTriggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetTimerTriggersOk() (*[]TimerTrigger, bool) {
	if o == nil || o.TimerTriggers == nil {
		return nil, false
	}
	return o.TimerTriggers, true
}

// HasTimerTriggers returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasTimerTriggers() bool {
	if o != nil && o.TimerTriggers != nil {
		return true
	}

	return false
}

// SetTimerTriggers gets a reference to the given []TimerTrigger and assigns it to the TimerTriggers field.
func (o *InvestigationPlaybookTask) SetTimerTriggers(v []TimerTrigger) {
	o.TimerTriggers = &v
}

// GetTimesPolled returns the TimesPolled field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetTimesPolled() int64 {
	if o == nil || o.TimesPolled == nil {
		var ret int64
		return ret
	}
	return *o.TimesPolled
}

// GetTimesPolledOk returns a tuple with the TimesPolled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetTimesPolledOk() (*int64, bool) {
	if o == nil || o.TimesPolled == nil {
		return nil, false
	}
	return o.TimesPolled, true
}

// HasTimesPolled returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasTimesPolled() bool {
	if o != nil && o.TimesPolled != nil {
		return true
	}

	return false
}

// SetTimesPolled gets a reference to the given int64 and assigns it to the TimesPolled field.
func (o *InvestigationPlaybookTask) SetTimesPolled(v int64) {
	o.TimesPolled = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InvestigationPlaybookTask) SetType(v string) {
	o.Type = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetView() map[string]interface{} {
	if o == nil || o.View == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetViewOk() (*map[string]interface{}, bool) {
	if o == nil || o.View == nil {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasView() bool {
	if o != nil && o.View != nil {
		return true
	}

	return false
}

// SetView gets a reference to the given map[string]interface{} and assigns it to the View field.
func (o *InvestigationPlaybookTask) SetView(v map[string]interface{}) {
	o.View = &v
}

// GetWillNotExecuteCount returns the WillNotExecuteCount field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetWillNotExecuteCount() int64 {
	if o == nil || o.WillNotExecuteCount == nil {
		var ret int64
		return ret
	}
	return *o.WillNotExecuteCount
}

// GetWillNotExecuteCountOk returns a tuple with the WillNotExecuteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetWillNotExecuteCountOk() (*int64, bool) {
	if o == nil || o.WillNotExecuteCount == nil {
		return nil, false
	}
	return o.WillNotExecuteCount, true
}

// HasWillNotExecuteCount returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasWillNotExecuteCount() bool {
	if o != nil && o.WillNotExecuteCount != nil {
		return true
	}

	return false
}

// SetWillNotExecuteCount gets a reference to the given int64 and assigns it to the WillNotExecuteCount field.
func (o *InvestigationPlaybookTask) SetWillNotExecuteCount(v int64) {
	o.WillNotExecuteCount = &v
}

// GetWillNotExecuteReason returns the WillNotExecuteReason field value if set, zero value otherwise.
func (o *InvestigationPlaybookTask) GetWillNotExecuteReason() string {
	if o == nil || o.WillNotExecuteReason == nil {
		var ret string
		return ret
	}
	return *o.WillNotExecuteReason
}

// GetWillNotExecuteReasonOk returns a tuple with the WillNotExecuteReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestigationPlaybookTask) GetWillNotExecuteReasonOk() (*string, bool) {
	if o == nil || o.WillNotExecuteReason == nil {
		return nil, false
	}
	return o.WillNotExecuteReason, true
}

// HasWillNotExecuteReason returns a boolean if a field has been set.
func (o *InvestigationPlaybookTask) HasWillNotExecuteReason() bool {
	if o != nil && o.WillNotExecuteReason != nil {
		return true
	}

	return false
}

// SetWillNotExecuteReason gets a reference to the given string and assigns it to the WillNotExecuteReason field.
func (o *InvestigationPlaybookTask) SetWillNotExecuteReason(v string) {
	o.WillNotExecuteReason = &v
}

func (o InvestigationPlaybookTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	if o.Assignee != nil {
		toSerialize["assignee"] = o.Assignee
	}
	if o.AssigneeSet != nil {
		toSerialize["assigneeSet"] = o.AssigneeSet
	}
	if o.BlockingTasks != nil {
		toSerialize["blockingTasks"] = o.BlockingTasks
	}
	if o.CalculatedDescription != nil {
		toSerialize["calculatedDescription"] = o.CalculatedDescription
	}
	if o.CalculatedTaskName != nil {
		toSerialize["calculatedTaskName"] = o.CalculatedTaskName
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.CompletedBy != nil {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if o.CompletedCount != nil {
		toSerialize["completedCount"] = o.CompletedCount
	}
	if o.CompletedDate != nil {
		toSerialize["completedDate"] = o.CompletedDate
	}
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	if o.ContinueOnError != nil {
		toSerialize["continueOnError"] = o.ContinueOnError
	}
	if o.DefaultAssignee != nil {
		toSerialize["defaultAssignee"] = o.DefaultAssignee
	}
	if o.DefaultAssigneeComplex != nil {
		toSerialize["defaultAssigneeComplex"] = o.DefaultAssigneeComplex
	}
	if o.DefaultReminder != nil {
		toSerialize["defaultReminder"] = o.DefaultReminder
	}
	if o.DoNotSaveTaskHistory != nil {
		toSerialize["doNotSaveTaskHistory"] = o.DoNotSaveTaskHistory
	}
	if o.DueDate != nil {
		toSerialize["dueDate"] = o.DueDate
	}
	if o.DueDateDuration != nil {
		toSerialize["dueDateDuration"] = o.DueDateDuration
	}
	if o.DueDateSet != nil {
		toSerialize["dueDateSet"] = o.DueDateSet
	}
	if o.Entries != nil {
		toSerialize["entries"] = o.Entries
	}
	if o.EvidenceData != nil {
		toSerialize["evidenceData"] = o.EvidenceData
	}
	if o.ExecutionCount != nil {
		toSerialize["executionCount"] = o.ExecutionCount
	}
	if o.FieldMapping != nil {
		toSerialize["fieldMapping"] = o.FieldMapping
	}
	if o.ForEachIndex != nil {
		toSerialize["forEachIndex"] = o.ForEachIndex
	}
	if o.ForEachInputs != nil {
		toSerialize["forEachInputs"] = o.ForEachInputs
	}
	if o.Form != nil {
		toSerialize["form"] = o.Form
	}
	if o.FormDisplay != nil {
		toSerialize["formDisplay"] = o.FormDisplay
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IgnoreWorker != nil {
		toSerialize["ignoreWorker"] = o.IgnoreWorker
	}
	if o.Indent != nil {
		toSerialize["indent"] = o.Indent
	}
	if o.Input != nil {
		toSerialize["input"] = o.Input
	}
	if o.IsAutoSwitchedToQuietMode != nil {
		toSerialize["isAutoSwitchedToQuietMode"] = o.IsAutoSwitchedToQuietMode
	}
	if o.IsOverSize != nil {
		toSerialize["isOverSize"] = o.IsOverSize
	}
	if o.Loop != nil {
		toSerialize["loop"] = o.Loop
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.MissingContentItem != nil {
		toSerialize["missingContentItem"] = o.MissingContentItem
	}
	if o.NextPollingTime != nil {
		toSerialize["nextPollingTime"] = o.NextPollingTime
	}
	if o.NextTasks != nil {
		toSerialize["nextTasks"] = o.NextTasks
	}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if o.Outputs != nil {
		toSerialize["outputs"] = o.Outputs
	}
	if o.ParentBlockCount != nil {
		toSerialize["parentBlockCount"] = o.ParentBlockCount
	}
	if o.ParentPlaybookID != nil {
		toSerialize["parentPlaybookID"] = o.ParentPlaybookID
	}
	if o.Patched != nil {
		toSerialize["patched"] = o.Patched
	}
	if o.PlaybookInputs != nil {
		toSerialize["playbookInputs"] = o.PlaybookInputs
	}
	if o.PollingEntries != nil {
		toSerialize["pollingEntries"] = o.PollingEntries
	}
	if o.PollingTimeoutTime != nil {
		toSerialize["pollingTimeoutTime"] = o.PollingTimeoutTime
	}
	if o.PreviousTasks != nil {
		toSerialize["previousTasks"] = o.PreviousTasks
	}
	if o.QuietMode != nil {
		toSerialize["quietMode"] = o.QuietMode
	}
	if o.Reminder != nil {
		toSerialize["reminder"] = o.Reminder
	}
	if o.ReputationCalc != nil {
		toSerialize["reputationCalc"] = o.ReputationCalc
	}
	if o.RestrictedCompletion != nil {
		toSerialize["restrictedCompletion"] = o.RestrictedCompletion
	}
	if o.ScriptArguments != nil {
		toSerialize["scriptArguments"] = o.ScriptArguments
	}
	if o.SeparateContext != nil {
		toSerialize["separateContext"] = o.SeparateContext
	}
	if o.Skip != nil {
		toSerialize["skip"] = o.Skip
	}
	if o.SkipUnavailable != nil {
		toSerialize["skipUnavailable"] = o.SkipUnavailable
	}
	if o.Sla != nil {
		toSerialize["sla"] = o.Sla
	}
	if o.SlaReminder != nil {
		toSerialize["slaReminder"] = o.SlaReminder
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.StartedExecutingHarmfulScript != nil {
		toSerialize["startedExecutingHarmfulScript"] = o.StartedExecutingHarmfulScript
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.SubPlaybook != nil {
		toSerialize["subPlaybook"] = o.SubPlaybook
	}
	if o.Task != nil {
		toSerialize["task"] = o.Task
	}
	if o.TaskCompleteData != nil {
		toSerialize["taskCompleteData"] = o.TaskCompleteData
	}
	if o.TaskDebug != nil {
		toSerialize["taskDebug"] = o.TaskDebug
	}
	if o.TaskId != nil {
		toSerialize["taskId"] = o.TaskId
	}
	if o.TaskSize != nil {
		toSerialize["taskSize"] = o.TaskSize
	}
	if o.TimerTriggers != nil {
		toSerialize["timerTriggers"] = o.TimerTriggers
	}
	if o.TimesPolled != nil {
		toSerialize["timesPolled"] = o.TimesPolled
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.View != nil {
		toSerialize["view"] = o.View
	}
	if o.WillNotExecuteCount != nil {
		toSerialize["willNotExecuteCount"] = o.WillNotExecuteCount
	}
	if o.WillNotExecuteReason != nil {
		toSerialize["willNotExecuteReason"] = o.WillNotExecuteReason
	}
	return json.Marshal(toSerialize)
}

type NullableInvestigationPlaybookTask struct {
	value *InvestigationPlaybookTask
	isSet bool
}

func (v NullableInvestigationPlaybookTask) Get() *InvestigationPlaybookTask {
	return v.value
}

func (v *NullableInvestigationPlaybookTask) Set(val *InvestigationPlaybookTask) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestigationPlaybookTask) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestigationPlaybookTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestigationPlaybookTask(val *InvestigationPlaybookTask) *NullableInvestigationPlaybookTask {
	return &NullableInvestigationPlaybookTask{value: val, isSet: true}
}

func (v NullableInvestigationPlaybookTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestigationPlaybookTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
