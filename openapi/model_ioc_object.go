/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// IocObject IocObject - represents an Ioc (or simply an indicator) object
type IocObject struct {
	// The keys should be the field's display name all lower and without spaces. For example: Scan IP -> scanip To get the actual key name you can also go to Cortex XSOAR CLI and run /incident_add and look for the key that you would like to update
	CustomFields          *map[string]map[string]interface{} `json:"CustomFields,omitempty"`
	Account               *string                            `json:"account,omitempty"`
	AggregatedReliability *string                            `json:"aggregatedReliability,omitempty"`
	// Do not set the fields bellow this line
	CalculatedTime       *time.Time                `json:"calculatedTime,omitempty"`
	Comment              *string                   `json:"comment,omitempty"`
	Comments             *[]Comment                `json:"comments,omitempty"`
	DeletedFeedFetchTime *time.Time                `json:"deletedFeedFetchTime,omitempty"`
	Expiration           *time.Time                `json:"expiration,omitempty"`
	ExpirationSource     *ExpirationSource         `json:"expirationSource,omitempty"`
	ExpirationStatus     *string                   `json:"expirationStatus,omitempty"`
	FirstSeen            *time.Time                `json:"firstSeen,omitempty"`
	FirstSeenEntryID     *string                   `json:"firstSeenEntryID,omitempty"`
	Highlight            *map[string][]string      `json:"highlight,omitempty"`
	Id                   *string                   `json:"id,omitempty"`
	IndicatorType        *string                   `json:"indicator_type,omitempty"`
	InsightCache         *InsightCache             `json:"insightCache,omitempty"`
	InvestigationIDs     *[]string                 `json:"investigationIDs,omitempty"`
	IsShared             *bool                     `json:"isShared,omitempty"`
	LastReputationRun    *time.Time                `json:"lastReputationRun,omitempty"`
	LastSeen             *time.Time                `json:"lastSeen,omitempty"`
	LastSeenEntryID      *string                   `json:"lastSeenEntryID,omitempty"`
	ManualExpirationTime *time.Time                `json:"manualExpirationTime,omitempty"`
	ManualScore          *bool                     `json:"manualScore,omitempty"`
	ManualSetTime        *time.Time                `json:"manualSetTime,omitempty"`
	ManuallyEditedFields *[]string                 `json:"manuallyEditedFields,omitempty"`
	Modified             *time.Time                `json:"modified,omitempty"`
	ModifiedTime         *time.Time                `json:"modifiedTime,omitempty"`
	ModuleToFeedMap      *map[string]FeedIndicator `json:"moduleToFeedMap,omitempty"`
	NumericId            *int64                    `json:"numericId,omitempty"`
	PrimaryTerm          *int64                    `json:"primaryTerm,omitempty"`
	RelatedIncCount      *int64                    `json:"relatedIncCount,omitempty"`
	Score                *int64                    `json:"score,omitempty"`
	SequenceNumber       *int64                    `json:"sequenceNumber,omitempty"`
	SetBy                *string                   `json:"setBy,omitempty"`
	SortValues           *[]string                 `json:"sortValues,omitempty"`
	Source               *string                   `json:"source,omitempty"`
	SourceBrands         *[]string                 `json:"sourceBrands,omitempty"`
	SourceInstances      *[]string                 `json:"sourceInstances,omitempty"`
	Timestamp            *time.Time                `json:"timestamp,omitempty"`
	Value                *string                   `json:"value,omitempty"`
	Version              *int64                    `json:"version,omitempty"`
}

// NewIocObject instantiates a new IocObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIocObject() *IocObject {
	this := IocObject{}
	return &this
}

// NewIocObjectWithDefaults instantiates a new IocObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIocObjectWithDefaults() *IocObject {
	this := IocObject{}
	return &this
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *IocObject) GetCustomFields() map[string]map[string]interface{} {
	if o == nil || o.CustomFields == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetCustomFieldsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *IocObject) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]map[string]interface{} and assigns it to the CustomFields field.
func (o *IocObject) SetCustomFields(v map[string]map[string]interface{}) {
	o.CustomFields = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *IocObject) GetAccount() string {
	if o == nil || o.Account == nil {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetAccountOk() (*string, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *IocObject) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *IocObject) SetAccount(v string) {
	o.Account = &v
}

// GetAggregatedReliability returns the AggregatedReliability field value if set, zero value otherwise.
func (o *IocObject) GetAggregatedReliability() string {
	if o == nil || o.AggregatedReliability == nil {
		var ret string
		return ret
	}
	return *o.AggregatedReliability
}

// GetAggregatedReliabilityOk returns a tuple with the AggregatedReliability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetAggregatedReliabilityOk() (*string, bool) {
	if o == nil || o.AggregatedReliability == nil {
		return nil, false
	}
	return o.AggregatedReliability, true
}

// HasAggregatedReliability returns a boolean if a field has been set.
func (o *IocObject) HasAggregatedReliability() bool {
	if o != nil && o.AggregatedReliability != nil {
		return true
	}

	return false
}

// SetAggregatedReliability gets a reference to the given string and assigns it to the AggregatedReliability field.
func (o *IocObject) SetAggregatedReliability(v string) {
	o.AggregatedReliability = &v
}

// GetCalculatedTime returns the CalculatedTime field value if set, zero value otherwise.
func (o *IocObject) GetCalculatedTime() time.Time {
	if o == nil || o.CalculatedTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CalculatedTime
}

// GetCalculatedTimeOk returns a tuple with the CalculatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetCalculatedTimeOk() (*time.Time, bool) {
	if o == nil || o.CalculatedTime == nil {
		return nil, false
	}
	return o.CalculatedTime, true
}

// HasCalculatedTime returns a boolean if a field has been set.
func (o *IocObject) HasCalculatedTime() bool {
	if o != nil && o.CalculatedTime != nil {
		return true
	}

	return false
}

// SetCalculatedTime gets a reference to the given time.Time and assigns it to the CalculatedTime field.
func (o *IocObject) SetCalculatedTime(v time.Time) {
	o.CalculatedTime = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *IocObject) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *IocObject) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *IocObject) SetComment(v string) {
	o.Comment = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *IocObject) GetComments() []Comment {
	if o == nil || o.Comments == nil {
		var ret []Comment
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetCommentsOk() (*[]Comment, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *IocObject) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given []Comment and assigns it to the Comments field.
func (o *IocObject) SetComments(v []Comment) {
	o.Comments = &v
}

// GetDeletedFeedFetchTime returns the DeletedFeedFetchTime field value if set, zero value otherwise.
func (o *IocObject) GetDeletedFeedFetchTime() time.Time {
	if o == nil || o.DeletedFeedFetchTime == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletedFeedFetchTime
}

// GetDeletedFeedFetchTimeOk returns a tuple with the DeletedFeedFetchTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetDeletedFeedFetchTimeOk() (*time.Time, bool) {
	if o == nil || o.DeletedFeedFetchTime == nil {
		return nil, false
	}
	return o.DeletedFeedFetchTime, true
}

// HasDeletedFeedFetchTime returns a boolean if a field has been set.
func (o *IocObject) HasDeletedFeedFetchTime() bool {
	if o != nil && o.DeletedFeedFetchTime != nil {
		return true
	}

	return false
}

// SetDeletedFeedFetchTime gets a reference to the given time.Time and assigns it to the DeletedFeedFetchTime field.
func (o *IocObject) SetDeletedFeedFetchTime(v time.Time) {
	o.DeletedFeedFetchTime = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *IocObject) GetExpiration() time.Time {
	if o == nil || o.Expiration == nil {
		var ret time.Time
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetExpirationOk() (*time.Time, bool) {
	if o == nil || o.Expiration == nil {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *IocObject) HasExpiration() bool {
	if o != nil && o.Expiration != nil {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given time.Time and assigns it to the Expiration field.
func (o *IocObject) SetExpiration(v time.Time) {
	o.Expiration = &v
}

// GetExpirationSource returns the ExpirationSource field value if set, zero value otherwise.
func (o *IocObject) GetExpirationSource() ExpirationSource {
	if o == nil || o.ExpirationSource == nil {
		var ret ExpirationSource
		return ret
	}
	return *o.ExpirationSource
}

// GetExpirationSourceOk returns a tuple with the ExpirationSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetExpirationSourceOk() (*ExpirationSource, bool) {
	if o == nil || o.ExpirationSource == nil {
		return nil, false
	}
	return o.ExpirationSource, true
}

// HasExpirationSource returns a boolean if a field has been set.
func (o *IocObject) HasExpirationSource() bool {
	if o != nil && o.ExpirationSource != nil {
		return true
	}

	return false
}

// SetExpirationSource gets a reference to the given ExpirationSource and assigns it to the ExpirationSource field.
func (o *IocObject) SetExpirationSource(v ExpirationSource) {
	o.ExpirationSource = &v
}

// GetExpirationStatus returns the ExpirationStatus field value if set, zero value otherwise.
func (o *IocObject) GetExpirationStatus() string {
	if o == nil || o.ExpirationStatus == nil {
		var ret string
		return ret
	}
	return *o.ExpirationStatus
}

// GetExpirationStatusOk returns a tuple with the ExpirationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetExpirationStatusOk() (*string, bool) {
	if o == nil || o.ExpirationStatus == nil {
		return nil, false
	}
	return o.ExpirationStatus, true
}

// HasExpirationStatus returns a boolean if a field has been set.
func (o *IocObject) HasExpirationStatus() bool {
	if o != nil && o.ExpirationStatus != nil {
		return true
	}

	return false
}

// SetExpirationStatus gets a reference to the given string and assigns it to the ExpirationStatus field.
func (o *IocObject) SetExpirationStatus(v string) {
	o.ExpirationStatus = &v
}

// GetFirstSeen returns the FirstSeen field value if set, zero value otherwise.
func (o *IocObject) GetFirstSeen() time.Time {
	if o == nil || o.FirstSeen == nil {
		var ret time.Time
		return ret
	}
	return *o.FirstSeen
}

// GetFirstSeenOk returns a tuple with the FirstSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetFirstSeenOk() (*time.Time, bool) {
	if o == nil || o.FirstSeen == nil {
		return nil, false
	}
	return o.FirstSeen, true
}

// HasFirstSeen returns a boolean if a field has been set.
func (o *IocObject) HasFirstSeen() bool {
	if o != nil && o.FirstSeen != nil {
		return true
	}

	return false
}

// SetFirstSeen gets a reference to the given time.Time and assigns it to the FirstSeen field.
func (o *IocObject) SetFirstSeen(v time.Time) {
	o.FirstSeen = &v
}

// GetFirstSeenEntryID returns the FirstSeenEntryID field value if set, zero value otherwise.
func (o *IocObject) GetFirstSeenEntryID() string {
	if o == nil || o.FirstSeenEntryID == nil {
		var ret string
		return ret
	}
	return *o.FirstSeenEntryID
}

// GetFirstSeenEntryIDOk returns a tuple with the FirstSeenEntryID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetFirstSeenEntryIDOk() (*string, bool) {
	if o == nil || o.FirstSeenEntryID == nil {
		return nil, false
	}
	return o.FirstSeenEntryID, true
}

// HasFirstSeenEntryID returns a boolean if a field has been set.
func (o *IocObject) HasFirstSeenEntryID() bool {
	if o != nil && o.FirstSeenEntryID != nil {
		return true
	}

	return false
}

// SetFirstSeenEntryID gets a reference to the given string and assigns it to the FirstSeenEntryID field.
func (o *IocObject) SetFirstSeenEntryID(v string) {
	o.FirstSeenEntryID = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *IocObject) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *IocObject) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *IocObject) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IocObject) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IocObject) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IocObject) SetId(v string) {
	o.Id = &v
}

// GetIndicatorType returns the IndicatorType field value if set, zero value otherwise.
func (o *IocObject) GetIndicatorType() string {
	if o == nil || o.IndicatorType == nil {
		var ret string
		return ret
	}
	return *o.IndicatorType
}

// GetIndicatorTypeOk returns a tuple with the IndicatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetIndicatorTypeOk() (*string, bool) {
	if o == nil || o.IndicatorType == nil {
		return nil, false
	}
	return o.IndicatorType, true
}

// HasIndicatorType returns a boolean if a field has been set.
func (o *IocObject) HasIndicatorType() bool {
	if o != nil && o.IndicatorType != nil {
		return true
	}

	return false
}

// SetIndicatorType gets a reference to the given string and assigns it to the IndicatorType field.
func (o *IocObject) SetIndicatorType(v string) {
	o.IndicatorType = &v
}

// GetInsightCache returns the InsightCache field value if set, zero value otherwise.
func (o *IocObject) GetInsightCache() InsightCache {
	if o == nil || o.InsightCache == nil {
		var ret InsightCache
		return ret
	}
	return *o.InsightCache
}

// GetInsightCacheOk returns a tuple with the InsightCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetInsightCacheOk() (*InsightCache, bool) {
	if o == nil || o.InsightCache == nil {
		return nil, false
	}
	return o.InsightCache, true
}

// HasInsightCache returns a boolean if a field has been set.
func (o *IocObject) HasInsightCache() bool {
	if o != nil && o.InsightCache != nil {
		return true
	}

	return false
}

// SetInsightCache gets a reference to the given InsightCache and assigns it to the InsightCache field.
func (o *IocObject) SetInsightCache(v InsightCache) {
	o.InsightCache = &v
}

// GetInvestigationIDs returns the InvestigationIDs field value if set, zero value otherwise.
func (o *IocObject) GetInvestigationIDs() []string {
	if o == nil || o.InvestigationIDs == nil {
		var ret []string
		return ret
	}
	return *o.InvestigationIDs
}

// GetInvestigationIDsOk returns a tuple with the InvestigationIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetInvestigationIDsOk() (*[]string, bool) {
	if o == nil || o.InvestigationIDs == nil {
		return nil, false
	}
	return o.InvestigationIDs, true
}

// HasInvestigationIDs returns a boolean if a field has been set.
func (o *IocObject) HasInvestigationIDs() bool {
	if o != nil && o.InvestigationIDs != nil {
		return true
	}

	return false
}

// SetInvestigationIDs gets a reference to the given []string and assigns it to the InvestigationIDs field.
func (o *IocObject) SetInvestigationIDs(v []string) {
	o.InvestigationIDs = &v
}

// GetIsShared returns the IsShared field value if set, zero value otherwise.
func (o *IocObject) GetIsShared() bool {
	if o == nil || o.IsShared == nil {
		var ret bool
		return ret
	}
	return *o.IsShared
}

// GetIsSharedOk returns a tuple with the IsShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetIsSharedOk() (*bool, bool) {
	if o == nil || o.IsShared == nil {
		return nil, false
	}
	return o.IsShared, true
}

// HasIsShared returns a boolean if a field has been set.
func (o *IocObject) HasIsShared() bool {
	if o != nil && o.IsShared != nil {
		return true
	}

	return false
}

// SetIsShared gets a reference to the given bool and assigns it to the IsShared field.
func (o *IocObject) SetIsShared(v bool) {
	o.IsShared = &v
}

// GetLastReputationRun returns the LastReputationRun field value if set, zero value otherwise.
func (o *IocObject) GetLastReputationRun() time.Time {
	if o == nil || o.LastReputationRun == nil {
		var ret time.Time
		return ret
	}
	return *o.LastReputationRun
}

// GetLastReputationRunOk returns a tuple with the LastReputationRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetLastReputationRunOk() (*time.Time, bool) {
	if o == nil || o.LastReputationRun == nil {
		return nil, false
	}
	return o.LastReputationRun, true
}

// HasLastReputationRun returns a boolean if a field has been set.
func (o *IocObject) HasLastReputationRun() bool {
	if o != nil && o.LastReputationRun != nil {
		return true
	}

	return false
}

// SetLastReputationRun gets a reference to the given time.Time and assigns it to the LastReputationRun field.
func (o *IocObject) SetLastReputationRun(v time.Time) {
	o.LastReputationRun = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *IocObject) GetLastSeen() time.Time {
	if o == nil || o.LastSeen == nil {
		var ret time.Time
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetLastSeenOk() (*time.Time, bool) {
	if o == nil || o.LastSeen == nil {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *IocObject) HasLastSeen() bool {
	if o != nil && o.LastSeen != nil {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given time.Time and assigns it to the LastSeen field.
func (o *IocObject) SetLastSeen(v time.Time) {
	o.LastSeen = &v
}

// GetLastSeenEntryID returns the LastSeenEntryID field value if set, zero value otherwise.
func (o *IocObject) GetLastSeenEntryID() string {
	if o == nil || o.LastSeenEntryID == nil {
		var ret string
		return ret
	}
	return *o.LastSeenEntryID
}

// GetLastSeenEntryIDOk returns a tuple with the LastSeenEntryID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetLastSeenEntryIDOk() (*string, bool) {
	if o == nil || o.LastSeenEntryID == nil {
		return nil, false
	}
	return o.LastSeenEntryID, true
}

// HasLastSeenEntryID returns a boolean if a field has been set.
func (o *IocObject) HasLastSeenEntryID() bool {
	if o != nil && o.LastSeenEntryID != nil {
		return true
	}

	return false
}

// SetLastSeenEntryID gets a reference to the given string and assigns it to the LastSeenEntryID field.
func (o *IocObject) SetLastSeenEntryID(v string) {
	o.LastSeenEntryID = &v
}

// GetManualExpirationTime returns the ManualExpirationTime field value if set, zero value otherwise.
func (o *IocObject) GetManualExpirationTime() time.Time {
	if o == nil || o.ManualExpirationTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ManualExpirationTime
}

// GetManualExpirationTimeOk returns a tuple with the ManualExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetManualExpirationTimeOk() (*time.Time, bool) {
	if o == nil || o.ManualExpirationTime == nil {
		return nil, false
	}
	return o.ManualExpirationTime, true
}

// HasManualExpirationTime returns a boolean if a field has been set.
func (o *IocObject) HasManualExpirationTime() bool {
	if o != nil && o.ManualExpirationTime != nil {
		return true
	}

	return false
}

// SetManualExpirationTime gets a reference to the given time.Time and assigns it to the ManualExpirationTime field.
func (o *IocObject) SetManualExpirationTime(v time.Time) {
	o.ManualExpirationTime = &v
}

// GetManualScore returns the ManualScore field value if set, zero value otherwise.
func (o *IocObject) GetManualScore() bool {
	if o == nil || o.ManualScore == nil {
		var ret bool
		return ret
	}
	return *o.ManualScore
}

// GetManualScoreOk returns a tuple with the ManualScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetManualScoreOk() (*bool, bool) {
	if o == nil || o.ManualScore == nil {
		return nil, false
	}
	return o.ManualScore, true
}

// HasManualScore returns a boolean if a field has been set.
func (o *IocObject) HasManualScore() bool {
	if o != nil && o.ManualScore != nil {
		return true
	}

	return false
}

// SetManualScore gets a reference to the given bool and assigns it to the ManualScore field.
func (o *IocObject) SetManualScore(v bool) {
	o.ManualScore = &v
}

// GetManualSetTime returns the ManualSetTime field value if set, zero value otherwise.
func (o *IocObject) GetManualSetTime() time.Time {
	if o == nil || o.ManualSetTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ManualSetTime
}

// GetManualSetTimeOk returns a tuple with the ManualSetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetManualSetTimeOk() (*time.Time, bool) {
	if o == nil || o.ManualSetTime == nil {
		return nil, false
	}
	return o.ManualSetTime, true
}

// HasManualSetTime returns a boolean if a field has been set.
func (o *IocObject) HasManualSetTime() bool {
	if o != nil && o.ManualSetTime != nil {
		return true
	}

	return false
}

// SetManualSetTime gets a reference to the given time.Time and assigns it to the ManualSetTime field.
func (o *IocObject) SetManualSetTime(v time.Time) {
	o.ManualSetTime = &v
}

// GetManuallyEditedFields returns the ManuallyEditedFields field value if set, zero value otherwise.
func (o *IocObject) GetManuallyEditedFields() []string {
	if o == nil || o.ManuallyEditedFields == nil {
		var ret []string
		return ret
	}
	return *o.ManuallyEditedFields
}

// GetManuallyEditedFieldsOk returns a tuple with the ManuallyEditedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetManuallyEditedFieldsOk() (*[]string, bool) {
	if o == nil || o.ManuallyEditedFields == nil {
		return nil, false
	}
	return o.ManuallyEditedFields, true
}

// HasManuallyEditedFields returns a boolean if a field has been set.
func (o *IocObject) HasManuallyEditedFields() bool {
	if o != nil && o.ManuallyEditedFields != nil {
		return true
	}

	return false
}

// SetManuallyEditedFields gets a reference to the given []string and assigns it to the ManuallyEditedFields field.
func (o *IocObject) SetManuallyEditedFields(v []string) {
	o.ManuallyEditedFields = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *IocObject) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *IocObject) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *IocObject) SetModified(v time.Time) {
	o.Modified = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *IocObject) GetModifiedTime() time.Time {
	if o == nil || o.ModifiedTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetModifiedTimeOk() (*time.Time, bool) {
	if o == nil || o.ModifiedTime == nil {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *IocObject) HasModifiedTime() bool {
	if o != nil && o.ModifiedTime != nil {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given time.Time and assigns it to the ModifiedTime field.
func (o *IocObject) SetModifiedTime(v time.Time) {
	o.ModifiedTime = &v
}

// GetModuleToFeedMap returns the ModuleToFeedMap field value if set, zero value otherwise.
func (o *IocObject) GetModuleToFeedMap() map[string]FeedIndicator {
	if o == nil || o.ModuleToFeedMap == nil {
		var ret map[string]FeedIndicator
		return ret
	}
	return *o.ModuleToFeedMap
}

// GetModuleToFeedMapOk returns a tuple with the ModuleToFeedMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetModuleToFeedMapOk() (*map[string]FeedIndicator, bool) {
	if o == nil || o.ModuleToFeedMap == nil {
		return nil, false
	}
	return o.ModuleToFeedMap, true
}

// HasModuleToFeedMap returns a boolean if a field has been set.
func (o *IocObject) HasModuleToFeedMap() bool {
	if o != nil && o.ModuleToFeedMap != nil {
		return true
	}

	return false
}

// SetModuleToFeedMap gets a reference to the given map[string]FeedIndicator and assigns it to the ModuleToFeedMap field.
func (o *IocObject) SetModuleToFeedMap(v map[string]FeedIndicator) {
	o.ModuleToFeedMap = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *IocObject) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *IocObject) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *IocObject) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *IocObject) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *IocObject) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *IocObject) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetRelatedIncCount returns the RelatedIncCount field value if set, zero value otherwise.
func (o *IocObject) GetRelatedIncCount() int64 {
	if o == nil || o.RelatedIncCount == nil {
		var ret int64
		return ret
	}
	return *o.RelatedIncCount
}

// GetRelatedIncCountOk returns a tuple with the RelatedIncCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetRelatedIncCountOk() (*int64, bool) {
	if o == nil || o.RelatedIncCount == nil {
		return nil, false
	}
	return o.RelatedIncCount, true
}

// HasRelatedIncCount returns a boolean if a field has been set.
func (o *IocObject) HasRelatedIncCount() bool {
	if o != nil && o.RelatedIncCount != nil {
		return true
	}

	return false
}

// SetRelatedIncCount gets a reference to the given int64 and assigns it to the RelatedIncCount field.
func (o *IocObject) SetRelatedIncCount(v int64) {
	o.RelatedIncCount = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *IocObject) GetScore() int64 {
	if o == nil || o.Score == nil {
		var ret int64
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetScoreOk() (*int64, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *IocObject) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given int64 and assigns it to the Score field.
func (o *IocObject) SetScore(v int64) {
	o.Score = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *IocObject) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *IocObject) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *IocObject) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetSetBy returns the SetBy field value if set, zero value otherwise.
func (o *IocObject) GetSetBy() string {
	if o == nil || o.SetBy == nil {
		var ret string
		return ret
	}
	return *o.SetBy
}

// GetSetByOk returns a tuple with the SetBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetSetByOk() (*string, bool) {
	if o == nil || o.SetBy == nil {
		return nil, false
	}
	return o.SetBy, true
}

// HasSetBy returns a boolean if a field has been set.
func (o *IocObject) HasSetBy() bool {
	if o != nil && o.SetBy != nil {
		return true
	}

	return false
}

// SetSetBy gets a reference to the given string and assigns it to the SetBy field.
func (o *IocObject) SetSetBy(v string) {
	o.SetBy = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *IocObject) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *IocObject) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *IocObject) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *IocObject) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *IocObject) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *IocObject) SetSource(v string) {
	o.Source = &v
}

// GetSourceBrands returns the SourceBrands field value if set, zero value otherwise.
func (o *IocObject) GetSourceBrands() []string {
	if o == nil || o.SourceBrands == nil {
		var ret []string
		return ret
	}
	return *o.SourceBrands
}

// GetSourceBrandsOk returns a tuple with the SourceBrands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetSourceBrandsOk() (*[]string, bool) {
	if o == nil || o.SourceBrands == nil {
		return nil, false
	}
	return o.SourceBrands, true
}

// HasSourceBrands returns a boolean if a field has been set.
func (o *IocObject) HasSourceBrands() bool {
	if o != nil && o.SourceBrands != nil {
		return true
	}

	return false
}

// SetSourceBrands gets a reference to the given []string and assigns it to the SourceBrands field.
func (o *IocObject) SetSourceBrands(v []string) {
	o.SourceBrands = &v
}

// GetSourceInstances returns the SourceInstances field value if set, zero value otherwise.
func (o *IocObject) GetSourceInstances() []string {
	if o == nil || o.SourceInstances == nil {
		var ret []string
		return ret
	}
	return *o.SourceInstances
}

// GetSourceInstancesOk returns a tuple with the SourceInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetSourceInstancesOk() (*[]string, bool) {
	if o == nil || o.SourceInstances == nil {
		return nil, false
	}
	return o.SourceInstances, true
}

// HasSourceInstances returns a boolean if a field has been set.
func (o *IocObject) HasSourceInstances() bool {
	if o != nil && o.SourceInstances != nil {
		return true
	}

	return false
}

// SetSourceInstances gets a reference to the given []string and assigns it to the SourceInstances field.
func (o *IocObject) SetSourceInstances(v []string) {
	o.SourceInstances = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *IocObject) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *IocObject) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *IocObject) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IocObject) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IocObject) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *IocObject) SetValue(v string) {
	o.Value = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IocObject) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IocObject) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IocObject) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *IocObject) SetVersion(v int64) {
	o.Version = &v
}

func (o IocObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomFields != nil {
		toSerialize["CustomFields"] = o.CustomFields
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.AggregatedReliability != nil {
		toSerialize["aggregatedReliability"] = o.AggregatedReliability
	}
	if o.CalculatedTime != nil {
		toSerialize["calculatedTime"] = o.CalculatedTime
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.DeletedFeedFetchTime != nil {
		toSerialize["deletedFeedFetchTime"] = o.DeletedFeedFetchTime
	}
	if o.Expiration != nil {
		toSerialize["expiration"] = o.Expiration
	}
	if o.ExpirationSource != nil {
		toSerialize["expirationSource"] = o.ExpirationSource
	}
	if o.ExpirationStatus != nil {
		toSerialize["expirationStatus"] = o.ExpirationStatus
	}
	if o.FirstSeen != nil {
		toSerialize["firstSeen"] = o.FirstSeen
	}
	if o.FirstSeenEntryID != nil {
		toSerialize["firstSeenEntryID"] = o.FirstSeenEntryID
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IndicatorType != nil {
		toSerialize["indicator_type"] = o.IndicatorType
	}
	if o.InsightCache != nil {
		toSerialize["insightCache"] = o.InsightCache
	}
	if o.InvestigationIDs != nil {
		toSerialize["investigationIDs"] = o.InvestigationIDs
	}
	if o.IsShared != nil {
		toSerialize["isShared"] = o.IsShared
	}
	if o.LastReputationRun != nil {
		toSerialize["lastReputationRun"] = o.LastReputationRun
	}
	if o.LastSeen != nil {
		toSerialize["lastSeen"] = o.LastSeen
	}
	if o.LastSeenEntryID != nil {
		toSerialize["lastSeenEntryID"] = o.LastSeenEntryID
	}
	if o.ManualExpirationTime != nil {
		toSerialize["manualExpirationTime"] = o.ManualExpirationTime
	}
	if o.ManualScore != nil {
		toSerialize["manualScore"] = o.ManualScore
	}
	if o.ManualSetTime != nil {
		toSerialize["manualSetTime"] = o.ManualSetTime
	}
	if o.ManuallyEditedFields != nil {
		toSerialize["manuallyEditedFields"] = o.ManuallyEditedFields
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.ModifiedTime != nil {
		toSerialize["modifiedTime"] = o.ModifiedTime
	}
	if o.ModuleToFeedMap != nil {
		toSerialize["moduleToFeedMap"] = o.ModuleToFeedMap
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.RelatedIncCount != nil {
		toSerialize["relatedIncCount"] = o.RelatedIncCount
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.SetBy != nil {
		toSerialize["setBy"] = o.SetBy
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.SourceBrands != nil {
		toSerialize["sourceBrands"] = o.SourceBrands
	}
	if o.SourceInstances != nil {
		toSerialize["sourceInstances"] = o.SourceInstances
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableIocObject struct {
	value *IocObject
	isSet bool
}

func (v NullableIocObject) Get() *IocObject {
	return v.value
}

func (v *NullableIocObject) Set(val *IocObject) {
	v.value = val
	v.isSet = true
}

func (v NullableIocObject) IsSet() bool {
	return v.isSet
}

func (v *NullableIocObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIocObject(val *IocObject) *NullableIocObject {
	return &NullableIocObject{value: val, isSet: true}
}

func (v NullableIocObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIocObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
