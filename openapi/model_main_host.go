/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MainHost struct for MainHost
type MainHost struct {
	ActiveWorkers *int32  `json:"activeWorkers,omitempty"`
	AppServerId   *string `json:"appServerId,omitempty"`
	HostAddress   *string `json:"hostAddress,omitempty"`
	Id            *string `json:"id,omitempty"`
	Status        *string `json:"status,omitempty"`
	TotalWorkers  *string `json:"totalWorkers,omitempty"`
}

// NewMainHost instantiates a new MainHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMainHost() *MainHost {
	this := MainHost{}
	return &this
}

// NewMainHostWithDefaults instantiates a new MainHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMainHostWithDefaults() *MainHost {
	this := MainHost{}
	return &this
}

// GetActiveWorkers returns the ActiveWorkers field value if set, zero value otherwise.
func (o *MainHost) GetActiveWorkers() int32 {
	if o == nil || o.ActiveWorkers == nil {
		var ret int32
		return ret
	}
	return *o.ActiveWorkers
}

// GetActiveWorkersOk returns a tuple with the ActiveWorkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainHost) GetActiveWorkersOk() (*int32, bool) {
	if o == nil || o.ActiveWorkers == nil {
		return nil, false
	}
	return o.ActiveWorkers, true
}

// HasActiveWorkers returns a boolean if a field has been set.
func (o *MainHost) HasActiveWorkers() bool {
	if o != nil && o.ActiveWorkers != nil {
		return true
	}

	return false
}

// SetActiveWorkers gets a reference to the given int32 and assigns it to the ActiveWorkers field.
func (o *MainHost) SetActiveWorkers(v int32) {
	o.ActiveWorkers = &v
}

// GetAppServerId returns the AppServerId field value if set, zero value otherwise.
func (o *MainHost) GetAppServerId() string {
	if o == nil || o.AppServerId == nil {
		var ret string
		return ret
	}
	return *o.AppServerId
}

// GetAppServerIdOk returns a tuple with the AppServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainHost) GetAppServerIdOk() (*string, bool) {
	if o == nil || o.AppServerId == nil {
		return nil, false
	}
	return o.AppServerId, true
}

// HasAppServerId returns a boolean if a field has been set.
func (o *MainHost) HasAppServerId() bool {
	if o != nil && o.AppServerId != nil {
		return true
	}

	return false
}

// SetAppServerId gets a reference to the given string and assigns it to the AppServerId field.
func (o *MainHost) SetAppServerId(v string) {
	o.AppServerId = &v
}

// GetHostAddress returns the HostAddress field value if set, zero value otherwise.
func (o *MainHost) GetHostAddress() string {
	if o == nil || o.HostAddress == nil {
		var ret string
		return ret
	}
	return *o.HostAddress
}

// GetHostAddressOk returns a tuple with the HostAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainHost) GetHostAddressOk() (*string, bool) {
	if o == nil || o.HostAddress == nil {
		return nil, false
	}
	return o.HostAddress, true
}

// HasHostAddress returns a boolean if a field has been set.
func (o *MainHost) HasHostAddress() bool {
	if o != nil && o.HostAddress != nil {
		return true
	}

	return false
}

// SetHostAddress gets a reference to the given string and assigns it to the HostAddress field.
func (o *MainHost) SetHostAddress(v string) {
	o.HostAddress = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MainHost) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainHost) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MainHost) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MainHost) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MainHost) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainHost) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MainHost) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MainHost) SetStatus(v string) {
	o.Status = &v
}

// GetTotalWorkers returns the TotalWorkers field value if set, zero value otherwise.
func (o *MainHost) GetTotalWorkers() string {
	if o == nil || o.TotalWorkers == nil {
		var ret string
		return ret
	}
	return *o.TotalWorkers
}

// GetTotalWorkersOk returns a tuple with the TotalWorkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainHost) GetTotalWorkersOk() (*string, bool) {
	if o == nil || o.TotalWorkers == nil {
		return nil, false
	}
	return o.TotalWorkers, true
}

// HasTotalWorkers returns a boolean if a field has been set.
func (o *MainHost) HasTotalWorkers() bool {
	if o != nil && o.TotalWorkers != nil {
		return true
	}

	return false
}

// SetTotalWorkers gets a reference to the given string and assigns it to the TotalWorkers field.
func (o *MainHost) SetTotalWorkers(v string) {
	o.TotalWorkers = &v
}

func (o MainHost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveWorkers != nil {
		toSerialize["activeWorkers"] = o.ActiveWorkers
	}
	if o.AppServerId != nil {
		toSerialize["appServerId"] = o.AppServerId
	}
	if o.HostAddress != nil {
		toSerialize["hostAddress"] = o.HostAddress
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.TotalWorkers != nil {
		toSerialize["totalWorkers"] = o.TotalWorkers
	}
	return json.Marshal(toSerialize)
}

type NullableMainHost struct {
	value *MainHost
	isSet bool
}

func (v NullableMainHost) Get() *MainHost {
	return v.value
}

func (v *NullableMainHost) Set(val *MainHost) {
	v.value = val
	v.isSet = true
}

func (v NullableMainHost) IsSet() bool {
	return v.isSet
}

func (v *NullableMainHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainHost(val *MainHost) *NullableMainHost {
	return &NullableMainHost{value: val, isSet: true}
}

func (v NullableMainHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
