/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NotifiableItem struct for NotifiableItem
type NotifiableItem struct {
	Bcc           *AdvanceArg    `json:"bcc,omitempty"`
	Body          *AdvanceArg    `json:"body,omitempty"`
	Cc            *AdvanceArg    `json:"cc,omitempty"`
	DefaultOption *string        `json:"defaultOption,omitempty"`
	Format        *string        `json:"format,omitempty"`
	Methods       *[]string      `json:"methods,omitempty"`
	ReplyOptions  *[]string      `json:"replyOptions,omitempty"`
	Subject       *AdvanceArg    `json:"subject,omitempty"`
	Timings       *NotifyTimings `json:"timings,omitempty"`
	To            *AdvanceArg    `json:"to,omitempty"`
}

// NewNotifiableItem instantiates a new NotifiableItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifiableItem() *NotifiableItem {
	this := NotifiableItem{}
	return &this
}

// NewNotifiableItemWithDefaults instantiates a new NotifiableItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifiableItemWithDefaults() *NotifiableItem {
	this := NotifiableItem{}
	return &this
}

// GetBcc returns the Bcc field value if set, zero value otherwise.
func (o *NotifiableItem) GetBcc() AdvanceArg {
	if o == nil || o.Bcc == nil {
		var ret AdvanceArg
		return ret
	}
	return *o.Bcc
}

// GetBccOk returns a tuple with the Bcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifiableItem) GetBccOk() (*AdvanceArg, bool) {
	if o == nil || o.Bcc == nil {
		return nil, false
	}
	return o.Bcc, true
}

// HasBcc returns a boolean if a field has been set.
func (o *NotifiableItem) HasBcc() bool {
	if o != nil && o.Bcc != nil {
		return true
	}

	return false
}

// SetBcc gets a reference to the given AdvanceArg and assigns it to the Bcc field.
func (o *NotifiableItem) SetBcc(v AdvanceArg) {
	o.Bcc = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *NotifiableItem) GetBody() AdvanceArg {
	if o == nil || o.Body == nil {
		var ret AdvanceArg
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifiableItem) GetBodyOk() (*AdvanceArg, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *NotifiableItem) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given AdvanceArg and assigns it to the Body field.
func (o *NotifiableItem) SetBody(v AdvanceArg) {
	o.Body = &v
}

// GetCc returns the Cc field value if set, zero value otherwise.
func (o *NotifiableItem) GetCc() AdvanceArg {
	if o == nil || o.Cc == nil {
		var ret AdvanceArg
		return ret
	}
	return *o.Cc
}

// GetCcOk returns a tuple with the Cc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifiableItem) GetCcOk() (*AdvanceArg, bool) {
	if o == nil || o.Cc == nil {
		return nil, false
	}
	return o.Cc, true
}

// HasCc returns a boolean if a field has been set.
func (o *NotifiableItem) HasCc() bool {
	if o != nil && o.Cc != nil {
		return true
	}

	return false
}

// SetCc gets a reference to the given AdvanceArg and assigns it to the Cc field.
func (o *NotifiableItem) SetCc(v AdvanceArg) {
	o.Cc = &v
}

// GetDefaultOption returns the DefaultOption field value if set, zero value otherwise.
func (o *NotifiableItem) GetDefaultOption() string {
	if o == nil || o.DefaultOption == nil {
		var ret string
		return ret
	}
	return *o.DefaultOption
}

// GetDefaultOptionOk returns a tuple with the DefaultOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifiableItem) GetDefaultOptionOk() (*string, bool) {
	if o == nil || o.DefaultOption == nil {
		return nil, false
	}
	return o.DefaultOption, true
}

// HasDefaultOption returns a boolean if a field has been set.
func (o *NotifiableItem) HasDefaultOption() bool {
	if o != nil && o.DefaultOption != nil {
		return true
	}

	return false
}

// SetDefaultOption gets a reference to the given string and assigns it to the DefaultOption field.
func (o *NotifiableItem) SetDefaultOption(v string) {
	o.DefaultOption = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *NotifiableItem) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifiableItem) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *NotifiableItem) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *NotifiableItem) SetFormat(v string) {
	o.Format = &v
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *NotifiableItem) GetMethods() []string {
	if o == nil || o.Methods == nil {
		var ret []string
		return ret
	}
	return *o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifiableItem) GetMethodsOk() (*[]string, bool) {
	if o == nil || o.Methods == nil {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *NotifiableItem) HasMethods() bool {
	if o != nil && o.Methods != nil {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []string and assigns it to the Methods field.
func (o *NotifiableItem) SetMethods(v []string) {
	o.Methods = &v
}

// GetReplyOptions returns the ReplyOptions field value if set, zero value otherwise.
func (o *NotifiableItem) GetReplyOptions() []string {
	if o == nil || o.ReplyOptions == nil {
		var ret []string
		return ret
	}
	return *o.ReplyOptions
}

// GetReplyOptionsOk returns a tuple with the ReplyOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifiableItem) GetReplyOptionsOk() (*[]string, bool) {
	if o == nil || o.ReplyOptions == nil {
		return nil, false
	}
	return o.ReplyOptions, true
}

// HasReplyOptions returns a boolean if a field has been set.
func (o *NotifiableItem) HasReplyOptions() bool {
	if o != nil && o.ReplyOptions != nil {
		return true
	}

	return false
}

// SetReplyOptions gets a reference to the given []string and assigns it to the ReplyOptions field.
func (o *NotifiableItem) SetReplyOptions(v []string) {
	o.ReplyOptions = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *NotifiableItem) GetSubject() AdvanceArg {
	if o == nil || o.Subject == nil {
		var ret AdvanceArg
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifiableItem) GetSubjectOk() (*AdvanceArg, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *NotifiableItem) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given AdvanceArg and assigns it to the Subject field.
func (o *NotifiableItem) SetSubject(v AdvanceArg) {
	o.Subject = &v
}

// GetTimings returns the Timings field value if set, zero value otherwise.
func (o *NotifiableItem) GetTimings() NotifyTimings {
	if o == nil || o.Timings == nil {
		var ret NotifyTimings
		return ret
	}
	return *o.Timings
}

// GetTimingsOk returns a tuple with the Timings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifiableItem) GetTimingsOk() (*NotifyTimings, bool) {
	if o == nil || o.Timings == nil {
		return nil, false
	}
	return o.Timings, true
}

// HasTimings returns a boolean if a field has been set.
func (o *NotifiableItem) HasTimings() bool {
	if o != nil && o.Timings != nil {
		return true
	}

	return false
}

// SetTimings gets a reference to the given NotifyTimings and assigns it to the Timings field.
func (o *NotifiableItem) SetTimings(v NotifyTimings) {
	o.Timings = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *NotifiableItem) GetTo() AdvanceArg {
	if o == nil || o.To == nil {
		var ret AdvanceArg
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifiableItem) GetToOk() (*AdvanceArg, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *NotifiableItem) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given AdvanceArg and assigns it to the To field.
func (o *NotifiableItem) SetTo(v AdvanceArg) {
	o.To = &v
}

func (o NotifiableItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bcc != nil {
		toSerialize["bcc"] = o.Bcc
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.Cc != nil {
		toSerialize["cc"] = o.Cc
	}
	if o.DefaultOption != nil {
		toSerialize["defaultOption"] = o.DefaultOption
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.Methods != nil {
		toSerialize["methods"] = o.Methods
	}
	if o.ReplyOptions != nil {
		toSerialize["replyOptions"] = o.ReplyOptions
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Timings != nil {
		toSerialize["timings"] = o.Timings
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	return json.Marshal(toSerialize)
}

type NullableNotifiableItem struct {
	value *NotifiableItem
	isSet bool
}

func (v NullableNotifiableItem) Get() *NotifiableItem {
	return v.value
}

func (v *NullableNotifiableItem) Set(val *NotifiableItem) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifiableItem) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifiableItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifiableItem(val *NotifiableItem) *NullableNotifiableItem {
	return &NullableNotifiableItem{value: val, isSet: true}
}

func (v NullableNotifiableItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifiableItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
