/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Playbook Playbook is a collection of tasks
type Playbook struct {
	AllRead       *bool     `json:"allRead,omitempty"`
	AllReadWrite  *bool     `json:"allReadWrite,omitempty"`
	Brands        *[]string `json:"brands,omitempty"`
	Commands      *[]string `json:"commands,omitempty"`
	Comment       *string   `json:"comment,omitempty"`
	CommitMessage *string   `json:"commitMessage,omitempty"`
	// Who has created this event - relevant only for manual incidents
	DbotCreatedBy     *string `json:"dbotCreatedBy,omitempty"`
	Deprecated        *bool   `json:"deprecated,omitempty"`
	Detached          *bool   `json:"detached,omitempty"`
	EncTasks          *string `json:"encTasks,omitempty"`
	FromServerVersion *string `json:"fromServerVersion,omitempty"`
	// Internal field to make queries on role faster
	HasRole   *bool                `json:"hasRole,omitempty"`
	Hidden    *bool                `json:"hidden,omitempty"`
	Highlight *map[string][]string `json:"highlight,omitempty"`
	Id        *string              `json:"id,omitempty"`
	// PlaybookInputs - array of PlaybookInput
	Inputs            *[]PlaybookInput `json:"inputs,omitempty"`
	ItemVersion       *string          `json:"itemVersion,omitempty"`
	Locked            *bool            `json:"locked,omitempty"`
	MissingScriptsIds *[]string        `json:"missingScriptsIds,omitempty"`
	Modified          *time.Time       `json:"modified,omitempty"`
	Name              *string          `json:"name,omitempty"`
	NameRaw           *string          `json:"nameRaw,omitempty"`
	NumericId         *int64           `json:"numericId,omitempty"`
	// PlaybookOutputs - array of PlaybookOutput
	Outputs               *[]PlaybookOutput `json:"outputs,omitempty"`
	PackID                *string           `json:"packID,omitempty"`
	PackPropagationLabels *[]string         `json:"packPropagationLabels,omitempty"`
	PrevName              *string           `json:"prevName,omitempty"`
	PreviousAllRead       *bool             `json:"previousAllRead,omitempty"`
	PreviousAllReadWrite  *bool             `json:"previousAllReadWrite,omitempty"`
	// Do not change this field manually
	PreviousRoles     *[]string `json:"previousRoles,omitempty"`
	PrimaryTerm       *int64    `json:"primaryTerm,omitempty"`
	Private           *bool     `json:"private,omitempty"`
	PropagationLabels *[]string `json:"propagationLabels,omitempty"`
	Quiet             *bool     `json:"quiet,omitempty"`
	// The role assigned to this investigation
	Roles            *[]string `json:"roles,omitempty"`
	ScriptIds        *[]string `json:"scriptIds,omitempty"`
	SequenceNumber   *int64    `json:"sequenceNumber,omitempty"`
	ShouldCommit     *bool     `json:"shouldCommit,omitempty"`
	SortValues       *[]string `json:"sortValues,omitempty"`
	SourcePlaybookID *string   `json:"sourcePlaybookID,omitempty"`
	StartTaskId      *string   `json:"startTaskId,omitempty"`
	System           *bool     `json:"system,omitempty"`
	Tags             *[]string `json:"tags,omitempty"`
	// auto generated field that will contain all task ids in this playbook Needed for searching with bleve
	TaskIds                           *[]string                `json:"taskIds,omitempty"`
	Tasks                             *map[string]PlaybookTask `json:"tasks,omitempty"`
	ToServerVersion                   *string                  `json:"toServerVersion,omitempty"`
	VcShouldIgnore                    *bool                    `json:"vcShouldIgnore,omitempty"`
	VcShouldKeepItemLegacyProdMachine *bool                    `json:"vcShouldKeepItemLegacyProdMachine,omitempty"`
	Version                           *int64                   `json:"version,omitempty"`
	// PlaybookView represents the view in client of playbook graph
	View                       *map[string]interface{} `json:"view,omitempty"`
	XsoarHasReadOnlyRole       *bool                   `json:"xsoarHasReadOnlyRole,omitempty"`
	XsoarPreviousReadOnlyRoles *[]string               `json:"xsoarPreviousReadOnlyRoles,omitempty"`
	XsoarReadOnlyRoles         *[]string               `json:"xsoarReadOnlyRoles,omitempty"`
}

// NewPlaybook instantiates a new Playbook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaybook() *Playbook {
	this := Playbook{}
	return &this
}

// NewPlaybookWithDefaults instantiates a new Playbook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaybookWithDefaults() *Playbook {
	this := Playbook{}
	return &this
}

// GetAllRead returns the AllRead field value if set, zero value otherwise.
func (o *Playbook) GetAllRead() bool {
	if o == nil || o.AllRead == nil {
		var ret bool
		return ret
	}
	return *o.AllRead
}

// GetAllReadOk returns a tuple with the AllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetAllReadOk() (*bool, bool) {
	if o == nil || o.AllRead == nil {
		return nil, false
	}
	return o.AllRead, true
}

// HasAllRead returns a boolean if a field has been set.
func (o *Playbook) HasAllRead() bool {
	if o != nil && o.AllRead != nil {
		return true
	}

	return false
}

// SetAllRead gets a reference to the given bool and assigns it to the AllRead field.
func (o *Playbook) SetAllRead(v bool) {
	o.AllRead = &v
}

// GetAllReadWrite returns the AllReadWrite field value if set, zero value otherwise.
func (o *Playbook) GetAllReadWrite() bool {
	if o == nil || o.AllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.AllReadWrite
}

// GetAllReadWriteOk returns a tuple with the AllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetAllReadWriteOk() (*bool, bool) {
	if o == nil || o.AllReadWrite == nil {
		return nil, false
	}
	return o.AllReadWrite, true
}

// HasAllReadWrite returns a boolean if a field has been set.
func (o *Playbook) HasAllReadWrite() bool {
	if o != nil && o.AllReadWrite != nil {
		return true
	}

	return false
}

// SetAllReadWrite gets a reference to the given bool and assigns it to the AllReadWrite field.
func (o *Playbook) SetAllReadWrite(v bool) {
	o.AllReadWrite = &v
}

// GetBrands returns the Brands field value if set, zero value otherwise.
func (o *Playbook) GetBrands() []string {
	if o == nil || o.Brands == nil {
		var ret []string
		return ret
	}
	return *o.Brands
}

// GetBrandsOk returns a tuple with the Brands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetBrandsOk() (*[]string, bool) {
	if o == nil || o.Brands == nil {
		return nil, false
	}
	return o.Brands, true
}

// HasBrands returns a boolean if a field has been set.
func (o *Playbook) HasBrands() bool {
	if o != nil && o.Brands != nil {
		return true
	}

	return false
}

// SetBrands gets a reference to the given []string and assigns it to the Brands field.
func (o *Playbook) SetBrands(v []string) {
	o.Brands = &v
}

// GetCommands returns the Commands field value if set, zero value otherwise.
func (o *Playbook) GetCommands() []string {
	if o == nil || o.Commands == nil {
		var ret []string
		return ret
	}
	return *o.Commands
}

// GetCommandsOk returns a tuple with the Commands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetCommandsOk() (*[]string, bool) {
	if o == nil || o.Commands == nil {
		return nil, false
	}
	return o.Commands, true
}

// HasCommands returns a boolean if a field has been set.
func (o *Playbook) HasCommands() bool {
	if o != nil && o.Commands != nil {
		return true
	}

	return false
}

// SetCommands gets a reference to the given []string and assigns it to the Commands field.
func (o *Playbook) SetCommands(v []string) {
	o.Commands = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Playbook) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Playbook) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Playbook) SetComment(v string) {
	o.Comment = &v
}

// GetCommitMessage returns the CommitMessage field value if set, zero value otherwise.
func (o *Playbook) GetCommitMessage() string {
	if o == nil || o.CommitMessage == nil {
		var ret string
		return ret
	}
	return *o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetCommitMessageOk() (*string, bool) {
	if o == nil || o.CommitMessage == nil {
		return nil, false
	}
	return o.CommitMessage, true
}

// HasCommitMessage returns a boolean if a field has been set.
func (o *Playbook) HasCommitMessage() bool {
	if o != nil && o.CommitMessage != nil {
		return true
	}

	return false
}

// SetCommitMessage gets a reference to the given string and assigns it to the CommitMessage field.
func (o *Playbook) SetCommitMessage(v string) {
	o.CommitMessage = &v
}

// GetDbotCreatedBy returns the DbotCreatedBy field value if set, zero value otherwise.
func (o *Playbook) GetDbotCreatedBy() string {
	if o == nil || o.DbotCreatedBy == nil {
		var ret string
		return ret
	}
	return *o.DbotCreatedBy
}

// GetDbotCreatedByOk returns a tuple with the DbotCreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetDbotCreatedByOk() (*string, bool) {
	if o == nil || o.DbotCreatedBy == nil {
		return nil, false
	}
	return o.DbotCreatedBy, true
}

// HasDbotCreatedBy returns a boolean if a field has been set.
func (o *Playbook) HasDbotCreatedBy() bool {
	if o != nil && o.DbotCreatedBy != nil {
		return true
	}

	return false
}

// SetDbotCreatedBy gets a reference to the given string and assigns it to the DbotCreatedBy field.
func (o *Playbook) SetDbotCreatedBy(v string) {
	o.DbotCreatedBy = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *Playbook) GetDeprecated() bool {
	if o == nil || o.Deprecated == nil {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetDeprecatedOk() (*bool, bool) {
	if o == nil || o.Deprecated == nil {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *Playbook) HasDeprecated() bool {
	if o != nil && o.Deprecated != nil {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *Playbook) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetDetached returns the Detached field value if set, zero value otherwise.
func (o *Playbook) GetDetached() bool {
	if o == nil || o.Detached == nil {
		var ret bool
		return ret
	}
	return *o.Detached
}

// GetDetachedOk returns a tuple with the Detached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetDetachedOk() (*bool, bool) {
	if o == nil || o.Detached == nil {
		return nil, false
	}
	return o.Detached, true
}

// HasDetached returns a boolean if a field has been set.
func (o *Playbook) HasDetached() bool {
	if o != nil && o.Detached != nil {
		return true
	}

	return false
}

// SetDetached gets a reference to the given bool and assigns it to the Detached field.
func (o *Playbook) SetDetached(v bool) {
	o.Detached = &v
}

// GetEncTasks returns the EncTasks field value if set, zero value otherwise.
func (o *Playbook) GetEncTasks() string {
	if o == nil || o.EncTasks == nil {
		var ret string
		return ret
	}
	return *o.EncTasks
}

// GetEncTasksOk returns a tuple with the EncTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetEncTasksOk() (*string, bool) {
	if o == nil || o.EncTasks == nil {
		return nil, false
	}
	return o.EncTasks, true
}

// HasEncTasks returns a boolean if a field has been set.
func (o *Playbook) HasEncTasks() bool {
	if o != nil && o.EncTasks != nil {
		return true
	}

	return false
}

// SetEncTasks gets a reference to the given string and assigns it to the EncTasks field.
func (o *Playbook) SetEncTasks(v string) {
	o.EncTasks = &v
}

// GetFromServerVersion returns the FromServerVersion field value if set, zero value otherwise.
func (o *Playbook) GetFromServerVersion() string {
	if o == nil || o.FromServerVersion == nil {
		var ret string
		return ret
	}
	return *o.FromServerVersion
}

// GetFromServerVersionOk returns a tuple with the FromServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetFromServerVersionOk() (*string, bool) {
	if o == nil || o.FromServerVersion == nil {
		return nil, false
	}
	return o.FromServerVersion, true
}

// HasFromServerVersion returns a boolean if a field has been set.
func (o *Playbook) HasFromServerVersion() bool {
	if o != nil && o.FromServerVersion != nil {
		return true
	}

	return false
}

// SetFromServerVersion gets a reference to the given string and assigns it to the FromServerVersion field.
func (o *Playbook) SetFromServerVersion(v string) {
	o.FromServerVersion = &v
}

// GetHasRole returns the HasRole field value if set, zero value otherwise.
func (o *Playbook) GetHasRole() bool {
	if o == nil || o.HasRole == nil {
		var ret bool
		return ret
	}
	return *o.HasRole
}

// GetHasRoleOk returns a tuple with the HasRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetHasRoleOk() (*bool, bool) {
	if o == nil || o.HasRole == nil {
		return nil, false
	}
	return o.HasRole, true
}

// HasHasRole returns a boolean if a field has been set.
func (o *Playbook) HasHasRole() bool {
	if o != nil && o.HasRole != nil {
		return true
	}

	return false
}

// SetHasRole gets a reference to the given bool and assigns it to the HasRole field.
func (o *Playbook) SetHasRole(v bool) {
	o.HasRole = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *Playbook) GetHidden() bool {
	if o == nil || o.Hidden == nil {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetHiddenOk() (*bool, bool) {
	if o == nil || o.Hidden == nil {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *Playbook) HasHidden() bool {
	if o != nil && o.Hidden != nil {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *Playbook) SetHidden(v bool) {
	o.Hidden = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *Playbook) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *Playbook) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *Playbook) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Playbook) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Playbook) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Playbook) SetId(v string) {
	o.Id = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *Playbook) GetInputs() []PlaybookInput {
	if o == nil || o.Inputs == nil {
		var ret []PlaybookInput
		return ret
	}
	return *o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetInputsOk() (*[]PlaybookInput, bool) {
	if o == nil || o.Inputs == nil {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *Playbook) HasInputs() bool {
	if o != nil && o.Inputs != nil {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []PlaybookInput and assigns it to the Inputs field.
func (o *Playbook) SetInputs(v []PlaybookInput) {
	o.Inputs = &v
}

// GetItemVersion returns the ItemVersion field value if set, zero value otherwise.
func (o *Playbook) GetItemVersion() string {
	if o == nil || o.ItemVersion == nil {
		var ret string
		return ret
	}
	return *o.ItemVersion
}

// GetItemVersionOk returns a tuple with the ItemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetItemVersionOk() (*string, bool) {
	if o == nil || o.ItemVersion == nil {
		return nil, false
	}
	return o.ItemVersion, true
}

// HasItemVersion returns a boolean if a field has been set.
func (o *Playbook) HasItemVersion() bool {
	if o != nil && o.ItemVersion != nil {
		return true
	}

	return false
}

// SetItemVersion gets a reference to the given string and assigns it to the ItemVersion field.
func (o *Playbook) SetItemVersion(v string) {
	o.ItemVersion = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *Playbook) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *Playbook) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *Playbook) SetLocked(v bool) {
	o.Locked = &v
}

// GetMissingScriptsIds returns the MissingScriptsIds field value if set, zero value otherwise.
func (o *Playbook) GetMissingScriptsIds() []string {
	if o == nil || o.MissingScriptsIds == nil {
		var ret []string
		return ret
	}
	return *o.MissingScriptsIds
}

// GetMissingScriptsIdsOk returns a tuple with the MissingScriptsIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetMissingScriptsIdsOk() (*[]string, bool) {
	if o == nil || o.MissingScriptsIds == nil {
		return nil, false
	}
	return o.MissingScriptsIds, true
}

// HasMissingScriptsIds returns a boolean if a field has been set.
func (o *Playbook) HasMissingScriptsIds() bool {
	if o != nil && o.MissingScriptsIds != nil {
		return true
	}

	return false
}

// SetMissingScriptsIds gets a reference to the given []string and assigns it to the MissingScriptsIds field.
func (o *Playbook) SetMissingScriptsIds(v []string) {
	o.MissingScriptsIds = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Playbook) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Playbook) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Playbook) SetModified(v time.Time) {
	o.Modified = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Playbook) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Playbook) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Playbook) SetName(v string) {
	o.Name = &v
}

// GetNameRaw returns the NameRaw field value if set, zero value otherwise.
func (o *Playbook) GetNameRaw() string {
	if o == nil || o.NameRaw == nil {
		var ret string
		return ret
	}
	return *o.NameRaw
}

// GetNameRawOk returns a tuple with the NameRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetNameRawOk() (*string, bool) {
	if o == nil || o.NameRaw == nil {
		return nil, false
	}
	return o.NameRaw, true
}

// HasNameRaw returns a boolean if a field has been set.
func (o *Playbook) HasNameRaw() bool {
	if o != nil && o.NameRaw != nil {
		return true
	}

	return false
}

// SetNameRaw gets a reference to the given string and assigns it to the NameRaw field.
func (o *Playbook) SetNameRaw(v string) {
	o.NameRaw = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *Playbook) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *Playbook) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *Playbook) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *Playbook) GetOutputs() []PlaybookOutput {
	if o == nil || o.Outputs == nil {
		var ret []PlaybookOutput
		return ret
	}
	return *o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetOutputsOk() (*[]PlaybookOutput, bool) {
	if o == nil || o.Outputs == nil {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *Playbook) HasOutputs() bool {
	if o != nil && o.Outputs != nil {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []PlaybookOutput and assigns it to the Outputs field.
func (o *Playbook) SetOutputs(v []PlaybookOutput) {
	o.Outputs = &v
}

// GetPackID returns the PackID field value if set, zero value otherwise.
func (o *Playbook) GetPackID() string {
	if o == nil || o.PackID == nil {
		var ret string
		return ret
	}
	return *o.PackID
}

// GetPackIDOk returns a tuple with the PackID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetPackIDOk() (*string, bool) {
	if o == nil || o.PackID == nil {
		return nil, false
	}
	return o.PackID, true
}

// HasPackID returns a boolean if a field has been set.
func (o *Playbook) HasPackID() bool {
	if o != nil && o.PackID != nil {
		return true
	}

	return false
}

// SetPackID gets a reference to the given string and assigns it to the PackID field.
func (o *Playbook) SetPackID(v string) {
	o.PackID = &v
}

// GetPackPropagationLabels returns the PackPropagationLabels field value if set, zero value otherwise.
func (o *Playbook) GetPackPropagationLabels() []string {
	if o == nil || o.PackPropagationLabels == nil {
		var ret []string
		return ret
	}
	return *o.PackPropagationLabels
}

// GetPackPropagationLabelsOk returns a tuple with the PackPropagationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetPackPropagationLabelsOk() (*[]string, bool) {
	if o == nil || o.PackPropagationLabels == nil {
		return nil, false
	}
	return o.PackPropagationLabels, true
}

// HasPackPropagationLabels returns a boolean if a field has been set.
func (o *Playbook) HasPackPropagationLabels() bool {
	if o != nil && o.PackPropagationLabels != nil {
		return true
	}

	return false
}

// SetPackPropagationLabels gets a reference to the given []string and assigns it to the PackPropagationLabels field.
func (o *Playbook) SetPackPropagationLabels(v []string) {
	o.PackPropagationLabels = &v
}

// GetPrevName returns the PrevName field value if set, zero value otherwise.
func (o *Playbook) GetPrevName() string {
	if o == nil || o.PrevName == nil {
		var ret string
		return ret
	}
	return *o.PrevName
}

// GetPrevNameOk returns a tuple with the PrevName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetPrevNameOk() (*string, bool) {
	if o == nil || o.PrevName == nil {
		return nil, false
	}
	return o.PrevName, true
}

// HasPrevName returns a boolean if a field has been set.
func (o *Playbook) HasPrevName() bool {
	if o != nil && o.PrevName != nil {
		return true
	}

	return false
}

// SetPrevName gets a reference to the given string and assigns it to the PrevName field.
func (o *Playbook) SetPrevName(v string) {
	o.PrevName = &v
}

// GetPreviousAllRead returns the PreviousAllRead field value if set, zero value otherwise.
func (o *Playbook) GetPreviousAllRead() bool {
	if o == nil || o.PreviousAllRead == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllRead
}

// GetPreviousAllReadOk returns a tuple with the PreviousAllRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetPreviousAllReadOk() (*bool, bool) {
	if o == nil || o.PreviousAllRead == nil {
		return nil, false
	}
	return o.PreviousAllRead, true
}

// HasPreviousAllRead returns a boolean if a field has been set.
func (o *Playbook) HasPreviousAllRead() bool {
	if o != nil && o.PreviousAllRead != nil {
		return true
	}

	return false
}

// SetPreviousAllRead gets a reference to the given bool and assigns it to the PreviousAllRead field.
func (o *Playbook) SetPreviousAllRead(v bool) {
	o.PreviousAllRead = &v
}

// GetPreviousAllReadWrite returns the PreviousAllReadWrite field value if set, zero value otherwise.
func (o *Playbook) GetPreviousAllReadWrite() bool {
	if o == nil || o.PreviousAllReadWrite == nil {
		var ret bool
		return ret
	}
	return *o.PreviousAllReadWrite
}

// GetPreviousAllReadWriteOk returns a tuple with the PreviousAllReadWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetPreviousAllReadWriteOk() (*bool, bool) {
	if o == nil || o.PreviousAllReadWrite == nil {
		return nil, false
	}
	return o.PreviousAllReadWrite, true
}

// HasPreviousAllReadWrite returns a boolean if a field has been set.
func (o *Playbook) HasPreviousAllReadWrite() bool {
	if o != nil && o.PreviousAllReadWrite != nil {
		return true
	}

	return false
}

// SetPreviousAllReadWrite gets a reference to the given bool and assigns it to the PreviousAllReadWrite field.
func (o *Playbook) SetPreviousAllReadWrite(v bool) {
	o.PreviousAllReadWrite = &v
}

// GetPreviousRoles returns the PreviousRoles field value if set, zero value otherwise.
func (o *Playbook) GetPreviousRoles() []string {
	if o == nil || o.PreviousRoles == nil {
		var ret []string
		return ret
	}
	return *o.PreviousRoles
}

// GetPreviousRolesOk returns a tuple with the PreviousRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetPreviousRolesOk() (*[]string, bool) {
	if o == nil || o.PreviousRoles == nil {
		return nil, false
	}
	return o.PreviousRoles, true
}

// HasPreviousRoles returns a boolean if a field has been set.
func (o *Playbook) HasPreviousRoles() bool {
	if o != nil && o.PreviousRoles != nil {
		return true
	}

	return false
}

// SetPreviousRoles gets a reference to the given []string and assigns it to the PreviousRoles field.
func (o *Playbook) SetPreviousRoles(v []string) {
	o.PreviousRoles = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *Playbook) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *Playbook) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *Playbook) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *Playbook) GetPrivate() bool {
	if o == nil || o.Private == nil {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetPrivateOk() (*bool, bool) {
	if o == nil || o.Private == nil {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *Playbook) HasPrivate() bool {
	if o != nil && o.Private != nil {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *Playbook) SetPrivate(v bool) {
	o.Private = &v
}

// GetPropagationLabels returns the PropagationLabels field value if set, zero value otherwise.
func (o *Playbook) GetPropagationLabels() []string {
	if o == nil || o.PropagationLabels == nil {
		var ret []string
		return ret
	}
	return *o.PropagationLabels
}

// GetPropagationLabelsOk returns a tuple with the PropagationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetPropagationLabelsOk() (*[]string, bool) {
	if o == nil || o.PropagationLabels == nil {
		return nil, false
	}
	return o.PropagationLabels, true
}

// HasPropagationLabels returns a boolean if a field has been set.
func (o *Playbook) HasPropagationLabels() bool {
	if o != nil && o.PropagationLabels != nil {
		return true
	}

	return false
}

// SetPropagationLabels gets a reference to the given []string and assigns it to the PropagationLabels field.
func (o *Playbook) SetPropagationLabels(v []string) {
	o.PropagationLabels = &v
}

// GetQuiet returns the Quiet field value if set, zero value otherwise.
func (o *Playbook) GetQuiet() bool {
	if o == nil || o.Quiet == nil {
		var ret bool
		return ret
	}
	return *o.Quiet
}

// GetQuietOk returns a tuple with the Quiet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetQuietOk() (*bool, bool) {
	if o == nil || o.Quiet == nil {
		return nil, false
	}
	return o.Quiet, true
}

// HasQuiet returns a boolean if a field has been set.
func (o *Playbook) HasQuiet() bool {
	if o != nil && o.Quiet != nil {
		return true
	}

	return false
}

// SetQuiet gets a reference to the given bool and assigns it to the Quiet field.
func (o *Playbook) SetQuiet(v bool) {
	o.Quiet = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Playbook) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Playbook) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *Playbook) SetRoles(v []string) {
	o.Roles = &v
}

// GetScriptIds returns the ScriptIds field value if set, zero value otherwise.
func (o *Playbook) GetScriptIds() []string {
	if o == nil || o.ScriptIds == nil {
		var ret []string
		return ret
	}
	return *o.ScriptIds
}

// GetScriptIdsOk returns a tuple with the ScriptIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetScriptIdsOk() (*[]string, bool) {
	if o == nil || o.ScriptIds == nil {
		return nil, false
	}
	return o.ScriptIds, true
}

// HasScriptIds returns a boolean if a field has been set.
func (o *Playbook) HasScriptIds() bool {
	if o != nil && o.ScriptIds != nil {
		return true
	}

	return false
}

// SetScriptIds gets a reference to the given []string and assigns it to the ScriptIds field.
func (o *Playbook) SetScriptIds(v []string) {
	o.ScriptIds = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *Playbook) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *Playbook) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *Playbook) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetShouldCommit returns the ShouldCommit field value if set, zero value otherwise.
func (o *Playbook) GetShouldCommit() bool {
	if o == nil || o.ShouldCommit == nil {
		var ret bool
		return ret
	}
	return *o.ShouldCommit
}

// GetShouldCommitOk returns a tuple with the ShouldCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetShouldCommitOk() (*bool, bool) {
	if o == nil || o.ShouldCommit == nil {
		return nil, false
	}
	return o.ShouldCommit, true
}

// HasShouldCommit returns a boolean if a field has been set.
func (o *Playbook) HasShouldCommit() bool {
	if o != nil && o.ShouldCommit != nil {
		return true
	}

	return false
}

// SetShouldCommit gets a reference to the given bool and assigns it to the ShouldCommit field.
func (o *Playbook) SetShouldCommit(v bool) {
	o.ShouldCommit = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *Playbook) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *Playbook) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *Playbook) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetSourcePlaybookID returns the SourcePlaybookID field value if set, zero value otherwise.
func (o *Playbook) GetSourcePlaybookID() string {
	if o == nil || o.SourcePlaybookID == nil {
		var ret string
		return ret
	}
	return *o.SourcePlaybookID
}

// GetSourcePlaybookIDOk returns a tuple with the SourcePlaybookID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetSourcePlaybookIDOk() (*string, bool) {
	if o == nil || o.SourcePlaybookID == nil {
		return nil, false
	}
	return o.SourcePlaybookID, true
}

// HasSourcePlaybookID returns a boolean if a field has been set.
func (o *Playbook) HasSourcePlaybookID() bool {
	if o != nil && o.SourcePlaybookID != nil {
		return true
	}

	return false
}

// SetSourcePlaybookID gets a reference to the given string and assigns it to the SourcePlaybookID field.
func (o *Playbook) SetSourcePlaybookID(v string) {
	o.SourcePlaybookID = &v
}

// GetStartTaskId returns the StartTaskId field value if set, zero value otherwise.
func (o *Playbook) GetStartTaskId() string {
	if o == nil || o.StartTaskId == nil {
		var ret string
		return ret
	}
	return *o.StartTaskId
}

// GetStartTaskIdOk returns a tuple with the StartTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetStartTaskIdOk() (*string, bool) {
	if o == nil || o.StartTaskId == nil {
		return nil, false
	}
	return o.StartTaskId, true
}

// HasStartTaskId returns a boolean if a field has been set.
func (o *Playbook) HasStartTaskId() bool {
	if o != nil && o.StartTaskId != nil {
		return true
	}

	return false
}

// SetStartTaskId gets a reference to the given string and assigns it to the StartTaskId field.
func (o *Playbook) SetStartTaskId(v string) {
	o.StartTaskId = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *Playbook) GetSystem() bool {
	if o == nil || o.System == nil {
		var ret bool
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetSystemOk() (*bool, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *Playbook) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given bool and assigns it to the System field.
func (o *Playbook) SetSystem(v bool) {
	o.System = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Playbook) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Playbook) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Playbook) SetTags(v []string) {
	o.Tags = &v
}

// GetTaskIds returns the TaskIds field value if set, zero value otherwise.
func (o *Playbook) GetTaskIds() []string {
	if o == nil || o.TaskIds == nil {
		var ret []string
		return ret
	}
	return *o.TaskIds
}

// GetTaskIdsOk returns a tuple with the TaskIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetTaskIdsOk() (*[]string, bool) {
	if o == nil || o.TaskIds == nil {
		return nil, false
	}
	return o.TaskIds, true
}

// HasTaskIds returns a boolean if a field has been set.
func (o *Playbook) HasTaskIds() bool {
	if o != nil && o.TaskIds != nil {
		return true
	}

	return false
}

// SetTaskIds gets a reference to the given []string and assigns it to the TaskIds field.
func (o *Playbook) SetTaskIds(v []string) {
	o.TaskIds = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *Playbook) GetTasks() map[string]PlaybookTask {
	if o == nil || o.Tasks == nil {
		var ret map[string]PlaybookTask
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetTasksOk() (*map[string]PlaybookTask, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *Playbook) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given map[string]PlaybookTask and assigns it to the Tasks field.
func (o *Playbook) SetTasks(v map[string]PlaybookTask) {
	o.Tasks = &v
}

// GetToServerVersion returns the ToServerVersion field value if set, zero value otherwise.
func (o *Playbook) GetToServerVersion() string {
	if o == nil || o.ToServerVersion == nil {
		var ret string
		return ret
	}
	return *o.ToServerVersion
}

// GetToServerVersionOk returns a tuple with the ToServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetToServerVersionOk() (*string, bool) {
	if o == nil || o.ToServerVersion == nil {
		return nil, false
	}
	return o.ToServerVersion, true
}

// HasToServerVersion returns a boolean if a field has been set.
func (o *Playbook) HasToServerVersion() bool {
	if o != nil && o.ToServerVersion != nil {
		return true
	}

	return false
}

// SetToServerVersion gets a reference to the given string and assigns it to the ToServerVersion field.
func (o *Playbook) SetToServerVersion(v string) {
	o.ToServerVersion = &v
}

// GetVcShouldIgnore returns the VcShouldIgnore field value if set, zero value otherwise.
func (o *Playbook) GetVcShouldIgnore() bool {
	if o == nil || o.VcShouldIgnore == nil {
		var ret bool
		return ret
	}
	return *o.VcShouldIgnore
}

// GetVcShouldIgnoreOk returns a tuple with the VcShouldIgnore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetVcShouldIgnoreOk() (*bool, bool) {
	if o == nil || o.VcShouldIgnore == nil {
		return nil, false
	}
	return o.VcShouldIgnore, true
}

// HasVcShouldIgnore returns a boolean if a field has been set.
func (o *Playbook) HasVcShouldIgnore() bool {
	if o != nil && o.VcShouldIgnore != nil {
		return true
	}

	return false
}

// SetVcShouldIgnore gets a reference to the given bool and assigns it to the VcShouldIgnore field.
func (o *Playbook) SetVcShouldIgnore(v bool) {
	o.VcShouldIgnore = &v
}

// GetVcShouldKeepItemLegacyProdMachine returns the VcShouldKeepItemLegacyProdMachine field value if set, zero value otherwise.
func (o *Playbook) GetVcShouldKeepItemLegacyProdMachine() bool {
	if o == nil || o.VcShouldKeepItemLegacyProdMachine == nil {
		var ret bool
		return ret
	}
	return *o.VcShouldKeepItemLegacyProdMachine
}

// GetVcShouldKeepItemLegacyProdMachineOk returns a tuple with the VcShouldKeepItemLegacyProdMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetVcShouldKeepItemLegacyProdMachineOk() (*bool, bool) {
	if o == nil || o.VcShouldKeepItemLegacyProdMachine == nil {
		return nil, false
	}
	return o.VcShouldKeepItemLegacyProdMachine, true
}

// HasVcShouldKeepItemLegacyProdMachine returns a boolean if a field has been set.
func (o *Playbook) HasVcShouldKeepItemLegacyProdMachine() bool {
	if o != nil && o.VcShouldKeepItemLegacyProdMachine != nil {
		return true
	}

	return false
}

// SetVcShouldKeepItemLegacyProdMachine gets a reference to the given bool and assigns it to the VcShouldKeepItemLegacyProdMachine field.
func (o *Playbook) SetVcShouldKeepItemLegacyProdMachine(v bool) {
	o.VcShouldKeepItemLegacyProdMachine = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Playbook) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Playbook) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *Playbook) SetVersion(v int64) {
	o.Version = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *Playbook) GetView() map[string]interface{} {
	if o == nil || o.View == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetViewOk() (*map[string]interface{}, bool) {
	if o == nil || o.View == nil {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *Playbook) HasView() bool {
	if o != nil && o.View != nil {
		return true
	}

	return false
}

// SetView gets a reference to the given map[string]interface{} and assigns it to the View field.
func (o *Playbook) SetView(v map[string]interface{}) {
	o.View = &v
}

// GetXsoarHasReadOnlyRole returns the XsoarHasReadOnlyRole field value if set, zero value otherwise.
func (o *Playbook) GetXsoarHasReadOnlyRole() bool {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		var ret bool
		return ret
	}
	return *o.XsoarHasReadOnlyRole
}

// GetXsoarHasReadOnlyRoleOk returns a tuple with the XsoarHasReadOnlyRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetXsoarHasReadOnlyRoleOk() (*bool, bool) {
	if o == nil || o.XsoarHasReadOnlyRole == nil {
		return nil, false
	}
	return o.XsoarHasReadOnlyRole, true
}

// HasXsoarHasReadOnlyRole returns a boolean if a field has been set.
func (o *Playbook) HasXsoarHasReadOnlyRole() bool {
	if o != nil && o.XsoarHasReadOnlyRole != nil {
		return true
	}

	return false
}

// SetXsoarHasReadOnlyRole gets a reference to the given bool and assigns it to the XsoarHasReadOnlyRole field.
func (o *Playbook) SetXsoarHasReadOnlyRole(v bool) {
	o.XsoarHasReadOnlyRole = &v
}

// GetXsoarPreviousReadOnlyRoles returns the XsoarPreviousReadOnlyRoles field value if set, zero value otherwise.
func (o *Playbook) GetXsoarPreviousReadOnlyRoles() []string {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarPreviousReadOnlyRoles
}

// GetXsoarPreviousReadOnlyRolesOk returns a tuple with the XsoarPreviousReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetXsoarPreviousReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarPreviousReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarPreviousReadOnlyRoles, true
}

// HasXsoarPreviousReadOnlyRoles returns a boolean if a field has been set.
func (o *Playbook) HasXsoarPreviousReadOnlyRoles() bool {
	if o != nil && o.XsoarPreviousReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarPreviousReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarPreviousReadOnlyRoles field.
func (o *Playbook) SetXsoarPreviousReadOnlyRoles(v []string) {
	o.XsoarPreviousReadOnlyRoles = &v
}

// GetXsoarReadOnlyRoles returns the XsoarReadOnlyRoles field value if set, zero value otherwise.
func (o *Playbook) GetXsoarReadOnlyRoles() []string {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		var ret []string
		return ret
	}
	return *o.XsoarReadOnlyRoles
}

// GetXsoarReadOnlyRolesOk returns a tuple with the XsoarReadOnlyRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playbook) GetXsoarReadOnlyRolesOk() (*[]string, bool) {
	if o == nil || o.XsoarReadOnlyRoles == nil {
		return nil, false
	}
	return o.XsoarReadOnlyRoles, true
}

// HasXsoarReadOnlyRoles returns a boolean if a field has been set.
func (o *Playbook) HasXsoarReadOnlyRoles() bool {
	if o != nil && o.XsoarReadOnlyRoles != nil {
		return true
	}

	return false
}

// SetXsoarReadOnlyRoles gets a reference to the given []string and assigns it to the XsoarReadOnlyRoles field.
func (o *Playbook) SetXsoarReadOnlyRoles(v []string) {
	o.XsoarReadOnlyRoles = &v
}

func (o Playbook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllRead != nil {
		toSerialize["allRead"] = o.AllRead
	}
	if o.AllReadWrite != nil {
		toSerialize["allReadWrite"] = o.AllReadWrite
	}
	if o.Brands != nil {
		toSerialize["brands"] = o.Brands
	}
	if o.Commands != nil {
		toSerialize["commands"] = o.Commands
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.CommitMessage != nil {
		toSerialize["commitMessage"] = o.CommitMessage
	}
	if o.DbotCreatedBy != nil {
		toSerialize["dbotCreatedBy"] = o.DbotCreatedBy
	}
	if o.Deprecated != nil {
		toSerialize["deprecated"] = o.Deprecated
	}
	if o.Detached != nil {
		toSerialize["detached"] = o.Detached
	}
	if o.EncTasks != nil {
		toSerialize["encTasks"] = o.EncTasks
	}
	if o.FromServerVersion != nil {
		toSerialize["fromServerVersion"] = o.FromServerVersion
	}
	if o.HasRole != nil {
		toSerialize["hasRole"] = o.HasRole
	}
	if o.Hidden != nil {
		toSerialize["hidden"] = o.Hidden
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	if o.ItemVersion != nil {
		toSerialize["itemVersion"] = o.ItemVersion
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.MissingScriptsIds != nil {
		toSerialize["missingScriptsIds"] = o.MissingScriptsIds
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NameRaw != nil {
		toSerialize["nameRaw"] = o.NameRaw
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.Outputs != nil {
		toSerialize["outputs"] = o.Outputs
	}
	if o.PackID != nil {
		toSerialize["packID"] = o.PackID
	}
	if o.PackPropagationLabels != nil {
		toSerialize["packPropagationLabels"] = o.PackPropagationLabels
	}
	if o.PrevName != nil {
		toSerialize["prevName"] = o.PrevName
	}
	if o.PreviousAllRead != nil {
		toSerialize["previousAllRead"] = o.PreviousAllRead
	}
	if o.PreviousAllReadWrite != nil {
		toSerialize["previousAllReadWrite"] = o.PreviousAllReadWrite
	}
	if o.PreviousRoles != nil {
		toSerialize["previousRoles"] = o.PreviousRoles
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.Private != nil {
		toSerialize["private"] = o.Private
	}
	if o.PropagationLabels != nil {
		toSerialize["propagationLabels"] = o.PropagationLabels
	}
	if o.Quiet != nil {
		toSerialize["quiet"] = o.Quiet
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.ScriptIds != nil {
		toSerialize["scriptIds"] = o.ScriptIds
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.ShouldCommit != nil {
		toSerialize["shouldCommit"] = o.ShouldCommit
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.SourcePlaybookID != nil {
		toSerialize["sourcePlaybookID"] = o.SourcePlaybookID
	}
	if o.StartTaskId != nil {
		toSerialize["startTaskId"] = o.StartTaskId
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TaskIds != nil {
		toSerialize["taskIds"] = o.TaskIds
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	if o.ToServerVersion != nil {
		toSerialize["toServerVersion"] = o.ToServerVersion
	}
	if o.VcShouldIgnore != nil {
		toSerialize["vcShouldIgnore"] = o.VcShouldIgnore
	}
	if o.VcShouldKeepItemLegacyProdMachine != nil {
		toSerialize["vcShouldKeepItemLegacyProdMachine"] = o.VcShouldKeepItemLegacyProdMachine
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.View != nil {
		toSerialize["view"] = o.View
	}
	if o.XsoarHasReadOnlyRole != nil {
		toSerialize["xsoarHasReadOnlyRole"] = o.XsoarHasReadOnlyRole
	}
	if o.XsoarPreviousReadOnlyRoles != nil {
		toSerialize["xsoarPreviousReadOnlyRoles"] = o.XsoarPreviousReadOnlyRoles
	}
	if o.XsoarReadOnlyRoles != nil {
		toSerialize["xsoarReadOnlyRoles"] = o.XsoarReadOnlyRoles
	}
	return json.Marshal(toSerialize)
}

type NullablePlaybook struct {
	value *Playbook
	isSet bool
}

func (v NullablePlaybook) Get() *Playbook {
	return v.value
}

func (v *NullablePlaybook) Set(val *Playbook) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaybook) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaybook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaybook(val *Playbook) *NullablePlaybook {
	return &NullablePlaybook{value: val, isSet: true}
}

func (v NullablePlaybook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaybook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
