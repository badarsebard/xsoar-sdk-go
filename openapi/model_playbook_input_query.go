/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// PlaybookInputQuery PlaybookInputQuery represents the playbook query input
type PlaybookInputQuery struct {
	FromDate           *time.Time              `json:"fromDate,omitempty"`
	FromDateLicense    *time.Time              `json:"fromDateLicense,omitempty"`
	Period             *Period                 `json:"period,omitempty"`
	Query              *string                 `json:"query,omitempty"`
	QueryEntity        *string                 `json:"queryEntity,omitempty"`
	QueryState         *QueryState             `json:"queryState,omitempty"`
	Results            *map[string]interface{} `json:"results,omitempty"`
	RunFromLastJobTime *bool                   `json:"runFromLastJobTime,omitempty"`
	ToDate             *time.Time              `json:"toDate,omitempty"`
}

// NewPlaybookInputQuery instantiates a new PlaybookInputQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaybookInputQuery() *PlaybookInputQuery {
	this := PlaybookInputQuery{}
	return &this
}

// NewPlaybookInputQueryWithDefaults instantiates a new PlaybookInputQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaybookInputQueryWithDefaults() *PlaybookInputQuery {
	this := PlaybookInputQuery{}
	return &this
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *PlaybookInputQuery) GetFromDate() time.Time {
	if o == nil || o.FromDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookInputQuery) GetFromDateOk() (*time.Time, bool) {
	if o == nil || o.FromDate == nil {
		return nil, false
	}
	return o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *PlaybookInputQuery) HasFromDate() bool {
	if o != nil && o.FromDate != nil {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given time.Time and assigns it to the FromDate field.
func (o *PlaybookInputQuery) SetFromDate(v time.Time) {
	o.FromDate = &v
}

// GetFromDateLicense returns the FromDateLicense field value if set, zero value otherwise.
func (o *PlaybookInputQuery) GetFromDateLicense() time.Time {
	if o == nil || o.FromDateLicense == nil {
		var ret time.Time
		return ret
	}
	return *o.FromDateLicense
}

// GetFromDateLicenseOk returns a tuple with the FromDateLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookInputQuery) GetFromDateLicenseOk() (*time.Time, bool) {
	if o == nil || o.FromDateLicense == nil {
		return nil, false
	}
	return o.FromDateLicense, true
}

// HasFromDateLicense returns a boolean if a field has been set.
func (o *PlaybookInputQuery) HasFromDateLicense() bool {
	if o != nil && o.FromDateLicense != nil {
		return true
	}

	return false
}

// SetFromDateLicense gets a reference to the given time.Time and assigns it to the FromDateLicense field.
func (o *PlaybookInputQuery) SetFromDateLicense(v time.Time) {
	o.FromDateLicense = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *PlaybookInputQuery) GetPeriod() Period {
	if o == nil || o.Period == nil {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookInputQuery) GetPeriodOk() (*Period, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *PlaybookInputQuery) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *PlaybookInputQuery) SetPeriod(v Period) {
	o.Period = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *PlaybookInputQuery) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookInputQuery) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *PlaybookInputQuery) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *PlaybookInputQuery) SetQuery(v string) {
	o.Query = &v
}

// GetQueryEntity returns the QueryEntity field value if set, zero value otherwise.
func (o *PlaybookInputQuery) GetQueryEntity() string {
	if o == nil || o.QueryEntity == nil {
		var ret string
		return ret
	}
	return *o.QueryEntity
}

// GetQueryEntityOk returns a tuple with the QueryEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookInputQuery) GetQueryEntityOk() (*string, bool) {
	if o == nil || o.QueryEntity == nil {
		return nil, false
	}
	return o.QueryEntity, true
}

// HasQueryEntity returns a boolean if a field has been set.
func (o *PlaybookInputQuery) HasQueryEntity() bool {
	if o != nil && o.QueryEntity != nil {
		return true
	}

	return false
}

// SetQueryEntity gets a reference to the given string and assigns it to the QueryEntity field.
func (o *PlaybookInputQuery) SetQueryEntity(v string) {
	o.QueryEntity = &v
}

// GetQueryState returns the QueryState field value if set, zero value otherwise.
func (o *PlaybookInputQuery) GetQueryState() QueryState {
	if o == nil || o.QueryState == nil {
		var ret QueryState
		return ret
	}
	return *o.QueryState
}

// GetQueryStateOk returns a tuple with the QueryState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookInputQuery) GetQueryStateOk() (*QueryState, bool) {
	if o == nil || o.QueryState == nil {
		return nil, false
	}
	return o.QueryState, true
}

// HasQueryState returns a boolean if a field has been set.
func (o *PlaybookInputQuery) HasQueryState() bool {
	if o != nil && o.QueryState != nil {
		return true
	}

	return false
}

// SetQueryState gets a reference to the given QueryState and assigns it to the QueryState field.
func (o *PlaybookInputQuery) SetQueryState(v QueryState) {
	o.QueryState = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *PlaybookInputQuery) GetResults() map[string]interface{} {
	if o == nil || o.Results == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookInputQuery) GetResultsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *PlaybookInputQuery) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given map[string]interface{} and assigns it to the Results field.
func (o *PlaybookInputQuery) SetResults(v map[string]interface{}) {
	o.Results = &v
}

// GetRunFromLastJobTime returns the RunFromLastJobTime field value if set, zero value otherwise.
func (o *PlaybookInputQuery) GetRunFromLastJobTime() bool {
	if o == nil || o.RunFromLastJobTime == nil {
		var ret bool
		return ret
	}
	return *o.RunFromLastJobTime
}

// GetRunFromLastJobTimeOk returns a tuple with the RunFromLastJobTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookInputQuery) GetRunFromLastJobTimeOk() (*bool, bool) {
	if o == nil || o.RunFromLastJobTime == nil {
		return nil, false
	}
	return o.RunFromLastJobTime, true
}

// HasRunFromLastJobTime returns a boolean if a field has been set.
func (o *PlaybookInputQuery) HasRunFromLastJobTime() bool {
	if o != nil && o.RunFromLastJobTime != nil {
		return true
	}

	return false
}

// SetRunFromLastJobTime gets a reference to the given bool and assigns it to the RunFromLastJobTime field.
func (o *PlaybookInputQuery) SetRunFromLastJobTime(v bool) {
	o.RunFromLastJobTime = &v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *PlaybookInputQuery) GetToDate() time.Time {
	if o == nil || o.ToDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookInputQuery) GetToDateOk() (*time.Time, bool) {
	if o == nil || o.ToDate == nil {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *PlaybookInputQuery) HasToDate() bool {
	if o != nil && o.ToDate != nil {
		return true
	}

	return false
}

// SetToDate gets a reference to the given time.Time and assigns it to the ToDate field.
func (o *PlaybookInputQuery) SetToDate(v time.Time) {
	o.ToDate = &v
}

func (o PlaybookInputQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FromDate != nil {
		toSerialize["fromDate"] = o.FromDate
	}
	if o.FromDateLicense != nil {
		toSerialize["fromDateLicense"] = o.FromDateLicense
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.QueryEntity != nil {
		toSerialize["queryEntity"] = o.QueryEntity
	}
	if o.QueryState != nil {
		toSerialize["queryState"] = o.QueryState
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	if o.RunFromLastJobTime != nil {
		toSerialize["runFromLastJobTime"] = o.RunFromLastJobTime
	}
	if o.ToDate != nil {
		toSerialize["toDate"] = o.ToDate
	}
	return json.Marshal(toSerialize)
}

type NullablePlaybookInputQuery struct {
	value *PlaybookInputQuery
	isSet bool
}

func (v NullablePlaybookInputQuery) Get() *PlaybookInputQuery {
	return v.value
}

func (v *NullablePlaybookInputQuery) Set(val *PlaybookInputQuery) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaybookInputQuery) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaybookInputQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaybookInputQuery(val *PlaybookInputQuery) *NullablePlaybookInputQuery {
	return &NullablePlaybookInputQuery{value: val, isSet: true}
}

func (v NullablePlaybookInputQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaybookInputQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
