/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlaybookTask struct for PlaybookTask
type PlaybookTask struct {
	// Conditions - optional list of conditions to run when task is conditional. we check conditions by their order (e.i. - considering the first one that satisfied)
	Conditions             *[]TaskCondition    `json:"conditions,omitempty"`
	ContinueOnError        *bool               `json:"continueOnError,omitempty"`
	DefaultAssignee        *string             `json:"defaultAssignee,omitempty"`
	DefaultAssigneeComplex *AdvanceArg         `json:"defaultAssigneeComplex,omitempty"`
	DefaultReminder        *int64              `json:"defaultReminder,omitempty"`
	EvidenceData           *EvidenceData       `json:"evidenceData,omitempty"`
	FieldMapping           *[]FieldMapping     `json:"fieldMapping,omitempty"`
	Form                   *DataCollectionForm `json:"form,omitempty"`
	FormDisplay            *FormDisplay        `json:"formDisplay,omitempty"`
	Id                     *string             `json:"id,omitempty"`
	// Do not run this task in a worker
	IgnoreWorker              *bool                `json:"ignoreWorker,omitempty"`
	IsAutoSwitchedToQuietMode *bool                `json:"isAutoSwitchedToQuietMode,omitempty"`
	IsOverSize                *bool                `json:"isOverSize,omitempty"`
	Loop                      *TaskLoop            `json:"loop,omitempty"`
	Message                   *NotifiableItem      `json:"message,omitempty"`
	NextTasks                 *map[string][]string `json:"nextTasks,omitempty"`
	Note                      *bool                `json:"note,omitempty"`
	// QuietMode quiet mode for playbook task
	QuietMode            *int64                 `json:"quietMode,omitempty"`
	ReputationCalc       *float64               `json:"reputationCalc,omitempty"`
	RestrictedCompletion *bool                  `json:"restrictedCompletion,omitempty"`
	ScriptArguments      *map[string]AdvanceArg `json:"scriptArguments,omitempty"`
	SeparateContext      *bool                  `json:"separateContext,omitempty"`
	// SkipUnavailable if true then will check if automation exists, integration of that command is installed and active or sub playbook exists in Demisto
	SkipUnavailable *bool   `json:"skipUnavailable,omitempty"`
	Sla             *SLA    `json:"sla,omitempty"`
	SlaReminder     *SLA    `json:"slaReminder,omitempty"`
	Task            *Task   `json:"task,omitempty"`
	TaskId          *string `json:"taskId,omitempty"`
	// SLA fields
	TimerTriggers *[]TimerTrigger `json:"timerTriggers,omitempty"`
	// TaskType is the Task in the playbook context as a node
	Type *string `json:"type,omitempty"`
	// TaskView represents the view in client of the tasks graph
	View *map[string]interface{} `json:"view,omitempty"`
}

// NewPlaybookTask instantiates a new PlaybookTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaybookTask() *PlaybookTask {
	this := PlaybookTask{}
	return &this
}

// NewPlaybookTaskWithDefaults instantiates a new PlaybookTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaybookTaskWithDefaults() *PlaybookTask {
	this := PlaybookTask{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *PlaybookTask) GetConditions() []TaskCondition {
	if o == nil || o.Conditions == nil {
		var ret []TaskCondition
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetConditionsOk() (*[]TaskCondition, bool) {
	if o == nil || o.Conditions == nil {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *PlaybookTask) HasConditions() bool {
	if o != nil && o.Conditions != nil {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []TaskCondition and assigns it to the Conditions field.
func (o *PlaybookTask) SetConditions(v []TaskCondition) {
	o.Conditions = &v
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise.
func (o *PlaybookTask) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil || o.ContinueOnError == nil {
		return nil, false
	}
	return o.ContinueOnError, true
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *PlaybookTask) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError != nil {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given bool and assigns it to the ContinueOnError field.
func (o *PlaybookTask) SetContinueOnError(v bool) {
	o.ContinueOnError = &v
}

// GetDefaultAssignee returns the DefaultAssignee field value if set, zero value otherwise.
func (o *PlaybookTask) GetDefaultAssignee() string {
	if o == nil || o.DefaultAssignee == nil {
		var ret string
		return ret
	}
	return *o.DefaultAssignee
}

// GetDefaultAssigneeOk returns a tuple with the DefaultAssignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetDefaultAssigneeOk() (*string, bool) {
	if o == nil || o.DefaultAssignee == nil {
		return nil, false
	}
	return o.DefaultAssignee, true
}

// HasDefaultAssignee returns a boolean if a field has been set.
func (o *PlaybookTask) HasDefaultAssignee() bool {
	if o != nil && o.DefaultAssignee != nil {
		return true
	}

	return false
}

// SetDefaultAssignee gets a reference to the given string and assigns it to the DefaultAssignee field.
func (o *PlaybookTask) SetDefaultAssignee(v string) {
	o.DefaultAssignee = &v
}

// GetDefaultAssigneeComplex returns the DefaultAssigneeComplex field value if set, zero value otherwise.
func (o *PlaybookTask) GetDefaultAssigneeComplex() AdvanceArg {
	if o == nil || o.DefaultAssigneeComplex == nil {
		var ret AdvanceArg
		return ret
	}
	return *o.DefaultAssigneeComplex
}

// GetDefaultAssigneeComplexOk returns a tuple with the DefaultAssigneeComplex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetDefaultAssigneeComplexOk() (*AdvanceArg, bool) {
	if o == nil || o.DefaultAssigneeComplex == nil {
		return nil, false
	}
	return o.DefaultAssigneeComplex, true
}

// HasDefaultAssigneeComplex returns a boolean if a field has been set.
func (o *PlaybookTask) HasDefaultAssigneeComplex() bool {
	if o != nil && o.DefaultAssigneeComplex != nil {
		return true
	}

	return false
}

// SetDefaultAssigneeComplex gets a reference to the given AdvanceArg and assigns it to the DefaultAssigneeComplex field.
func (o *PlaybookTask) SetDefaultAssigneeComplex(v AdvanceArg) {
	o.DefaultAssigneeComplex = &v
}

// GetDefaultReminder returns the DefaultReminder field value if set, zero value otherwise.
func (o *PlaybookTask) GetDefaultReminder() int64 {
	if o == nil || o.DefaultReminder == nil {
		var ret int64
		return ret
	}
	return *o.DefaultReminder
}

// GetDefaultReminderOk returns a tuple with the DefaultReminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetDefaultReminderOk() (*int64, bool) {
	if o == nil || o.DefaultReminder == nil {
		return nil, false
	}
	return o.DefaultReminder, true
}

// HasDefaultReminder returns a boolean if a field has been set.
func (o *PlaybookTask) HasDefaultReminder() bool {
	if o != nil && o.DefaultReminder != nil {
		return true
	}

	return false
}

// SetDefaultReminder gets a reference to the given int64 and assigns it to the DefaultReminder field.
func (o *PlaybookTask) SetDefaultReminder(v int64) {
	o.DefaultReminder = &v
}

// GetEvidenceData returns the EvidenceData field value if set, zero value otherwise.
func (o *PlaybookTask) GetEvidenceData() EvidenceData {
	if o == nil || o.EvidenceData == nil {
		var ret EvidenceData
		return ret
	}
	return *o.EvidenceData
}

// GetEvidenceDataOk returns a tuple with the EvidenceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetEvidenceDataOk() (*EvidenceData, bool) {
	if o == nil || o.EvidenceData == nil {
		return nil, false
	}
	return o.EvidenceData, true
}

// HasEvidenceData returns a boolean if a field has been set.
func (o *PlaybookTask) HasEvidenceData() bool {
	if o != nil && o.EvidenceData != nil {
		return true
	}

	return false
}

// SetEvidenceData gets a reference to the given EvidenceData and assigns it to the EvidenceData field.
func (o *PlaybookTask) SetEvidenceData(v EvidenceData) {
	o.EvidenceData = &v
}

// GetFieldMapping returns the FieldMapping field value if set, zero value otherwise.
func (o *PlaybookTask) GetFieldMapping() []FieldMapping {
	if o == nil || o.FieldMapping == nil {
		var ret []FieldMapping
		return ret
	}
	return *o.FieldMapping
}

// GetFieldMappingOk returns a tuple with the FieldMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetFieldMappingOk() (*[]FieldMapping, bool) {
	if o == nil || o.FieldMapping == nil {
		return nil, false
	}
	return o.FieldMapping, true
}

// HasFieldMapping returns a boolean if a field has been set.
func (o *PlaybookTask) HasFieldMapping() bool {
	if o != nil && o.FieldMapping != nil {
		return true
	}

	return false
}

// SetFieldMapping gets a reference to the given []FieldMapping and assigns it to the FieldMapping field.
func (o *PlaybookTask) SetFieldMapping(v []FieldMapping) {
	o.FieldMapping = &v
}

// GetForm returns the Form field value if set, zero value otherwise.
func (o *PlaybookTask) GetForm() DataCollectionForm {
	if o == nil || o.Form == nil {
		var ret DataCollectionForm
		return ret
	}
	return *o.Form
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetFormOk() (*DataCollectionForm, bool) {
	if o == nil || o.Form == nil {
		return nil, false
	}
	return o.Form, true
}

// HasForm returns a boolean if a field has been set.
func (o *PlaybookTask) HasForm() bool {
	if o != nil && o.Form != nil {
		return true
	}

	return false
}

// SetForm gets a reference to the given DataCollectionForm and assigns it to the Form field.
func (o *PlaybookTask) SetForm(v DataCollectionForm) {
	o.Form = &v
}

// GetFormDisplay returns the FormDisplay field value if set, zero value otherwise.
func (o *PlaybookTask) GetFormDisplay() FormDisplay {
	if o == nil || o.FormDisplay == nil {
		var ret FormDisplay
		return ret
	}
	return *o.FormDisplay
}

// GetFormDisplayOk returns a tuple with the FormDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetFormDisplayOk() (*FormDisplay, bool) {
	if o == nil || o.FormDisplay == nil {
		return nil, false
	}
	return o.FormDisplay, true
}

// HasFormDisplay returns a boolean if a field has been set.
func (o *PlaybookTask) HasFormDisplay() bool {
	if o != nil && o.FormDisplay != nil {
		return true
	}

	return false
}

// SetFormDisplay gets a reference to the given FormDisplay and assigns it to the FormDisplay field.
func (o *PlaybookTask) SetFormDisplay(v FormDisplay) {
	o.FormDisplay = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlaybookTask) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlaybookTask) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PlaybookTask) SetId(v string) {
	o.Id = &v
}

// GetIgnoreWorker returns the IgnoreWorker field value if set, zero value otherwise.
func (o *PlaybookTask) GetIgnoreWorker() bool {
	if o == nil || o.IgnoreWorker == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreWorker
}

// GetIgnoreWorkerOk returns a tuple with the IgnoreWorker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetIgnoreWorkerOk() (*bool, bool) {
	if o == nil || o.IgnoreWorker == nil {
		return nil, false
	}
	return o.IgnoreWorker, true
}

// HasIgnoreWorker returns a boolean if a field has been set.
func (o *PlaybookTask) HasIgnoreWorker() bool {
	if o != nil && o.IgnoreWorker != nil {
		return true
	}

	return false
}

// SetIgnoreWorker gets a reference to the given bool and assigns it to the IgnoreWorker field.
func (o *PlaybookTask) SetIgnoreWorker(v bool) {
	o.IgnoreWorker = &v
}

// GetIsAutoSwitchedToQuietMode returns the IsAutoSwitchedToQuietMode field value if set, zero value otherwise.
func (o *PlaybookTask) GetIsAutoSwitchedToQuietMode() bool {
	if o == nil || o.IsAutoSwitchedToQuietMode == nil {
		var ret bool
		return ret
	}
	return *o.IsAutoSwitchedToQuietMode
}

// GetIsAutoSwitchedToQuietModeOk returns a tuple with the IsAutoSwitchedToQuietMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetIsAutoSwitchedToQuietModeOk() (*bool, bool) {
	if o == nil || o.IsAutoSwitchedToQuietMode == nil {
		return nil, false
	}
	return o.IsAutoSwitchedToQuietMode, true
}

// HasIsAutoSwitchedToQuietMode returns a boolean if a field has been set.
func (o *PlaybookTask) HasIsAutoSwitchedToQuietMode() bool {
	if o != nil && o.IsAutoSwitchedToQuietMode != nil {
		return true
	}

	return false
}

// SetIsAutoSwitchedToQuietMode gets a reference to the given bool and assigns it to the IsAutoSwitchedToQuietMode field.
func (o *PlaybookTask) SetIsAutoSwitchedToQuietMode(v bool) {
	o.IsAutoSwitchedToQuietMode = &v
}

// GetIsOverSize returns the IsOverSize field value if set, zero value otherwise.
func (o *PlaybookTask) GetIsOverSize() bool {
	if o == nil || o.IsOverSize == nil {
		var ret bool
		return ret
	}
	return *o.IsOverSize
}

// GetIsOverSizeOk returns a tuple with the IsOverSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetIsOverSizeOk() (*bool, bool) {
	if o == nil || o.IsOverSize == nil {
		return nil, false
	}
	return o.IsOverSize, true
}

// HasIsOverSize returns a boolean if a field has been set.
func (o *PlaybookTask) HasIsOverSize() bool {
	if o != nil && o.IsOverSize != nil {
		return true
	}

	return false
}

// SetIsOverSize gets a reference to the given bool and assigns it to the IsOverSize field.
func (o *PlaybookTask) SetIsOverSize(v bool) {
	o.IsOverSize = &v
}

// GetLoop returns the Loop field value if set, zero value otherwise.
func (o *PlaybookTask) GetLoop() TaskLoop {
	if o == nil || o.Loop == nil {
		var ret TaskLoop
		return ret
	}
	return *o.Loop
}

// GetLoopOk returns a tuple with the Loop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetLoopOk() (*TaskLoop, bool) {
	if o == nil || o.Loop == nil {
		return nil, false
	}
	return o.Loop, true
}

// HasLoop returns a boolean if a field has been set.
func (o *PlaybookTask) HasLoop() bool {
	if o != nil && o.Loop != nil {
		return true
	}

	return false
}

// SetLoop gets a reference to the given TaskLoop and assigns it to the Loop field.
func (o *PlaybookTask) SetLoop(v TaskLoop) {
	o.Loop = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PlaybookTask) GetMessage() NotifiableItem {
	if o == nil || o.Message == nil {
		var ret NotifiableItem
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetMessageOk() (*NotifiableItem, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PlaybookTask) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NotifiableItem and assigns it to the Message field.
func (o *PlaybookTask) SetMessage(v NotifiableItem) {
	o.Message = &v
}

// GetNextTasks returns the NextTasks field value if set, zero value otherwise.
func (o *PlaybookTask) GetNextTasks() map[string][]string {
	if o == nil || o.NextTasks == nil {
		var ret map[string][]string
		return ret
	}
	return *o.NextTasks
}

// GetNextTasksOk returns a tuple with the NextTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetNextTasksOk() (*map[string][]string, bool) {
	if o == nil || o.NextTasks == nil {
		return nil, false
	}
	return o.NextTasks, true
}

// HasNextTasks returns a boolean if a field has been set.
func (o *PlaybookTask) HasNextTasks() bool {
	if o != nil && o.NextTasks != nil {
		return true
	}

	return false
}

// SetNextTasks gets a reference to the given map[string][]string and assigns it to the NextTasks field.
func (o *PlaybookTask) SetNextTasks(v map[string][]string) {
	o.NextTasks = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *PlaybookTask) GetNote() bool {
	if o == nil || o.Note == nil {
		var ret bool
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetNoteOk() (*bool, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *PlaybookTask) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given bool and assigns it to the Note field.
func (o *PlaybookTask) SetNote(v bool) {
	o.Note = &v
}

// GetQuietMode returns the QuietMode field value if set, zero value otherwise.
func (o *PlaybookTask) GetQuietMode() int64 {
	if o == nil || o.QuietMode == nil {
		var ret int64
		return ret
	}
	return *o.QuietMode
}

// GetQuietModeOk returns a tuple with the QuietMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetQuietModeOk() (*int64, bool) {
	if o == nil || o.QuietMode == nil {
		return nil, false
	}
	return o.QuietMode, true
}

// HasQuietMode returns a boolean if a field has been set.
func (o *PlaybookTask) HasQuietMode() bool {
	if o != nil && o.QuietMode != nil {
		return true
	}

	return false
}

// SetQuietMode gets a reference to the given int64 and assigns it to the QuietMode field.
func (o *PlaybookTask) SetQuietMode(v int64) {
	o.QuietMode = &v
}

// GetReputationCalc returns the ReputationCalc field value if set, zero value otherwise.
func (o *PlaybookTask) GetReputationCalc() float64 {
	if o == nil || o.ReputationCalc == nil {
		var ret float64
		return ret
	}
	return *o.ReputationCalc
}

// GetReputationCalcOk returns a tuple with the ReputationCalc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetReputationCalcOk() (*float64, bool) {
	if o == nil || o.ReputationCalc == nil {
		return nil, false
	}
	return o.ReputationCalc, true
}

// HasReputationCalc returns a boolean if a field has been set.
func (o *PlaybookTask) HasReputationCalc() bool {
	if o != nil && o.ReputationCalc != nil {
		return true
	}

	return false
}

// SetReputationCalc gets a reference to the given float64 and assigns it to the ReputationCalc field.
func (o *PlaybookTask) SetReputationCalc(v float64) {
	o.ReputationCalc = &v
}

// GetRestrictedCompletion returns the RestrictedCompletion field value if set, zero value otherwise.
func (o *PlaybookTask) GetRestrictedCompletion() bool {
	if o == nil || o.RestrictedCompletion == nil {
		var ret bool
		return ret
	}
	return *o.RestrictedCompletion
}

// GetRestrictedCompletionOk returns a tuple with the RestrictedCompletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetRestrictedCompletionOk() (*bool, bool) {
	if o == nil || o.RestrictedCompletion == nil {
		return nil, false
	}
	return o.RestrictedCompletion, true
}

// HasRestrictedCompletion returns a boolean if a field has been set.
func (o *PlaybookTask) HasRestrictedCompletion() bool {
	if o != nil && o.RestrictedCompletion != nil {
		return true
	}

	return false
}

// SetRestrictedCompletion gets a reference to the given bool and assigns it to the RestrictedCompletion field.
func (o *PlaybookTask) SetRestrictedCompletion(v bool) {
	o.RestrictedCompletion = &v
}

// GetScriptArguments returns the ScriptArguments field value if set, zero value otherwise.
func (o *PlaybookTask) GetScriptArguments() map[string]AdvanceArg {
	if o == nil || o.ScriptArguments == nil {
		var ret map[string]AdvanceArg
		return ret
	}
	return *o.ScriptArguments
}

// GetScriptArgumentsOk returns a tuple with the ScriptArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetScriptArgumentsOk() (*map[string]AdvanceArg, bool) {
	if o == nil || o.ScriptArguments == nil {
		return nil, false
	}
	return o.ScriptArguments, true
}

// HasScriptArguments returns a boolean if a field has been set.
func (o *PlaybookTask) HasScriptArguments() bool {
	if o != nil && o.ScriptArguments != nil {
		return true
	}

	return false
}

// SetScriptArguments gets a reference to the given map[string]AdvanceArg and assigns it to the ScriptArguments field.
func (o *PlaybookTask) SetScriptArguments(v map[string]AdvanceArg) {
	o.ScriptArguments = &v
}

// GetSeparateContext returns the SeparateContext field value if set, zero value otherwise.
func (o *PlaybookTask) GetSeparateContext() bool {
	if o == nil || o.SeparateContext == nil {
		var ret bool
		return ret
	}
	return *o.SeparateContext
}

// GetSeparateContextOk returns a tuple with the SeparateContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetSeparateContextOk() (*bool, bool) {
	if o == nil || o.SeparateContext == nil {
		return nil, false
	}
	return o.SeparateContext, true
}

// HasSeparateContext returns a boolean if a field has been set.
func (o *PlaybookTask) HasSeparateContext() bool {
	if o != nil && o.SeparateContext != nil {
		return true
	}

	return false
}

// SetSeparateContext gets a reference to the given bool and assigns it to the SeparateContext field.
func (o *PlaybookTask) SetSeparateContext(v bool) {
	o.SeparateContext = &v
}

// GetSkipUnavailable returns the SkipUnavailable field value if set, zero value otherwise.
func (o *PlaybookTask) GetSkipUnavailable() bool {
	if o == nil || o.SkipUnavailable == nil {
		var ret bool
		return ret
	}
	return *o.SkipUnavailable
}

// GetSkipUnavailableOk returns a tuple with the SkipUnavailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetSkipUnavailableOk() (*bool, bool) {
	if o == nil || o.SkipUnavailable == nil {
		return nil, false
	}
	return o.SkipUnavailable, true
}

// HasSkipUnavailable returns a boolean if a field has been set.
func (o *PlaybookTask) HasSkipUnavailable() bool {
	if o != nil && o.SkipUnavailable != nil {
		return true
	}

	return false
}

// SetSkipUnavailable gets a reference to the given bool and assigns it to the SkipUnavailable field.
func (o *PlaybookTask) SetSkipUnavailable(v bool) {
	o.SkipUnavailable = &v
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *PlaybookTask) GetSla() SLA {
	if o == nil || o.Sla == nil {
		var ret SLA
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetSlaOk() (*SLA, bool) {
	if o == nil || o.Sla == nil {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *PlaybookTask) HasSla() bool {
	if o != nil && o.Sla != nil {
		return true
	}

	return false
}

// SetSla gets a reference to the given SLA and assigns it to the Sla field.
func (o *PlaybookTask) SetSla(v SLA) {
	o.Sla = &v
}

// GetSlaReminder returns the SlaReminder field value if set, zero value otherwise.
func (o *PlaybookTask) GetSlaReminder() SLA {
	if o == nil || o.SlaReminder == nil {
		var ret SLA
		return ret
	}
	return *o.SlaReminder
}

// GetSlaReminderOk returns a tuple with the SlaReminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetSlaReminderOk() (*SLA, bool) {
	if o == nil || o.SlaReminder == nil {
		return nil, false
	}
	return o.SlaReminder, true
}

// HasSlaReminder returns a boolean if a field has been set.
func (o *PlaybookTask) HasSlaReminder() bool {
	if o != nil && o.SlaReminder != nil {
		return true
	}

	return false
}

// SetSlaReminder gets a reference to the given SLA and assigns it to the SlaReminder field.
func (o *PlaybookTask) SetSlaReminder(v SLA) {
	o.SlaReminder = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *PlaybookTask) GetTask() Task {
	if o == nil || o.Task == nil {
		var ret Task
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetTaskOk() (*Task, bool) {
	if o == nil || o.Task == nil {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *PlaybookTask) HasTask() bool {
	if o != nil && o.Task != nil {
		return true
	}

	return false
}

// SetTask gets a reference to the given Task and assigns it to the Task field.
func (o *PlaybookTask) SetTask(v Task) {
	o.Task = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *PlaybookTask) GetTaskId() string {
	if o == nil || o.TaskId == nil {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetTaskIdOk() (*string, bool) {
	if o == nil || o.TaskId == nil {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *PlaybookTask) HasTaskId() bool {
	if o != nil && o.TaskId != nil {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *PlaybookTask) SetTaskId(v string) {
	o.TaskId = &v
}

// GetTimerTriggers returns the TimerTriggers field value if set, zero value otherwise.
func (o *PlaybookTask) GetTimerTriggers() []TimerTrigger {
	if o == nil || o.TimerTriggers == nil {
		var ret []TimerTrigger
		return ret
	}
	return *o.TimerTriggers
}

// GetTimerTriggersOk returns a tuple with the TimerTriggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetTimerTriggersOk() (*[]TimerTrigger, bool) {
	if o == nil || o.TimerTriggers == nil {
		return nil, false
	}
	return o.TimerTriggers, true
}

// HasTimerTriggers returns a boolean if a field has been set.
func (o *PlaybookTask) HasTimerTriggers() bool {
	if o != nil && o.TimerTriggers != nil {
		return true
	}

	return false
}

// SetTimerTriggers gets a reference to the given []TimerTrigger and assigns it to the TimerTriggers field.
func (o *PlaybookTask) SetTimerTriggers(v []TimerTrigger) {
	o.TimerTriggers = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PlaybookTask) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PlaybookTask) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PlaybookTask) SetType(v string) {
	o.Type = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *PlaybookTask) GetView() map[string]interface{} {
	if o == nil || o.View == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaybookTask) GetViewOk() (*map[string]interface{}, bool) {
	if o == nil || o.View == nil {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *PlaybookTask) HasView() bool {
	if o != nil && o.View != nil {
		return true
	}

	return false
}

// SetView gets a reference to the given map[string]interface{} and assigns it to the View field.
func (o *PlaybookTask) SetView(v map[string]interface{}) {
	o.View = &v
}

func (o PlaybookTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	if o.ContinueOnError != nil {
		toSerialize["continueOnError"] = o.ContinueOnError
	}
	if o.DefaultAssignee != nil {
		toSerialize["defaultAssignee"] = o.DefaultAssignee
	}
	if o.DefaultAssigneeComplex != nil {
		toSerialize["defaultAssigneeComplex"] = o.DefaultAssigneeComplex
	}
	if o.DefaultReminder != nil {
		toSerialize["defaultReminder"] = o.DefaultReminder
	}
	if o.EvidenceData != nil {
		toSerialize["evidenceData"] = o.EvidenceData
	}
	if o.FieldMapping != nil {
		toSerialize["fieldMapping"] = o.FieldMapping
	}
	if o.Form != nil {
		toSerialize["form"] = o.Form
	}
	if o.FormDisplay != nil {
		toSerialize["formDisplay"] = o.FormDisplay
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IgnoreWorker != nil {
		toSerialize["ignoreWorker"] = o.IgnoreWorker
	}
	if o.IsAutoSwitchedToQuietMode != nil {
		toSerialize["isAutoSwitchedToQuietMode"] = o.IsAutoSwitchedToQuietMode
	}
	if o.IsOverSize != nil {
		toSerialize["isOverSize"] = o.IsOverSize
	}
	if o.Loop != nil {
		toSerialize["loop"] = o.Loop
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.NextTasks != nil {
		toSerialize["nextTasks"] = o.NextTasks
	}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if o.QuietMode != nil {
		toSerialize["quietMode"] = o.QuietMode
	}
	if o.ReputationCalc != nil {
		toSerialize["reputationCalc"] = o.ReputationCalc
	}
	if o.RestrictedCompletion != nil {
		toSerialize["restrictedCompletion"] = o.RestrictedCompletion
	}
	if o.ScriptArguments != nil {
		toSerialize["scriptArguments"] = o.ScriptArguments
	}
	if o.SeparateContext != nil {
		toSerialize["separateContext"] = o.SeparateContext
	}
	if o.SkipUnavailable != nil {
		toSerialize["skipUnavailable"] = o.SkipUnavailable
	}
	if o.Sla != nil {
		toSerialize["sla"] = o.Sla
	}
	if o.SlaReminder != nil {
		toSerialize["slaReminder"] = o.SlaReminder
	}
	if o.Task != nil {
		toSerialize["task"] = o.Task
	}
	if o.TaskId != nil {
		toSerialize["taskId"] = o.TaskId
	}
	if o.TimerTriggers != nil {
		toSerialize["timerTriggers"] = o.TimerTriggers
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.View != nil {
		toSerialize["view"] = o.View
	}
	return json.Marshal(toSerialize)
}

type NullablePlaybookTask struct {
	value *PlaybookTask
	isSet bool
}

func (v NullablePlaybookTask) Get() *PlaybookTask {
	return v.value
}

func (v *NullablePlaybookTask) Set(val *PlaybookTask) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaybookTask) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaybookTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaybookTask(val *PlaybookTask) *NullablePlaybookTask {
	return &NullablePlaybookTask{value: val, isSet: true}
}

func (v NullablePlaybookTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaybookTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
