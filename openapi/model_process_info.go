/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ProcessInfo ProcessInfo - holds info per worker
type ProcessInfo struct {
	Details *string `json:"Details,omitempty"`
	// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
	Duration     *int64     `json:"Duration,omitempty"`
	HighPriority *bool      `json:"HighPriority,omitempty"`
	StartedAt    *time.Time `json:"StartedAt,omitempty"`
}

// NewProcessInfo instantiates a new ProcessInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessInfo() *ProcessInfo {
	this := ProcessInfo{}
	return &this
}

// NewProcessInfoWithDefaults instantiates a new ProcessInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessInfoWithDefaults() *ProcessInfo {
	this := ProcessInfo{}
	return &this
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ProcessInfo) GetDetails() string {
	if o == nil || o.Details == nil {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetDetailsOk() (*string, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ProcessInfo) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *ProcessInfo) SetDetails(v string) {
	o.Details = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ProcessInfo) GetDuration() int64 {
	if o == nil || o.Duration == nil {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetDurationOk() (*int64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ProcessInfo) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *ProcessInfo) SetDuration(v int64) {
	o.Duration = &v
}

// GetHighPriority returns the HighPriority field value if set, zero value otherwise.
func (o *ProcessInfo) GetHighPriority() bool {
	if o == nil || o.HighPriority == nil {
		var ret bool
		return ret
	}
	return *o.HighPriority
}

// GetHighPriorityOk returns a tuple with the HighPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetHighPriorityOk() (*bool, bool) {
	if o == nil || o.HighPriority == nil {
		return nil, false
	}
	return o.HighPriority, true
}

// HasHighPriority returns a boolean if a field has been set.
func (o *ProcessInfo) HasHighPriority() bool {
	if o != nil && o.HighPriority != nil {
		return true
	}

	return false
}

// SetHighPriority gets a reference to the given bool and assigns it to the HighPriority field.
func (o *ProcessInfo) SetHighPriority(v bool) {
	o.HighPriority = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *ProcessInfo) GetStartedAt() time.Time {
	if o == nil || o.StartedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInfo) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || o.StartedAt == nil {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *ProcessInfo) HasStartedAt() bool {
	if o != nil && o.StartedAt != nil {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *ProcessInfo) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

func (o ProcessInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Details != nil {
		toSerialize["Details"] = o.Details
	}
	if o.Duration != nil {
		toSerialize["Duration"] = o.Duration
	}
	if o.HighPriority != nil {
		toSerialize["HighPriority"] = o.HighPriority
	}
	if o.StartedAt != nil {
		toSerialize["StartedAt"] = o.StartedAt
	}
	return json.Marshal(toSerialize)
}

type NullableProcessInfo struct {
	value *ProcessInfo
	isSet bool
}

func (v NullableProcessInfo) Get() *ProcessInfo {
	return v.value
}

func (v *NullableProcessInfo) Set(val *ProcessInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessInfo(val *ProcessInfo) *NullableProcessInfo {
	return &NullableProcessInfo{value: val, isSet: true}
}

func (v NullableProcessInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
