/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Question struct for Question
type Question struct {
	Columns         *[]GridColumn                        `json:"columns,omitempty"`
	DefaultRows     *[]map[string]map[string]interface{} `json:"defaultRows,omitempty"`
	FieldAssociated *string                              `json:"fieldAssociated,omitempty"`
	Id              *string                              `json:"id,omitempty"`
	Label           *string                              `json:"label,omitempty"`
	LabelArg        *AdvanceArg                          `json:"labelArg,omitempty"`
	Options         *[]string                            `json:"options,omitempty"`
	OptionsArg      *[]AdvanceArg                        `json:"optionsArg,omitempty"`
	Placeholder     *string                              `json:"placeholder,omitempty"`
	ReadOnly        *bool                                `json:"readOnly,omitempty"`
	Required        *bool                                `json:"required,omitempty"`
	Tooltip         *string                              `json:"tooltip,omitempty"`
	Type            *string                              `json:"type,omitempty"`
}

// NewQuestion instantiates a new Question object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuestion() *Question {
	this := Question{}
	return &this
}

// NewQuestionWithDefaults instantiates a new Question object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuestionWithDefaults() *Question {
	this := Question{}
	return &this
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *Question) GetColumns() []GridColumn {
	if o == nil || o.Columns == nil {
		var ret []GridColumn
		return ret
	}
	return *o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetColumnsOk() (*[]GridColumn, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *Question) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []GridColumn and assigns it to the Columns field.
func (o *Question) SetColumns(v []GridColumn) {
	o.Columns = &v
}

// GetDefaultRows returns the DefaultRows field value if set, zero value otherwise.
func (o *Question) GetDefaultRows() []map[string]map[string]interface{} {
	if o == nil || o.DefaultRows == nil {
		var ret []map[string]map[string]interface{}
		return ret
	}
	return *o.DefaultRows
}

// GetDefaultRowsOk returns a tuple with the DefaultRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetDefaultRowsOk() (*[]map[string]map[string]interface{}, bool) {
	if o == nil || o.DefaultRows == nil {
		return nil, false
	}
	return o.DefaultRows, true
}

// HasDefaultRows returns a boolean if a field has been set.
func (o *Question) HasDefaultRows() bool {
	if o != nil && o.DefaultRows != nil {
		return true
	}

	return false
}

// SetDefaultRows gets a reference to the given []map[string]map[string]interface{} and assigns it to the DefaultRows field.
func (o *Question) SetDefaultRows(v []map[string]map[string]interface{}) {
	o.DefaultRows = &v
}

// GetFieldAssociated returns the FieldAssociated field value if set, zero value otherwise.
func (o *Question) GetFieldAssociated() string {
	if o == nil || o.FieldAssociated == nil {
		var ret string
		return ret
	}
	return *o.FieldAssociated
}

// GetFieldAssociatedOk returns a tuple with the FieldAssociated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetFieldAssociatedOk() (*string, bool) {
	if o == nil || o.FieldAssociated == nil {
		return nil, false
	}
	return o.FieldAssociated, true
}

// HasFieldAssociated returns a boolean if a field has been set.
func (o *Question) HasFieldAssociated() bool {
	if o != nil && o.FieldAssociated != nil {
		return true
	}

	return false
}

// SetFieldAssociated gets a reference to the given string and assigns it to the FieldAssociated field.
func (o *Question) SetFieldAssociated(v string) {
	o.FieldAssociated = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Question) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Question) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Question) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Question) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Question) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Question) SetLabel(v string) {
	o.Label = &v
}

// GetLabelArg returns the LabelArg field value if set, zero value otherwise.
func (o *Question) GetLabelArg() AdvanceArg {
	if o == nil || o.LabelArg == nil {
		var ret AdvanceArg
		return ret
	}
	return *o.LabelArg
}

// GetLabelArgOk returns a tuple with the LabelArg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetLabelArgOk() (*AdvanceArg, bool) {
	if o == nil || o.LabelArg == nil {
		return nil, false
	}
	return o.LabelArg, true
}

// HasLabelArg returns a boolean if a field has been set.
func (o *Question) HasLabelArg() bool {
	if o != nil && o.LabelArg != nil {
		return true
	}

	return false
}

// SetLabelArg gets a reference to the given AdvanceArg and assigns it to the LabelArg field.
func (o *Question) SetLabelArg(v AdvanceArg) {
	o.LabelArg = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Question) GetOptions() []string {
	if o == nil || o.Options == nil {
		var ret []string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetOptionsOk() (*[]string, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Question) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *Question) SetOptions(v []string) {
	o.Options = &v
}

// GetOptionsArg returns the OptionsArg field value if set, zero value otherwise.
func (o *Question) GetOptionsArg() []AdvanceArg {
	if o == nil || o.OptionsArg == nil {
		var ret []AdvanceArg
		return ret
	}
	return *o.OptionsArg
}

// GetOptionsArgOk returns a tuple with the OptionsArg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetOptionsArgOk() (*[]AdvanceArg, bool) {
	if o == nil || o.OptionsArg == nil {
		return nil, false
	}
	return o.OptionsArg, true
}

// HasOptionsArg returns a boolean if a field has been set.
func (o *Question) HasOptionsArg() bool {
	if o != nil && o.OptionsArg != nil {
		return true
	}

	return false
}

// SetOptionsArg gets a reference to the given []AdvanceArg and assigns it to the OptionsArg field.
func (o *Question) SetOptionsArg(v []AdvanceArg) {
	o.OptionsArg = &v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *Question) GetPlaceholder() string {
	if o == nil || o.Placeholder == nil {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetPlaceholderOk() (*string, bool) {
	if o == nil || o.Placeholder == nil {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *Question) HasPlaceholder() bool {
	if o != nil && o.Placeholder != nil {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *Question) SetPlaceholder(v string) {
	o.Placeholder = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *Question) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *Question) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *Question) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *Question) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *Question) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *Question) SetRequired(v bool) {
	o.Required = &v
}

// GetTooltip returns the Tooltip field value if set, zero value otherwise.
func (o *Question) GetTooltip() string {
	if o == nil || o.Tooltip == nil {
		var ret string
		return ret
	}
	return *o.Tooltip
}

// GetTooltipOk returns a tuple with the Tooltip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetTooltipOk() (*string, bool) {
	if o == nil || o.Tooltip == nil {
		return nil, false
	}
	return o.Tooltip, true
}

// HasTooltip returns a boolean if a field has been set.
func (o *Question) HasTooltip() bool {
	if o != nil && o.Tooltip != nil {
		return true
	}

	return false
}

// SetTooltip gets a reference to the given string and assigns it to the Tooltip field.
func (o *Question) SetTooltip(v string) {
	o.Tooltip = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Question) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Question) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Question) SetType(v string) {
	o.Type = &v
}

func (o Question) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if o.DefaultRows != nil {
		toSerialize["defaultRows"] = o.DefaultRows
	}
	if o.FieldAssociated != nil {
		toSerialize["fieldAssociated"] = o.FieldAssociated
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.LabelArg != nil {
		toSerialize["labelArg"] = o.LabelArg
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.OptionsArg != nil {
		toSerialize["optionsArg"] = o.OptionsArg
	}
	if o.Placeholder != nil {
		toSerialize["placeholder"] = o.Placeholder
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.Tooltip != nil {
		toSerialize["tooltip"] = o.Tooltip
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableQuestion struct {
	value *Question
	isSet bool
}

func (v NullableQuestion) Get() *Question {
	return v.value
}

func (v *NullableQuestion) Set(val *Question) {
	v.value = val
	v.isSet = true
}

func (v NullableQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuestion(val *Question) *NullableQuestion {
	return &NullableQuestion{value: val, isSet: true}
}

func (v NullableQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
