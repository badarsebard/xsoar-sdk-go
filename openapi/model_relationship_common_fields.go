/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RelationshipCommonFields struct for RelationshipCommonFields
type RelationshipCommonFields struct {
	EntityA       *string `json:"entityA,omitempty"`
	EntityAFamily *string `json:"entityAFamily,omitempty"`
	EntityAType   *string `json:"entityAType,omitempty"`
	EntityB       *string `json:"entityB,omitempty"`
	EntityBFamily *string `json:"entityBFamily,omitempty"`
	EntityBType   *string `json:"entityBType,omitempty"`
	Name          *string `json:"name,omitempty"`
	ReverseName   *string `json:"reverseName,omitempty"`
}

// NewRelationshipCommonFields instantiates a new RelationshipCommonFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipCommonFields() *RelationshipCommonFields {
	this := RelationshipCommonFields{}
	return &this
}

// NewRelationshipCommonFieldsWithDefaults instantiates a new RelationshipCommonFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipCommonFieldsWithDefaults() *RelationshipCommonFields {
	this := RelationshipCommonFields{}
	return &this
}

// GetEntityA returns the EntityA field value if set, zero value otherwise.
func (o *RelationshipCommonFields) GetEntityA() string {
	if o == nil || o.EntityA == nil {
		var ret string
		return ret
	}
	return *o.EntityA
}

// GetEntityAOk returns a tuple with the EntityA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipCommonFields) GetEntityAOk() (*string, bool) {
	if o == nil || o.EntityA == nil {
		return nil, false
	}
	return o.EntityA, true
}

// HasEntityA returns a boolean if a field has been set.
func (o *RelationshipCommonFields) HasEntityA() bool {
	if o != nil && o.EntityA != nil {
		return true
	}

	return false
}

// SetEntityA gets a reference to the given string and assigns it to the EntityA field.
func (o *RelationshipCommonFields) SetEntityA(v string) {
	o.EntityA = &v
}

// GetEntityAFamily returns the EntityAFamily field value if set, zero value otherwise.
func (o *RelationshipCommonFields) GetEntityAFamily() string {
	if o == nil || o.EntityAFamily == nil {
		var ret string
		return ret
	}
	return *o.EntityAFamily
}

// GetEntityAFamilyOk returns a tuple with the EntityAFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipCommonFields) GetEntityAFamilyOk() (*string, bool) {
	if o == nil || o.EntityAFamily == nil {
		return nil, false
	}
	return o.EntityAFamily, true
}

// HasEntityAFamily returns a boolean if a field has been set.
func (o *RelationshipCommonFields) HasEntityAFamily() bool {
	if o != nil && o.EntityAFamily != nil {
		return true
	}

	return false
}

// SetEntityAFamily gets a reference to the given string and assigns it to the EntityAFamily field.
func (o *RelationshipCommonFields) SetEntityAFamily(v string) {
	o.EntityAFamily = &v
}

// GetEntityAType returns the EntityAType field value if set, zero value otherwise.
func (o *RelationshipCommonFields) GetEntityAType() string {
	if o == nil || o.EntityAType == nil {
		var ret string
		return ret
	}
	return *o.EntityAType
}

// GetEntityATypeOk returns a tuple with the EntityAType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipCommonFields) GetEntityATypeOk() (*string, bool) {
	if o == nil || o.EntityAType == nil {
		return nil, false
	}
	return o.EntityAType, true
}

// HasEntityAType returns a boolean if a field has been set.
func (o *RelationshipCommonFields) HasEntityAType() bool {
	if o != nil && o.EntityAType != nil {
		return true
	}

	return false
}

// SetEntityAType gets a reference to the given string and assigns it to the EntityAType field.
func (o *RelationshipCommonFields) SetEntityAType(v string) {
	o.EntityAType = &v
}

// GetEntityB returns the EntityB field value if set, zero value otherwise.
func (o *RelationshipCommonFields) GetEntityB() string {
	if o == nil || o.EntityB == nil {
		var ret string
		return ret
	}
	return *o.EntityB
}

// GetEntityBOk returns a tuple with the EntityB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipCommonFields) GetEntityBOk() (*string, bool) {
	if o == nil || o.EntityB == nil {
		return nil, false
	}
	return o.EntityB, true
}

// HasEntityB returns a boolean if a field has been set.
func (o *RelationshipCommonFields) HasEntityB() bool {
	if o != nil && o.EntityB != nil {
		return true
	}

	return false
}

// SetEntityB gets a reference to the given string and assigns it to the EntityB field.
func (o *RelationshipCommonFields) SetEntityB(v string) {
	o.EntityB = &v
}

// GetEntityBFamily returns the EntityBFamily field value if set, zero value otherwise.
func (o *RelationshipCommonFields) GetEntityBFamily() string {
	if o == nil || o.EntityBFamily == nil {
		var ret string
		return ret
	}
	return *o.EntityBFamily
}

// GetEntityBFamilyOk returns a tuple with the EntityBFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipCommonFields) GetEntityBFamilyOk() (*string, bool) {
	if o == nil || o.EntityBFamily == nil {
		return nil, false
	}
	return o.EntityBFamily, true
}

// HasEntityBFamily returns a boolean if a field has been set.
func (o *RelationshipCommonFields) HasEntityBFamily() bool {
	if o != nil && o.EntityBFamily != nil {
		return true
	}

	return false
}

// SetEntityBFamily gets a reference to the given string and assigns it to the EntityBFamily field.
func (o *RelationshipCommonFields) SetEntityBFamily(v string) {
	o.EntityBFamily = &v
}

// GetEntityBType returns the EntityBType field value if set, zero value otherwise.
func (o *RelationshipCommonFields) GetEntityBType() string {
	if o == nil || o.EntityBType == nil {
		var ret string
		return ret
	}
	return *o.EntityBType
}

// GetEntityBTypeOk returns a tuple with the EntityBType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipCommonFields) GetEntityBTypeOk() (*string, bool) {
	if o == nil || o.EntityBType == nil {
		return nil, false
	}
	return o.EntityBType, true
}

// HasEntityBType returns a boolean if a field has been set.
func (o *RelationshipCommonFields) HasEntityBType() bool {
	if o != nil && o.EntityBType != nil {
		return true
	}

	return false
}

// SetEntityBType gets a reference to the given string and assigns it to the EntityBType field.
func (o *RelationshipCommonFields) SetEntityBType(v string) {
	o.EntityBType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RelationshipCommonFields) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipCommonFields) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RelationshipCommonFields) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RelationshipCommonFields) SetName(v string) {
	o.Name = &v
}

// GetReverseName returns the ReverseName field value if set, zero value otherwise.
func (o *RelationshipCommonFields) GetReverseName() string {
	if o == nil || o.ReverseName == nil {
		var ret string
		return ret
	}
	return *o.ReverseName
}

// GetReverseNameOk returns a tuple with the ReverseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipCommonFields) GetReverseNameOk() (*string, bool) {
	if o == nil || o.ReverseName == nil {
		return nil, false
	}
	return o.ReverseName, true
}

// HasReverseName returns a boolean if a field has been set.
func (o *RelationshipCommonFields) HasReverseName() bool {
	if o != nil && o.ReverseName != nil {
		return true
	}

	return false
}

// SetReverseName gets a reference to the given string and assigns it to the ReverseName field.
func (o *RelationshipCommonFields) SetReverseName(v string) {
	o.ReverseName = &v
}

func (o RelationshipCommonFields) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityA != nil {
		toSerialize["entityA"] = o.EntityA
	}
	if o.EntityAFamily != nil {
		toSerialize["entityAFamily"] = o.EntityAFamily
	}
	if o.EntityAType != nil {
		toSerialize["entityAType"] = o.EntityAType
	}
	if o.EntityB != nil {
		toSerialize["entityB"] = o.EntityB
	}
	if o.EntityBFamily != nil {
		toSerialize["entityBFamily"] = o.EntityBFamily
	}
	if o.EntityBType != nil {
		toSerialize["entityBType"] = o.EntityBType
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ReverseName != nil {
		toSerialize["reverseName"] = o.ReverseName
	}
	return json.Marshal(toSerialize)
}

type NullableRelationshipCommonFields struct {
	value *RelationshipCommonFields
	isSet bool
}

func (v NullableRelationshipCommonFields) Get() *RelationshipCommonFields {
	return v.value
}

func (v *NullableRelationshipCommonFields) Set(val *RelationshipCommonFields) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipCommonFields) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipCommonFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipCommonFields(val *RelationshipCommonFields) *NullableRelationshipCommonFields {
	return &NullableRelationshipCommonFields{value: val, isSet: true}
}

func (v NullableRelationshipCommonFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipCommonFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
