/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Report Report - represents report
type Report struct {
	CommitMessage *string                         `json:"commitMessage,omitempty"`
	CreatedBy     *string                         `json:"createdBy,omitempty"`
	Cron          *string                         `json:"cron,omitempty"`
	CronView      *bool                           `json:"cronView,omitempty"`
	Dashboard     *Dashboard                      `json:"dashboard,omitempty"`
	Decoder       *map[string]ReportFieldsDecoder `json:"decoder,omitempty"`
	Description   *string                         `json:"description,omitempty"`
	DisableHeader *bool                           `json:"disableHeader,omitempty"`
	EndingDate    *time.Time                      `json:"endingDate,omitempty"`
	// EndingType holds the type of schedule Ending
	EndingType                *string              `json:"endingType,omitempty"`
	FromServerVersion         *Version             `json:"fromServerVersion,omitempty"`
	Highlight                 *map[string][]string `json:"highlight,omitempty"`
	HumanCron                 *HumanCron           `json:"humanCron,omitempty"`
	Id                        *string              `json:"id,omitempty"`
	ItemVersion               *Version             `json:"itemVersion,omitempty"`
	LatestReportName          *string              `json:"latestReportName,omitempty"`
	LatestReportTime          *time.Time           `json:"latestReportTime,omitempty"`
	LatestReportUsername      *string              `json:"latestReportUsername,omitempty"`
	LatestScheduledReportTime *time.Time           `json:"latestScheduledReportTime,omitempty"`
	Locked                    *bool                `json:"locked,omitempty"`
	Modified                  *time.Time           `json:"modified,omitempty"`
	Name                      *string              `json:"name,omitempty"`
	NextScheduledTime         *time.Time           `json:"nextScheduledTime,omitempty"`
	NumericId                 *int64               `json:"numericId,omitempty"`
	Orientation               *string              `json:"orientation,omitempty"`
	PackID                    *string              `json:"packID,omitempty"`
	PackPropagationLabels     *[]string            `json:"packPropagationLabels,omitempty"`
	PaperSize                 *string              `json:"paperSize,omitempty"`
	PrevName                  *string              `json:"prevName,omitempty"`
	PrevType                  *string              `json:"prevType,omitempty"`
	PrimaryTerm               *int64               `json:"primaryTerm,omitempty"`
	PropagationLabels         *[]string            `json:"propagationLabels,omitempty"`
	Recipients                *[]string            `json:"recipients,omitempty"`
	Recurrent                 *bool                `json:"recurrent,omitempty"`
	ReportType                *string              `json:"reportType,omitempty"`
	RunOnce                   *bool                `json:"runOnce,omitempty"`
	RunningRoles              *[]string            `json:"runningRoles,omitempty"`
	RunningUser               *string              `json:"runningUser,omitempty"`
	// is it scheduled
	Scheduled                         *bool      `json:"scheduled,omitempty"`
	Sections                          *[]Section `json:"sections,omitempty"`
	Sensitive                         *bool      `json:"sensitive,omitempty"`
	SequenceNumber                    *int64     `json:"sequenceNumber,omitempty"`
	ShouldCommit                      *bool      `json:"shouldCommit,omitempty"`
	SortValues                        *[]string  `json:"sortValues,omitempty"`
	StartDate                         *time.Time `json:"startDate,omitempty"`
	System                            *bool      `json:"system,omitempty"`
	Tags                              *[]string  `json:"tags,omitempty"`
	Times                             *int64     `json:"times,omitempty"`
	Timezone                          *string    `json:"timezone,omitempty"`
	TimezoneOffset                    *int64     `json:"timezoneOffset,omitempty"`
	ToServerVersion                   *Version   `json:"toServerVersion,omitempty"`
	Type                              *string    `json:"type,omitempty"`
	UserAPIKey                        *string    `json:"userAPIKey,omitempty"`
	UserAPIKeyID                      *string    `json:"userAPIKeyID,omitempty"`
	VcShouldIgnore                    *bool      `json:"vcShouldIgnore,omitempty"`
	VcShouldKeepItemLegacyProdMachine *bool      `json:"vcShouldKeepItemLegacyProdMachine,omitempty"`
	Version                           *int64     `json:"version,omitempty"`
}

// NewReport instantiates a new Report object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReport() *Report {
	this := Report{}
	return &this
}

// NewReportWithDefaults instantiates a new Report object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportWithDefaults() *Report {
	this := Report{}
	return &this
}

// GetCommitMessage returns the CommitMessage field value if set, zero value otherwise.
func (o *Report) GetCommitMessage() string {
	if o == nil || o.CommitMessage == nil {
		var ret string
		return ret
	}
	return *o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetCommitMessageOk() (*string, bool) {
	if o == nil || o.CommitMessage == nil {
		return nil, false
	}
	return o.CommitMessage, true
}

// HasCommitMessage returns a boolean if a field has been set.
func (o *Report) HasCommitMessage() bool {
	if o != nil && o.CommitMessage != nil {
		return true
	}

	return false
}

// SetCommitMessage gets a reference to the given string and assigns it to the CommitMessage field.
func (o *Report) SetCommitMessage(v string) {
	o.CommitMessage = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Report) GetCreatedBy() string {
	if o == nil || o.CreatedBy == nil {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetCreatedByOk() (*string, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Report) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *Report) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *Report) GetCron() string {
	if o == nil || o.Cron == nil {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetCronOk() (*string, bool) {
	if o == nil || o.Cron == nil {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *Report) HasCron() bool {
	if o != nil && o.Cron != nil {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *Report) SetCron(v string) {
	o.Cron = &v
}

// GetCronView returns the CronView field value if set, zero value otherwise.
func (o *Report) GetCronView() bool {
	if o == nil || o.CronView == nil {
		var ret bool
		return ret
	}
	return *o.CronView
}

// GetCronViewOk returns a tuple with the CronView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetCronViewOk() (*bool, bool) {
	if o == nil || o.CronView == nil {
		return nil, false
	}
	return o.CronView, true
}

// HasCronView returns a boolean if a field has been set.
func (o *Report) HasCronView() bool {
	if o != nil && o.CronView != nil {
		return true
	}

	return false
}

// SetCronView gets a reference to the given bool and assigns it to the CronView field.
func (o *Report) SetCronView(v bool) {
	o.CronView = &v
}

// GetDashboard returns the Dashboard field value if set, zero value otherwise.
func (o *Report) GetDashboard() Dashboard {
	if o == nil || o.Dashboard == nil {
		var ret Dashboard
		return ret
	}
	return *o.Dashboard
}

// GetDashboardOk returns a tuple with the Dashboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetDashboardOk() (*Dashboard, bool) {
	if o == nil || o.Dashboard == nil {
		return nil, false
	}
	return o.Dashboard, true
}

// HasDashboard returns a boolean if a field has been set.
func (o *Report) HasDashboard() bool {
	if o != nil && o.Dashboard != nil {
		return true
	}

	return false
}

// SetDashboard gets a reference to the given Dashboard and assigns it to the Dashboard field.
func (o *Report) SetDashboard(v Dashboard) {
	o.Dashboard = &v
}

// GetDecoder returns the Decoder field value if set, zero value otherwise.
func (o *Report) GetDecoder() map[string]ReportFieldsDecoder {
	if o == nil || o.Decoder == nil {
		var ret map[string]ReportFieldsDecoder
		return ret
	}
	return *o.Decoder
}

// GetDecoderOk returns a tuple with the Decoder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetDecoderOk() (*map[string]ReportFieldsDecoder, bool) {
	if o == nil || o.Decoder == nil {
		return nil, false
	}
	return o.Decoder, true
}

// HasDecoder returns a boolean if a field has been set.
func (o *Report) HasDecoder() bool {
	if o != nil && o.Decoder != nil {
		return true
	}

	return false
}

// SetDecoder gets a reference to the given map[string]ReportFieldsDecoder and assigns it to the Decoder field.
func (o *Report) SetDecoder(v map[string]ReportFieldsDecoder) {
	o.Decoder = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Report) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Report) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Report) SetDescription(v string) {
	o.Description = &v
}

// GetDisableHeader returns the DisableHeader field value if set, zero value otherwise.
func (o *Report) GetDisableHeader() bool {
	if o == nil || o.DisableHeader == nil {
		var ret bool
		return ret
	}
	return *o.DisableHeader
}

// GetDisableHeaderOk returns a tuple with the DisableHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetDisableHeaderOk() (*bool, bool) {
	if o == nil || o.DisableHeader == nil {
		return nil, false
	}
	return o.DisableHeader, true
}

// HasDisableHeader returns a boolean if a field has been set.
func (o *Report) HasDisableHeader() bool {
	if o != nil && o.DisableHeader != nil {
		return true
	}

	return false
}

// SetDisableHeader gets a reference to the given bool and assigns it to the DisableHeader field.
func (o *Report) SetDisableHeader(v bool) {
	o.DisableHeader = &v
}

// GetEndingDate returns the EndingDate field value if set, zero value otherwise.
func (o *Report) GetEndingDate() time.Time {
	if o == nil || o.EndingDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndingDate
}

// GetEndingDateOk returns a tuple with the EndingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetEndingDateOk() (*time.Time, bool) {
	if o == nil || o.EndingDate == nil {
		return nil, false
	}
	return o.EndingDate, true
}

// HasEndingDate returns a boolean if a field has been set.
func (o *Report) HasEndingDate() bool {
	if o != nil && o.EndingDate != nil {
		return true
	}

	return false
}

// SetEndingDate gets a reference to the given time.Time and assigns it to the EndingDate field.
func (o *Report) SetEndingDate(v time.Time) {
	o.EndingDate = &v
}

// GetEndingType returns the EndingType field value if set, zero value otherwise.
func (o *Report) GetEndingType() string {
	if o == nil || o.EndingType == nil {
		var ret string
		return ret
	}
	return *o.EndingType
}

// GetEndingTypeOk returns a tuple with the EndingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetEndingTypeOk() (*string, bool) {
	if o == nil || o.EndingType == nil {
		return nil, false
	}
	return o.EndingType, true
}

// HasEndingType returns a boolean if a field has been set.
func (o *Report) HasEndingType() bool {
	if o != nil && o.EndingType != nil {
		return true
	}

	return false
}

// SetEndingType gets a reference to the given string and assigns it to the EndingType field.
func (o *Report) SetEndingType(v string) {
	o.EndingType = &v
}

// GetFromServerVersion returns the FromServerVersion field value if set, zero value otherwise.
func (o *Report) GetFromServerVersion() Version {
	if o == nil || o.FromServerVersion == nil {
		var ret Version
		return ret
	}
	return *o.FromServerVersion
}

// GetFromServerVersionOk returns a tuple with the FromServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetFromServerVersionOk() (*Version, bool) {
	if o == nil || o.FromServerVersion == nil {
		return nil, false
	}
	return o.FromServerVersion, true
}

// HasFromServerVersion returns a boolean if a field has been set.
func (o *Report) HasFromServerVersion() bool {
	if o != nil && o.FromServerVersion != nil {
		return true
	}

	return false
}

// SetFromServerVersion gets a reference to the given Version and assigns it to the FromServerVersion field.
func (o *Report) SetFromServerVersion(v Version) {
	o.FromServerVersion = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *Report) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *Report) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *Report) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetHumanCron returns the HumanCron field value if set, zero value otherwise.
func (o *Report) GetHumanCron() HumanCron {
	if o == nil || o.HumanCron == nil {
		var ret HumanCron
		return ret
	}
	return *o.HumanCron
}

// GetHumanCronOk returns a tuple with the HumanCron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetHumanCronOk() (*HumanCron, bool) {
	if o == nil || o.HumanCron == nil {
		return nil, false
	}
	return o.HumanCron, true
}

// HasHumanCron returns a boolean if a field has been set.
func (o *Report) HasHumanCron() bool {
	if o != nil && o.HumanCron != nil {
		return true
	}

	return false
}

// SetHumanCron gets a reference to the given HumanCron and assigns it to the HumanCron field.
func (o *Report) SetHumanCron(v HumanCron) {
	o.HumanCron = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Report) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Report) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Report) SetId(v string) {
	o.Id = &v
}

// GetItemVersion returns the ItemVersion field value if set, zero value otherwise.
func (o *Report) GetItemVersion() Version {
	if o == nil || o.ItemVersion == nil {
		var ret Version
		return ret
	}
	return *o.ItemVersion
}

// GetItemVersionOk returns a tuple with the ItemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetItemVersionOk() (*Version, bool) {
	if o == nil || o.ItemVersion == nil {
		return nil, false
	}
	return o.ItemVersion, true
}

// HasItemVersion returns a boolean if a field has been set.
func (o *Report) HasItemVersion() bool {
	if o != nil && o.ItemVersion != nil {
		return true
	}

	return false
}

// SetItemVersion gets a reference to the given Version and assigns it to the ItemVersion field.
func (o *Report) SetItemVersion(v Version) {
	o.ItemVersion = &v
}

// GetLatestReportName returns the LatestReportName field value if set, zero value otherwise.
func (o *Report) GetLatestReportName() string {
	if o == nil || o.LatestReportName == nil {
		var ret string
		return ret
	}
	return *o.LatestReportName
}

// GetLatestReportNameOk returns a tuple with the LatestReportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetLatestReportNameOk() (*string, bool) {
	if o == nil || o.LatestReportName == nil {
		return nil, false
	}
	return o.LatestReportName, true
}

// HasLatestReportName returns a boolean if a field has been set.
func (o *Report) HasLatestReportName() bool {
	if o != nil && o.LatestReportName != nil {
		return true
	}

	return false
}

// SetLatestReportName gets a reference to the given string and assigns it to the LatestReportName field.
func (o *Report) SetLatestReportName(v string) {
	o.LatestReportName = &v
}

// GetLatestReportTime returns the LatestReportTime field value if set, zero value otherwise.
func (o *Report) GetLatestReportTime() time.Time {
	if o == nil || o.LatestReportTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LatestReportTime
}

// GetLatestReportTimeOk returns a tuple with the LatestReportTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetLatestReportTimeOk() (*time.Time, bool) {
	if o == nil || o.LatestReportTime == nil {
		return nil, false
	}
	return o.LatestReportTime, true
}

// HasLatestReportTime returns a boolean if a field has been set.
func (o *Report) HasLatestReportTime() bool {
	if o != nil && o.LatestReportTime != nil {
		return true
	}

	return false
}

// SetLatestReportTime gets a reference to the given time.Time and assigns it to the LatestReportTime field.
func (o *Report) SetLatestReportTime(v time.Time) {
	o.LatestReportTime = &v
}

// GetLatestReportUsername returns the LatestReportUsername field value if set, zero value otherwise.
func (o *Report) GetLatestReportUsername() string {
	if o == nil || o.LatestReportUsername == nil {
		var ret string
		return ret
	}
	return *o.LatestReportUsername
}

// GetLatestReportUsernameOk returns a tuple with the LatestReportUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetLatestReportUsernameOk() (*string, bool) {
	if o == nil || o.LatestReportUsername == nil {
		return nil, false
	}
	return o.LatestReportUsername, true
}

// HasLatestReportUsername returns a boolean if a field has been set.
func (o *Report) HasLatestReportUsername() bool {
	if o != nil && o.LatestReportUsername != nil {
		return true
	}

	return false
}

// SetLatestReportUsername gets a reference to the given string and assigns it to the LatestReportUsername field.
func (o *Report) SetLatestReportUsername(v string) {
	o.LatestReportUsername = &v
}

// GetLatestScheduledReportTime returns the LatestScheduledReportTime field value if set, zero value otherwise.
func (o *Report) GetLatestScheduledReportTime() time.Time {
	if o == nil || o.LatestScheduledReportTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LatestScheduledReportTime
}

// GetLatestScheduledReportTimeOk returns a tuple with the LatestScheduledReportTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetLatestScheduledReportTimeOk() (*time.Time, bool) {
	if o == nil || o.LatestScheduledReportTime == nil {
		return nil, false
	}
	return o.LatestScheduledReportTime, true
}

// HasLatestScheduledReportTime returns a boolean if a field has been set.
func (o *Report) HasLatestScheduledReportTime() bool {
	if o != nil && o.LatestScheduledReportTime != nil {
		return true
	}

	return false
}

// SetLatestScheduledReportTime gets a reference to the given time.Time and assigns it to the LatestScheduledReportTime field.
func (o *Report) SetLatestScheduledReportTime(v time.Time) {
	o.LatestScheduledReportTime = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *Report) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *Report) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *Report) SetLocked(v bool) {
	o.Locked = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Report) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Report) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Report) SetModified(v time.Time) {
	o.Modified = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Report) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Report) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Report) SetName(v string) {
	o.Name = &v
}

// GetNextScheduledTime returns the NextScheduledTime field value if set, zero value otherwise.
func (o *Report) GetNextScheduledTime() time.Time {
	if o == nil || o.NextScheduledTime == nil {
		var ret time.Time
		return ret
	}
	return *o.NextScheduledTime
}

// GetNextScheduledTimeOk returns a tuple with the NextScheduledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetNextScheduledTimeOk() (*time.Time, bool) {
	if o == nil || o.NextScheduledTime == nil {
		return nil, false
	}
	return o.NextScheduledTime, true
}

// HasNextScheduledTime returns a boolean if a field has been set.
func (o *Report) HasNextScheduledTime() bool {
	if o != nil && o.NextScheduledTime != nil {
		return true
	}

	return false
}

// SetNextScheduledTime gets a reference to the given time.Time and assigns it to the NextScheduledTime field.
func (o *Report) SetNextScheduledTime(v time.Time) {
	o.NextScheduledTime = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *Report) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *Report) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *Report) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetOrientation returns the Orientation field value if set, zero value otherwise.
func (o *Report) GetOrientation() string {
	if o == nil || o.Orientation == nil {
		var ret string
		return ret
	}
	return *o.Orientation
}

// GetOrientationOk returns a tuple with the Orientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetOrientationOk() (*string, bool) {
	if o == nil || o.Orientation == nil {
		return nil, false
	}
	return o.Orientation, true
}

// HasOrientation returns a boolean if a field has been set.
func (o *Report) HasOrientation() bool {
	if o != nil && o.Orientation != nil {
		return true
	}

	return false
}

// SetOrientation gets a reference to the given string and assigns it to the Orientation field.
func (o *Report) SetOrientation(v string) {
	o.Orientation = &v
}

// GetPackID returns the PackID field value if set, zero value otherwise.
func (o *Report) GetPackID() string {
	if o == nil || o.PackID == nil {
		var ret string
		return ret
	}
	return *o.PackID
}

// GetPackIDOk returns a tuple with the PackID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetPackIDOk() (*string, bool) {
	if o == nil || o.PackID == nil {
		return nil, false
	}
	return o.PackID, true
}

// HasPackID returns a boolean if a field has been set.
func (o *Report) HasPackID() bool {
	if o != nil && o.PackID != nil {
		return true
	}

	return false
}

// SetPackID gets a reference to the given string and assigns it to the PackID field.
func (o *Report) SetPackID(v string) {
	o.PackID = &v
}

// GetPackPropagationLabels returns the PackPropagationLabels field value if set, zero value otherwise.
func (o *Report) GetPackPropagationLabels() []string {
	if o == nil || o.PackPropagationLabels == nil {
		var ret []string
		return ret
	}
	return *o.PackPropagationLabels
}

// GetPackPropagationLabelsOk returns a tuple with the PackPropagationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetPackPropagationLabelsOk() (*[]string, bool) {
	if o == nil || o.PackPropagationLabels == nil {
		return nil, false
	}
	return o.PackPropagationLabels, true
}

// HasPackPropagationLabels returns a boolean if a field has been set.
func (o *Report) HasPackPropagationLabels() bool {
	if o != nil && o.PackPropagationLabels != nil {
		return true
	}

	return false
}

// SetPackPropagationLabels gets a reference to the given []string and assigns it to the PackPropagationLabels field.
func (o *Report) SetPackPropagationLabels(v []string) {
	o.PackPropagationLabels = &v
}

// GetPaperSize returns the PaperSize field value if set, zero value otherwise.
func (o *Report) GetPaperSize() string {
	if o == nil || o.PaperSize == nil {
		var ret string
		return ret
	}
	return *o.PaperSize
}

// GetPaperSizeOk returns a tuple with the PaperSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetPaperSizeOk() (*string, bool) {
	if o == nil || o.PaperSize == nil {
		return nil, false
	}
	return o.PaperSize, true
}

// HasPaperSize returns a boolean if a field has been set.
func (o *Report) HasPaperSize() bool {
	if o != nil && o.PaperSize != nil {
		return true
	}

	return false
}

// SetPaperSize gets a reference to the given string and assigns it to the PaperSize field.
func (o *Report) SetPaperSize(v string) {
	o.PaperSize = &v
}

// GetPrevName returns the PrevName field value if set, zero value otherwise.
func (o *Report) GetPrevName() string {
	if o == nil || o.PrevName == nil {
		var ret string
		return ret
	}
	return *o.PrevName
}

// GetPrevNameOk returns a tuple with the PrevName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetPrevNameOk() (*string, bool) {
	if o == nil || o.PrevName == nil {
		return nil, false
	}
	return o.PrevName, true
}

// HasPrevName returns a boolean if a field has been set.
func (o *Report) HasPrevName() bool {
	if o != nil && o.PrevName != nil {
		return true
	}

	return false
}

// SetPrevName gets a reference to the given string and assigns it to the PrevName field.
func (o *Report) SetPrevName(v string) {
	o.PrevName = &v
}

// GetPrevType returns the PrevType field value if set, zero value otherwise.
func (o *Report) GetPrevType() string {
	if o == nil || o.PrevType == nil {
		var ret string
		return ret
	}
	return *o.PrevType
}

// GetPrevTypeOk returns a tuple with the PrevType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetPrevTypeOk() (*string, bool) {
	if o == nil || o.PrevType == nil {
		return nil, false
	}
	return o.PrevType, true
}

// HasPrevType returns a boolean if a field has been set.
func (o *Report) HasPrevType() bool {
	if o != nil && o.PrevType != nil {
		return true
	}

	return false
}

// SetPrevType gets a reference to the given string and assigns it to the PrevType field.
func (o *Report) SetPrevType(v string) {
	o.PrevType = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *Report) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *Report) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *Report) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetPropagationLabels returns the PropagationLabels field value if set, zero value otherwise.
func (o *Report) GetPropagationLabels() []string {
	if o == nil || o.PropagationLabels == nil {
		var ret []string
		return ret
	}
	return *o.PropagationLabels
}

// GetPropagationLabelsOk returns a tuple with the PropagationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetPropagationLabelsOk() (*[]string, bool) {
	if o == nil || o.PropagationLabels == nil {
		return nil, false
	}
	return o.PropagationLabels, true
}

// HasPropagationLabels returns a boolean if a field has been set.
func (o *Report) HasPropagationLabels() bool {
	if o != nil && o.PropagationLabels != nil {
		return true
	}

	return false
}

// SetPropagationLabels gets a reference to the given []string and assigns it to the PropagationLabels field.
func (o *Report) SetPropagationLabels(v []string) {
	o.PropagationLabels = &v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *Report) GetRecipients() []string {
	if o == nil || o.Recipients == nil {
		var ret []string
		return ret
	}
	return *o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetRecipientsOk() (*[]string, bool) {
	if o == nil || o.Recipients == nil {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *Report) HasRecipients() bool {
	if o != nil && o.Recipients != nil {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given []string and assigns it to the Recipients field.
func (o *Report) SetRecipients(v []string) {
	o.Recipients = &v
}

// GetRecurrent returns the Recurrent field value if set, zero value otherwise.
func (o *Report) GetRecurrent() bool {
	if o == nil || o.Recurrent == nil {
		var ret bool
		return ret
	}
	return *o.Recurrent
}

// GetRecurrentOk returns a tuple with the Recurrent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetRecurrentOk() (*bool, bool) {
	if o == nil || o.Recurrent == nil {
		return nil, false
	}
	return o.Recurrent, true
}

// HasRecurrent returns a boolean if a field has been set.
func (o *Report) HasRecurrent() bool {
	if o != nil && o.Recurrent != nil {
		return true
	}

	return false
}

// SetRecurrent gets a reference to the given bool and assigns it to the Recurrent field.
func (o *Report) SetRecurrent(v bool) {
	o.Recurrent = &v
}

// GetReportType returns the ReportType field value if set, zero value otherwise.
func (o *Report) GetReportType() string {
	if o == nil || o.ReportType == nil {
		var ret string
		return ret
	}
	return *o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetReportTypeOk() (*string, bool) {
	if o == nil || o.ReportType == nil {
		return nil, false
	}
	return o.ReportType, true
}

// HasReportType returns a boolean if a field has been set.
func (o *Report) HasReportType() bool {
	if o != nil && o.ReportType != nil {
		return true
	}

	return false
}

// SetReportType gets a reference to the given string and assigns it to the ReportType field.
func (o *Report) SetReportType(v string) {
	o.ReportType = &v
}

// GetRunOnce returns the RunOnce field value if set, zero value otherwise.
func (o *Report) GetRunOnce() bool {
	if o == nil || o.RunOnce == nil {
		var ret bool
		return ret
	}
	return *o.RunOnce
}

// GetRunOnceOk returns a tuple with the RunOnce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetRunOnceOk() (*bool, bool) {
	if o == nil || o.RunOnce == nil {
		return nil, false
	}
	return o.RunOnce, true
}

// HasRunOnce returns a boolean if a field has been set.
func (o *Report) HasRunOnce() bool {
	if o != nil && o.RunOnce != nil {
		return true
	}

	return false
}

// SetRunOnce gets a reference to the given bool and assigns it to the RunOnce field.
func (o *Report) SetRunOnce(v bool) {
	o.RunOnce = &v
}

// GetRunningRoles returns the RunningRoles field value if set, zero value otherwise.
func (o *Report) GetRunningRoles() []string {
	if o == nil || o.RunningRoles == nil {
		var ret []string
		return ret
	}
	return *o.RunningRoles
}

// GetRunningRolesOk returns a tuple with the RunningRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetRunningRolesOk() (*[]string, bool) {
	if o == nil || o.RunningRoles == nil {
		return nil, false
	}
	return o.RunningRoles, true
}

// HasRunningRoles returns a boolean if a field has been set.
func (o *Report) HasRunningRoles() bool {
	if o != nil && o.RunningRoles != nil {
		return true
	}

	return false
}

// SetRunningRoles gets a reference to the given []string and assigns it to the RunningRoles field.
func (o *Report) SetRunningRoles(v []string) {
	o.RunningRoles = &v
}

// GetRunningUser returns the RunningUser field value if set, zero value otherwise.
func (o *Report) GetRunningUser() string {
	if o == nil || o.RunningUser == nil {
		var ret string
		return ret
	}
	return *o.RunningUser
}

// GetRunningUserOk returns a tuple with the RunningUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetRunningUserOk() (*string, bool) {
	if o == nil || o.RunningUser == nil {
		return nil, false
	}
	return o.RunningUser, true
}

// HasRunningUser returns a boolean if a field has been set.
func (o *Report) HasRunningUser() bool {
	if o != nil && o.RunningUser != nil {
		return true
	}

	return false
}

// SetRunningUser gets a reference to the given string and assigns it to the RunningUser field.
func (o *Report) SetRunningUser(v string) {
	o.RunningUser = &v
}

// GetScheduled returns the Scheduled field value if set, zero value otherwise.
func (o *Report) GetScheduled() bool {
	if o == nil || o.Scheduled == nil {
		var ret bool
		return ret
	}
	return *o.Scheduled
}

// GetScheduledOk returns a tuple with the Scheduled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetScheduledOk() (*bool, bool) {
	if o == nil || o.Scheduled == nil {
		return nil, false
	}
	return o.Scheduled, true
}

// HasScheduled returns a boolean if a field has been set.
func (o *Report) HasScheduled() bool {
	if o != nil && o.Scheduled != nil {
		return true
	}

	return false
}

// SetScheduled gets a reference to the given bool and assigns it to the Scheduled field.
func (o *Report) SetScheduled(v bool) {
	o.Scheduled = &v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *Report) GetSections() []Section {
	if o == nil || o.Sections == nil {
		var ret []Section
		return ret
	}
	return *o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetSectionsOk() (*[]Section, bool) {
	if o == nil || o.Sections == nil {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *Report) HasSections() bool {
	if o != nil && o.Sections != nil {
		return true
	}

	return false
}

// SetSections gets a reference to the given []Section and assigns it to the Sections field.
func (o *Report) SetSections(v []Section) {
	o.Sections = &v
}

// GetSensitive returns the Sensitive field value if set, zero value otherwise.
func (o *Report) GetSensitive() bool {
	if o == nil || o.Sensitive == nil {
		var ret bool
		return ret
	}
	return *o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetSensitiveOk() (*bool, bool) {
	if o == nil || o.Sensitive == nil {
		return nil, false
	}
	return o.Sensitive, true
}

// HasSensitive returns a boolean if a field has been set.
func (o *Report) HasSensitive() bool {
	if o != nil && o.Sensitive != nil {
		return true
	}

	return false
}

// SetSensitive gets a reference to the given bool and assigns it to the Sensitive field.
func (o *Report) SetSensitive(v bool) {
	o.Sensitive = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *Report) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *Report) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *Report) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetShouldCommit returns the ShouldCommit field value if set, zero value otherwise.
func (o *Report) GetShouldCommit() bool {
	if o == nil || o.ShouldCommit == nil {
		var ret bool
		return ret
	}
	return *o.ShouldCommit
}

// GetShouldCommitOk returns a tuple with the ShouldCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetShouldCommitOk() (*bool, bool) {
	if o == nil || o.ShouldCommit == nil {
		return nil, false
	}
	return o.ShouldCommit, true
}

// HasShouldCommit returns a boolean if a field has been set.
func (o *Report) HasShouldCommit() bool {
	if o != nil && o.ShouldCommit != nil {
		return true
	}

	return false
}

// SetShouldCommit gets a reference to the given bool and assigns it to the ShouldCommit field.
func (o *Report) SetShouldCommit(v bool) {
	o.ShouldCommit = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *Report) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *Report) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *Report) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Report) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Report) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Report) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *Report) GetSystem() bool {
	if o == nil || o.System == nil {
		var ret bool
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetSystemOk() (*bool, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *Report) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given bool and assigns it to the System field.
func (o *Report) SetSystem(v bool) {
	o.System = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Report) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Report) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Report) SetTags(v []string) {
	o.Tags = &v
}

// GetTimes returns the Times field value if set, zero value otherwise.
func (o *Report) GetTimes() int64 {
	if o == nil || o.Times == nil {
		var ret int64
		return ret
	}
	return *o.Times
}

// GetTimesOk returns a tuple with the Times field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetTimesOk() (*int64, bool) {
	if o == nil || o.Times == nil {
		return nil, false
	}
	return o.Times, true
}

// HasTimes returns a boolean if a field has been set.
func (o *Report) HasTimes() bool {
	if o != nil && o.Times != nil {
		return true
	}

	return false
}

// SetTimes gets a reference to the given int64 and assigns it to the Times field.
func (o *Report) SetTimes(v int64) {
	o.Times = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *Report) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *Report) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *Report) SetTimezone(v string) {
	o.Timezone = &v
}

// GetTimezoneOffset returns the TimezoneOffset field value if set, zero value otherwise.
func (o *Report) GetTimezoneOffset() int64 {
	if o == nil || o.TimezoneOffset == nil {
		var ret int64
		return ret
	}
	return *o.TimezoneOffset
}

// GetTimezoneOffsetOk returns a tuple with the TimezoneOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetTimezoneOffsetOk() (*int64, bool) {
	if o == nil || o.TimezoneOffset == nil {
		return nil, false
	}
	return o.TimezoneOffset, true
}

// HasTimezoneOffset returns a boolean if a field has been set.
func (o *Report) HasTimezoneOffset() bool {
	if o != nil && o.TimezoneOffset != nil {
		return true
	}

	return false
}

// SetTimezoneOffset gets a reference to the given int64 and assigns it to the TimezoneOffset field.
func (o *Report) SetTimezoneOffset(v int64) {
	o.TimezoneOffset = &v
}

// GetToServerVersion returns the ToServerVersion field value if set, zero value otherwise.
func (o *Report) GetToServerVersion() Version {
	if o == nil || o.ToServerVersion == nil {
		var ret Version
		return ret
	}
	return *o.ToServerVersion
}

// GetToServerVersionOk returns a tuple with the ToServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetToServerVersionOk() (*Version, bool) {
	if o == nil || o.ToServerVersion == nil {
		return nil, false
	}
	return o.ToServerVersion, true
}

// HasToServerVersion returns a boolean if a field has been set.
func (o *Report) HasToServerVersion() bool {
	if o != nil && o.ToServerVersion != nil {
		return true
	}

	return false
}

// SetToServerVersion gets a reference to the given Version and assigns it to the ToServerVersion field.
func (o *Report) SetToServerVersion(v Version) {
	o.ToServerVersion = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Report) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Report) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Report) SetType(v string) {
	o.Type = &v
}

// GetUserAPIKey returns the UserAPIKey field value if set, zero value otherwise.
func (o *Report) GetUserAPIKey() string {
	if o == nil || o.UserAPIKey == nil {
		var ret string
		return ret
	}
	return *o.UserAPIKey
}

// GetUserAPIKeyOk returns a tuple with the UserAPIKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetUserAPIKeyOk() (*string, bool) {
	if o == nil || o.UserAPIKey == nil {
		return nil, false
	}
	return o.UserAPIKey, true
}

// HasUserAPIKey returns a boolean if a field has been set.
func (o *Report) HasUserAPIKey() bool {
	if o != nil && o.UserAPIKey != nil {
		return true
	}

	return false
}

// SetUserAPIKey gets a reference to the given string and assigns it to the UserAPIKey field.
func (o *Report) SetUserAPIKey(v string) {
	o.UserAPIKey = &v
}

// GetUserAPIKeyID returns the UserAPIKeyID field value if set, zero value otherwise.
func (o *Report) GetUserAPIKeyID() string {
	if o == nil || o.UserAPIKeyID == nil {
		var ret string
		return ret
	}
	return *o.UserAPIKeyID
}

// GetUserAPIKeyIDOk returns a tuple with the UserAPIKeyID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetUserAPIKeyIDOk() (*string, bool) {
	if o == nil || o.UserAPIKeyID == nil {
		return nil, false
	}
	return o.UserAPIKeyID, true
}

// HasUserAPIKeyID returns a boolean if a field has been set.
func (o *Report) HasUserAPIKeyID() bool {
	if o != nil && o.UserAPIKeyID != nil {
		return true
	}

	return false
}

// SetUserAPIKeyID gets a reference to the given string and assigns it to the UserAPIKeyID field.
func (o *Report) SetUserAPIKeyID(v string) {
	o.UserAPIKeyID = &v
}

// GetVcShouldIgnore returns the VcShouldIgnore field value if set, zero value otherwise.
func (o *Report) GetVcShouldIgnore() bool {
	if o == nil || o.VcShouldIgnore == nil {
		var ret bool
		return ret
	}
	return *o.VcShouldIgnore
}

// GetVcShouldIgnoreOk returns a tuple with the VcShouldIgnore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetVcShouldIgnoreOk() (*bool, bool) {
	if o == nil || o.VcShouldIgnore == nil {
		return nil, false
	}
	return o.VcShouldIgnore, true
}

// HasVcShouldIgnore returns a boolean if a field has been set.
func (o *Report) HasVcShouldIgnore() bool {
	if o != nil && o.VcShouldIgnore != nil {
		return true
	}

	return false
}

// SetVcShouldIgnore gets a reference to the given bool and assigns it to the VcShouldIgnore field.
func (o *Report) SetVcShouldIgnore(v bool) {
	o.VcShouldIgnore = &v
}

// GetVcShouldKeepItemLegacyProdMachine returns the VcShouldKeepItemLegacyProdMachine field value if set, zero value otherwise.
func (o *Report) GetVcShouldKeepItemLegacyProdMachine() bool {
	if o == nil || o.VcShouldKeepItemLegacyProdMachine == nil {
		var ret bool
		return ret
	}
	return *o.VcShouldKeepItemLegacyProdMachine
}

// GetVcShouldKeepItemLegacyProdMachineOk returns a tuple with the VcShouldKeepItemLegacyProdMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetVcShouldKeepItemLegacyProdMachineOk() (*bool, bool) {
	if o == nil || o.VcShouldKeepItemLegacyProdMachine == nil {
		return nil, false
	}
	return o.VcShouldKeepItemLegacyProdMachine, true
}

// HasVcShouldKeepItemLegacyProdMachine returns a boolean if a field has been set.
func (o *Report) HasVcShouldKeepItemLegacyProdMachine() bool {
	if o != nil && o.VcShouldKeepItemLegacyProdMachine != nil {
		return true
	}

	return false
}

// SetVcShouldKeepItemLegacyProdMachine gets a reference to the given bool and assigns it to the VcShouldKeepItemLegacyProdMachine field.
func (o *Report) SetVcShouldKeepItemLegacyProdMachine(v bool) {
	o.VcShouldKeepItemLegacyProdMachine = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Report) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Report) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *Report) SetVersion(v int64) {
	o.Version = &v
}

func (o Report) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommitMessage != nil {
		toSerialize["commitMessage"] = o.CommitMessage
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.Cron != nil {
		toSerialize["cron"] = o.Cron
	}
	if o.CronView != nil {
		toSerialize["cronView"] = o.CronView
	}
	if o.Dashboard != nil {
		toSerialize["dashboard"] = o.Dashboard
	}
	if o.Decoder != nil {
		toSerialize["decoder"] = o.Decoder
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisableHeader != nil {
		toSerialize["disableHeader"] = o.DisableHeader
	}
	if o.EndingDate != nil {
		toSerialize["endingDate"] = o.EndingDate
	}
	if o.EndingType != nil {
		toSerialize["endingType"] = o.EndingType
	}
	if o.FromServerVersion != nil {
		toSerialize["fromServerVersion"] = o.FromServerVersion
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.HumanCron != nil {
		toSerialize["humanCron"] = o.HumanCron
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ItemVersion != nil {
		toSerialize["itemVersion"] = o.ItemVersion
	}
	if o.LatestReportName != nil {
		toSerialize["latestReportName"] = o.LatestReportName
	}
	if o.LatestReportTime != nil {
		toSerialize["latestReportTime"] = o.LatestReportTime
	}
	if o.LatestReportUsername != nil {
		toSerialize["latestReportUsername"] = o.LatestReportUsername
	}
	if o.LatestScheduledReportTime != nil {
		toSerialize["latestScheduledReportTime"] = o.LatestScheduledReportTime
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NextScheduledTime != nil {
		toSerialize["nextScheduledTime"] = o.NextScheduledTime
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.Orientation != nil {
		toSerialize["orientation"] = o.Orientation
	}
	if o.PackID != nil {
		toSerialize["packID"] = o.PackID
	}
	if o.PackPropagationLabels != nil {
		toSerialize["packPropagationLabels"] = o.PackPropagationLabels
	}
	if o.PaperSize != nil {
		toSerialize["paperSize"] = o.PaperSize
	}
	if o.PrevName != nil {
		toSerialize["prevName"] = o.PrevName
	}
	if o.PrevType != nil {
		toSerialize["prevType"] = o.PrevType
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.PropagationLabels != nil {
		toSerialize["propagationLabels"] = o.PropagationLabels
	}
	if o.Recipients != nil {
		toSerialize["recipients"] = o.Recipients
	}
	if o.Recurrent != nil {
		toSerialize["recurrent"] = o.Recurrent
	}
	if o.ReportType != nil {
		toSerialize["reportType"] = o.ReportType
	}
	if o.RunOnce != nil {
		toSerialize["runOnce"] = o.RunOnce
	}
	if o.RunningRoles != nil {
		toSerialize["runningRoles"] = o.RunningRoles
	}
	if o.RunningUser != nil {
		toSerialize["runningUser"] = o.RunningUser
	}
	if o.Scheduled != nil {
		toSerialize["scheduled"] = o.Scheduled
	}
	if o.Sections != nil {
		toSerialize["sections"] = o.Sections
	}
	if o.Sensitive != nil {
		toSerialize["sensitive"] = o.Sensitive
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.ShouldCommit != nil {
		toSerialize["shouldCommit"] = o.ShouldCommit
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Times != nil {
		toSerialize["times"] = o.Times
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.TimezoneOffset != nil {
		toSerialize["timezoneOffset"] = o.TimezoneOffset
	}
	if o.ToServerVersion != nil {
		toSerialize["toServerVersion"] = o.ToServerVersion
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UserAPIKey != nil {
		toSerialize["userAPIKey"] = o.UserAPIKey
	}
	if o.UserAPIKeyID != nil {
		toSerialize["userAPIKeyID"] = o.UserAPIKeyID
	}
	if o.VcShouldIgnore != nil {
		toSerialize["vcShouldIgnore"] = o.VcShouldIgnore
	}
	if o.VcShouldKeepItemLegacyProdMachine != nil {
		toSerialize["vcShouldKeepItemLegacyProdMachine"] = o.VcShouldKeepItemLegacyProdMachine
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableReport struct {
	value *Report
	isSet bool
}

func (v NullableReport) Get() *Report {
	return v.value
}

func (v *NullableReport) Set(val *Report) {
	v.value = val
	v.isSet = true
}

func (v NullableReport) IsSet() bool {
	return v.isSet
}

func (v *NullableReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReport(val *Report) *NullableReport {
	return &NullableReport{value: val, isSet: true}
}

func (v NullableReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
