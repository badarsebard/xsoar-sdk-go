/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReputationData ReputationData holds the reputation data (reputation, regex, highlights result)
type ReputationData struct {
	RawTerm      *string `json:"rawTerm,omitempty"`
	Reputation   *int64  `json:"reputation,omitempty"`
	ReputationId *string `json:"reputationId,omitempty"`
	Term         *string `json:"term,omitempty"`
}

// NewReputationData instantiates a new ReputationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReputationData() *ReputationData {
	this := ReputationData{}
	return &this
}

// NewReputationDataWithDefaults instantiates a new ReputationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReputationDataWithDefaults() *ReputationData {
	this := ReputationData{}
	return &this
}

// GetRawTerm returns the RawTerm field value if set, zero value otherwise.
func (o *ReputationData) GetRawTerm() string {
	if o == nil || o.RawTerm == nil {
		var ret string
		return ret
	}
	return *o.RawTerm
}

// GetRawTermOk returns a tuple with the RawTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReputationData) GetRawTermOk() (*string, bool) {
	if o == nil || o.RawTerm == nil {
		return nil, false
	}
	return o.RawTerm, true
}

// HasRawTerm returns a boolean if a field has been set.
func (o *ReputationData) HasRawTerm() bool {
	if o != nil && o.RawTerm != nil {
		return true
	}

	return false
}

// SetRawTerm gets a reference to the given string and assigns it to the RawTerm field.
func (o *ReputationData) SetRawTerm(v string) {
	o.RawTerm = &v
}

// GetReputation returns the Reputation field value if set, zero value otherwise.
func (o *ReputationData) GetReputation() int64 {
	if o == nil || o.Reputation == nil {
		var ret int64
		return ret
	}
	return *o.Reputation
}

// GetReputationOk returns a tuple with the Reputation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReputationData) GetReputationOk() (*int64, bool) {
	if o == nil || o.Reputation == nil {
		return nil, false
	}
	return o.Reputation, true
}

// HasReputation returns a boolean if a field has been set.
func (o *ReputationData) HasReputation() bool {
	if o != nil && o.Reputation != nil {
		return true
	}

	return false
}

// SetReputation gets a reference to the given int64 and assigns it to the Reputation field.
func (o *ReputationData) SetReputation(v int64) {
	o.Reputation = &v
}

// GetReputationId returns the ReputationId field value if set, zero value otherwise.
func (o *ReputationData) GetReputationId() string {
	if o == nil || o.ReputationId == nil {
		var ret string
		return ret
	}
	return *o.ReputationId
}

// GetReputationIdOk returns a tuple with the ReputationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReputationData) GetReputationIdOk() (*string, bool) {
	if o == nil || o.ReputationId == nil {
		return nil, false
	}
	return o.ReputationId, true
}

// HasReputationId returns a boolean if a field has been set.
func (o *ReputationData) HasReputationId() bool {
	if o != nil && o.ReputationId != nil {
		return true
	}

	return false
}

// SetReputationId gets a reference to the given string and assigns it to the ReputationId field.
func (o *ReputationData) SetReputationId(v string) {
	o.ReputationId = &v
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *ReputationData) GetTerm() string {
	if o == nil || o.Term == nil {
		var ret string
		return ret
	}
	return *o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReputationData) GetTermOk() (*string, bool) {
	if o == nil || o.Term == nil {
		return nil, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *ReputationData) HasTerm() bool {
	if o != nil && o.Term != nil {
		return true
	}

	return false
}

// SetTerm gets a reference to the given string and assigns it to the Term field.
func (o *ReputationData) SetTerm(v string) {
	o.Term = &v
}

func (o ReputationData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RawTerm != nil {
		toSerialize["rawTerm"] = o.RawTerm
	}
	if o.Reputation != nil {
		toSerialize["reputation"] = o.Reputation
	}
	if o.ReputationId != nil {
		toSerialize["reputationId"] = o.ReputationId
	}
	if o.Term != nil {
		toSerialize["term"] = o.Term
	}
	return json.Marshal(toSerialize)
}

type NullableReputationData struct {
	value *ReputationData
	isSet bool
}

func (v NullableReputationData) Get() *ReputationData {
	return v.value
}

func (v *NullableReputationData) Set(val *ReputationData) {
	v.value = val
	v.isSet = true
}

func (v NullableReputationData) IsSet() bool {
	return v.isSet
}

func (v *NullableReputationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReputationData(val *ReputationData) *NullableReputationData {
	return &NullableReputationData{value: val, isSet: true}
}

func (v NullableReputationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReputationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
