/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RolesAndPropagationLabelsWrapper struct for RolesAndPropagationLabelsWrapper
type RolesAndPropagationLabelsWrapper struct {
	AccUsers           *[]RolesAndPropagationLabelsWrapperAccUsers `json:"accUsers,omitempty"`
	Guid               *string                                     `json:"guid,omitempty"`
	Id                 *string                                     `json:"id,omitempty"`
	IncidentsCount     *int32                                      `json:"incidentsCount,omitempty"`
	InvestigationCount *int32                                      `json:"investigationCount,omitempty"`
	Name               *string                                     `json:"name,omitempty"`
	Roles              *[]map[string]interface{}                   `json:"roles,omitempty"`
	ServerPublic       *string                                     `json:"serverPublic,omitempty"`
	Status             *string                                     `json:"status,omitempty"`
	Users              *[]map[string]interface{}                   `json:"users,omitempty"`
}

// NewRolesAndPropagationLabelsWrapper instantiates a new RolesAndPropagationLabelsWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolesAndPropagationLabelsWrapper() *RolesAndPropagationLabelsWrapper {
	this := RolesAndPropagationLabelsWrapper{}
	return &this
}

// NewRolesAndPropagationLabelsWrapperWithDefaults instantiates a new RolesAndPropagationLabelsWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolesAndPropagationLabelsWrapperWithDefaults() *RolesAndPropagationLabelsWrapper {
	this := RolesAndPropagationLabelsWrapper{}
	return &this
}

// GetAccUsers returns the AccUsers field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapper) GetAccUsers() []RolesAndPropagationLabelsWrapperAccUsers {
	if o == nil || o.AccUsers == nil {
		var ret []RolesAndPropagationLabelsWrapperAccUsers
		return ret
	}
	return *o.AccUsers
}

// GetAccUsersOk returns a tuple with the AccUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapper) GetAccUsersOk() (*[]RolesAndPropagationLabelsWrapperAccUsers, bool) {
	if o == nil || o.AccUsers == nil {
		return nil, false
	}
	return o.AccUsers, true
}

// HasAccUsers returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapper) HasAccUsers() bool {
	if o != nil && o.AccUsers != nil {
		return true
	}

	return false
}

// SetAccUsers gets a reference to the given []RolesAndPropagationLabelsWrapperAccUsers and assigns it to the AccUsers field.
func (o *RolesAndPropagationLabelsWrapper) SetAccUsers(v []RolesAndPropagationLabelsWrapperAccUsers) {
	o.AccUsers = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapper) GetGuid() string {
	if o == nil || o.Guid == nil {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapper) GetGuidOk() (*string, bool) {
	if o == nil || o.Guid == nil {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapper) HasGuid() bool {
	if o != nil && o.Guid != nil {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *RolesAndPropagationLabelsWrapper) SetGuid(v string) {
	o.Guid = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapper) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapper) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapper) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RolesAndPropagationLabelsWrapper) SetId(v string) {
	o.Id = &v
}

// GetIncidentsCount returns the IncidentsCount field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapper) GetIncidentsCount() int32 {
	if o == nil || o.IncidentsCount == nil {
		var ret int32
		return ret
	}
	return *o.IncidentsCount
}

// GetIncidentsCountOk returns a tuple with the IncidentsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapper) GetIncidentsCountOk() (*int32, bool) {
	if o == nil || o.IncidentsCount == nil {
		return nil, false
	}
	return o.IncidentsCount, true
}

// HasIncidentsCount returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapper) HasIncidentsCount() bool {
	if o != nil && o.IncidentsCount != nil {
		return true
	}

	return false
}

// SetIncidentsCount gets a reference to the given int32 and assigns it to the IncidentsCount field.
func (o *RolesAndPropagationLabelsWrapper) SetIncidentsCount(v int32) {
	o.IncidentsCount = &v
}

// GetInvestigationCount returns the InvestigationCount field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapper) GetInvestigationCount() int32 {
	if o == nil || o.InvestigationCount == nil {
		var ret int32
		return ret
	}
	return *o.InvestigationCount
}

// GetInvestigationCountOk returns a tuple with the InvestigationCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapper) GetInvestigationCountOk() (*int32, bool) {
	if o == nil || o.InvestigationCount == nil {
		return nil, false
	}
	return o.InvestigationCount, true
}

// HasInvestigationCount returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapper) HasInvestigationCount() bool {
	if o != nil && o.InvestigationCount != nil {
		return true
	}

	return false
}

// SetInvestigationCount gets a reference to the given int32 and assigns it to the InvestigationCount field.
func (o *RolesAndPropagationLabelsWrapper) SetInvestigationCount(v int32) {
	o.InvestigationCount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapper) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapper) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapper) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RolesAndPropagationLabelsWrapper) SetName(v string) {
	o.Name = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapper) GetRoles() []map[string]interface{} {
	if o == nil || o.Roles == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapper) GetRolesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapper) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []map[string]interface{} and assigns it to the Roles field.
func (o *RolesAndPropagationLabelsWrapper) SetRoles(v []map[string]interface{}) {
	o.Roles = &v
}

// GetServerPublic returns the ServerPublic field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapper) GetServerPublic() string {
	if o == nil || o.ServerPublic == nil {
		var ret string
		return ret
	}
	return *o.ServerPublic
}

// GetServerPublicOk returns a tuple with the ServerPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapper) GetServerPublicOk() (*string, bool) {
	if o == nil || o.ServerPublic == nil {
		return nil, false
	}
	return o.ServerPublic, true
}

// HasServerPublic returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapper) HasServerPublic() bool {
	if o != nil && o.ServerPublic != nil {
		return true
	}

	return false
}

// SetServerPublic gets a reference to the given string and assigns it to the ServerPublic field.
func (o *RolesAndPropagationLabelsWrapper) SetServerPublic(v string) {
	o.ServerPublic = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapper) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapper) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapper) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RolesAndPropagationLabelsWrapper) SetStatus(v string) {
	o.Status = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapper) GetUsers() []map[string]interface{} {
	if o == nil || o.Users == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapper) GetUsersOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapper) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []map[string]interface{} and assigns it to the Users field.
func (o *RolesAndPropagationLabelsWrapper) SetUsers(v []map[string]interface{}) {
	o.Users = &v
}

func (o RolesAndPropagationLabelsWrapper) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccUsers != nil {
		toSerialize["accUsers"] = o.AccUsers
	}
	if o.Guid != nil {
		toSerialize["guid"] = o.Guid
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IncidentsCount != nil {
		toSerialize["incidentsCount"] = o.IncidentsCount
	}
	if o.InvestigationCount != nil {
		toSerialize["investigationCount"] = o.InvestigationCount
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.ServerPublic != nil {
		toSerialize["serverPublic"] = o.ServerPublic
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableRolesAndPropagationLabelsWrapper struct {
	value *RolesAndPropagationLabelsWrapper
	isSet bool
}

func (v NullableRolesAndPropagationLabelsWrapper) Get() *RolesAndPropagationLabelsWrapper {
	return v.value
}

func (v *NullableRolesAndPropagationLabelsWrapper) Set(val *RolesAndPropagationLabelsWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableRolesAndPropagationLabelsWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableRolesAndPropagationLabelsWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolesAndPropagationLabelsWrapper(val *RolesAndPropagationLabelsWrapper) *NullableRolesAndPropagationLabelsWrapper {
	return &NullableRolesAndPropagationLabelsWrapper{value: val, isSet: true}
}

func (v NullableRolesAndPropagationLabelsWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolesAndPropagationLabelsWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
