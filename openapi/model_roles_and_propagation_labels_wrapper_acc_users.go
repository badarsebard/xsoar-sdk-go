/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// RolesAndPropagationLabelsWrapperAccUsers struct for RolesAndPropagationLabelsWrapperAccUsers
type RolesAndPropagationLabelsWrapperAccUsers struct {
	AccUser           *bool                                  `json:"accUser,omitempty"`
	DefaultAdmin      *bool                                  `json:"defaultAdmin,omitempty"`
	Disabled          *bool                                  `json:"disabled,omitempty"`
	Email             *string                                `json:"email,omitempty"`
	Id                *string                                `json:"id,omitempty"`
	IsLocked          *bool                                  `json:"isLocked,omitempty"`
	LastLogin         *time.Time                             `json:"lastLogin,omitempty"`
	Name              *string                                `json:"name,omitempty"`
	Phone             *string                                `json:"phone,omitempty"`
	PlaygroundCleared *bool                                  `json:"playgroundCleared,omitempty"`
	PlaygroundId      *string                                `json:"playgroundId,omitempty"`
	ReadOnly          *bool                                  `json:"readOnly,omitempty"`
	Roles             *RolesAndPropagationLabelsWrapperRoles `json:"roles,omitempty"`
	UserType          *string                                `json:"userType,omitempty"`
	Username          *string                                `json:"username,omitempty"`
}

// NewRolesAndPropagationLabelsWrapperAccUsers instantiates a new RolesAndPropagationLabelsWrapperAccUsers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolesAndPropagationLabelsWrapperAccUsers() *RolesAndPropagationLabelsWrapperAccUsers {
	this := RolesAndPropagationLabelsWrapperAccUsers{}
	return &this
}

// NewRolesAndPropagationLabelsWrapperAccUsersWithDefaults instantiates a new RolesAndPropagationLabelsWrapperAccUsers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolesAndPropagationLabelsWrapperAccUsersWithDefaults() *RolesAndPropagationLabelsWrapperAccUsers {
	this := RolesAndPropagationLabelsWrapperAccUsers{}
	return &this
}

// GetAccUser returns the AccUser field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetAccUser() bool {
	if o == nil || o.AccUser == nil {
		var ret bool
		return ret
	}
	return *o.AccUser
}

// GetAccUserOk returns a tuple with the AccUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetAccUserOk() (*bool, bool) {
	if o == nil || o.AccUser == nil {
		return nil, false
	}
	return o.AccUser, true
}

// HasAccUser returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasAccUser() bool {
	if o != nil && o.AccUser != nil {
		return true
	}

	return false
}

// SetAccUser gets a reference to the given bool and assigns it to the AccUser field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetAccUser(v bool) {
	o.AccUser = &v
}

// GetDefaultAdmin returns the DefaultAdmin field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetDefaultAdmin() bool {
	if o == nil || o.DefaultAdmin == nil {
		var ret bool
		return ret
	}
	return *o.DefaultAdmin
}

// GetDefaultAdminOk returns a tuple with the DefaultAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetDefaultAdminOk() (*bool, bool) {
	if o == nil || o.DefaultAdmin == nil {
		return nil, false
	}
	return o.DefaultAdmin, true
}

// HasDefaultAdmin returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasDefaultAdmin() bool {
	if o != nil && o.DefaultAdmin != nil {
		return true
	}

	return false
}

// SetDefaultAdmin gets a reference to the given bool and assigns it to the DefaultAdmin field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetDefaultAdmin(v bool) {
	o.DefaultAdmin = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetDisabled() bool {
	if o == nil || o.Disabled == nil {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetDisabledOk() (*bool, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetEmail(v string) {
	o.Email = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetId(v string) {
	o.Id = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetIsLocked() bool {
	if o == nil || o.IsLocked == nil {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetIsLockedOk() (*bool, bool) {
	if o == nil || o.IsLocked == nil {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasIsLocked() bool {
	if o != nil && o.IsLocked != nil {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetLastLogin() time.Time {
	if o == nil || o.LastLogin == nil {
		var ret time.Time
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetLastLoginOk() (*time.Time, bool) {
	if o == nil || o.LastLogin == nil {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasLastLogin() bool {
	if o != nil && o.LastLogin != nil {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given time.Time and assigns it to the LastLogin field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetLastLogin(v time.Time) {
	o.LastLogin = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetName(v string) {
	o.Name = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetPhone() string {
	if o == nil || o.Phone == nil {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetPhoneOk() (*string, bool) {
	if o == nil || o.Phone == nil {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasPhone() bool {
	if o != nil && o.Phone != nil {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetPhone(v string) {
	o.Phone = &v
}

// GetPlaygroundCleared returns the PlaygroundCleared field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetPlaygroundCleared() bool {
	if o == nil || o.PlaygroundCleared == nil {
		var ret bool
		return ret
	}
	return *o.PlaygroundCleared
}

// GetPlaygroundClearedOk returns a tuple with the PlaygroundCleared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetPlaygroundClearedOk() (*bool, bool) {
	if o == nil || o.PlaygroundCleared == nil {
		return nil, false
	}
	return o.PlaygroundCleared, true
}

// HasPlaygroundCleared returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasPlaygroundCleared() bool {
	if o != nil && o.PlaygroundCleared != nil {
		return true
	}

	return false
}

// SetPlaygroundCleared gets a reference to the given bool and assigns it to the PlaygroundCleared field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetPlaygroundCleared(v bool) {
	o.PlaygroundCleared = &v
}

// GetPlaygroundId returns the PlaygroundId field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetPlaygroundId() string {
	if o == nil || o.PlaygroundId == nil {
		var ret string
		return ret
	}
	return *o.PlaygroundId
}

// GetPlaygroundIdOk returns a tuple with the PlaygroundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetPlaygroundIdOk() (*string, bool) {
	if o == nil || o.PlaygroundId == nil {
		return nil, false
	}
	return o.PlaygroundId, true
}

// HasPlaygroundId returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasPlaygroundId() bool {
	if o != nil && o.PlaygroundId != nil {
		return true
	}

	return false
}

// SetPlaygroundId gets a reference to the given string and assigns it to the PlaygroundId field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetPlaygroundId(v string) {
	o.PlaygroundId = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetRoles() RolesAndPropagationLabelsWrapperRoles {
	if o == nil || o.Roles == nil {
		var ret RolesAndPropagationLabelsWrapperRoles
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetRolesOk() (*RolesAndPropagationLabelsWrapperRoles, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given RolesAndPropagationLabelsWrapperRoles and assigns it to the Roles field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetRoles(v RolesAndPropagationLabelsWrapperRoles) {
	o.Roles = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetUserType() string {
	if o == nil || o.UserType == nil {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetUserTypeOk() (*string, bool) {
	if o == nil || o.UserType == nil {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasUserType() bool {
	if o != nil && o.UserType != nil {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetUserType(v string) {
	o.UserType = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *RolesAndPropagationLabelsWrapperAccUsers) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *RolesAndPropagationLabelsWrapperAccUsers) SetUsername(v string) {
	o.Username = &v
}

func (o RolesAndPropagationLabelsWrapperAccUsers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccUser != nil {
		toSerialize["accUser"] = o.AccUser
	}
	if o.DefaultAdmin != nil {
		toSerialize["defaultAdmin"] = o.DefaultAdmin
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsLocked != nil {
		toSerialize["isLocked"] = o.IsLocked
	}
	if o.LastLogin != nil {
		toSerialize["lastLogin"] = o.LastLogin
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Phone != nil {
		toSerialize["phone"] = o.Phone
	}
	if o.PlaygroundCleared != nil {
		toSerialize["playgroundCleared"] = o.PlaygroundCleared
	}
	if o.PlaygroundId != nil {
		toSerialize["playgroundId"] = o.PlaygroundId
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.UserType != nil {
		toSerialize["userType"] = o.UserType
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableRolesAndPropagationLabelsWrapperAccUsers struct {
	value *RolesAndPropagationLabelsWrapperAccUsers
	isSet bool
}

func (v NullableRolesAndPropagationLabelsWrapperAccUsers) Get() *RolesAndPropagationLabelsWrapperAccUsers {
	return v.value
}

func (v *NullableRolesAndPropagationLabelsWrapperAccUsers) Set(val *RolesAndPropagationLabelsWrapperAccUsers) {
	v.value = val
	v.isSet = true
}

func (v NullableRolesAndPropagationLabelsWrapperAccUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableRolesAndPropagationLabelsWrapperAccUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolesAndPropagationLabelsWrapperAccUsers(val *RolesAndPropagationLabelsWrapperAccUsers) *NullableRolesAndPropagationLabelsWrapperAccUsers {
	return &NullableRolesAndPropagationLabelsWrapperAccUsers{value: val, isSet: true}
}

func (v NullableRolesAndPropagationLabelsWrapperAccUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolesAndPropagationLabelsWrapperAccUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
