/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ScriptAPI struct for ScriptAPI
type ScriptAPI struct {
	Arguments         *[]Argument          `json:"arguments,omitempty"`
	Comment           *string              `json:"comment,omitempty"`
	ContextKeys       *[]string            `json:"contextKeys,omitempty"`
	DependsOn         *map[string][]string `json:"dependsOn,omitempty"`
	Deprecated        *bool                `json:"deprecated,omitempty"`
	Detached          *bool                `json:"detached,omitempty"`
	DockerImage       *string              `json:"dockerImage,omitempty"`
	Enabled           *bool                `json:"enabled,omitempty"`
	Hidden            *bool                `json:"hidden,omitempty"`
	Id                *string              `json:"id,omitempty"`
	Locked            *bool                `json:"locked,omitempty"`
	Modified          *time.Time           `json:"modified,omitempty"`
	Name              *string              `json:"name,omitempty"`
	Outputs           *[]Output            `json:"outputs,omitempty"`
	Permitted         *bool                `json:"permitted,omitempty"`
	Polling           *bool                `json:"polling,omitempty"`
	PropagationLabels *[]string            `json:"propagationLabels,omitempty"`
	Roles             *[]string            `json:"roles,omitempty"`
	RunAs             *string              `json:"runAs,omitempty"`
	// ScriptTarget represents the module where this script should run
	ScriptTarget *int64    `json:"scriptTarget,omitempty"`
	System       *bool     `json:"system,omitempty"`
	Tags         *[]string `json:"tags,omitempty"`
	// ScriptType holds the type of a script
	Type    *string `json:"type,omitempty"`
	User    *string `json:"user,omitempty"`
	Version *int64  `json:"version,omitempty"`
}

// NewScriptAPI instantiates a new ScriptAPI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptAPI() *ScriptAPI {
	this := ScriptAPI{}
	return &this
}

// NewScriptAPIWithDefaults instantiates a new ScriptAPI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptAPIWithDefaults() *ScriptAPI {
	this := ScriptAPI{}
	return &this
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *ScriptAPI) GetArguments() []Argument {
	if o == nil || o.Arguments == nil {
		var ret []Argument
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetArgumentsOk() (*[]Argument, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *ScriptAPI) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []Argument and assigns it to the Arguments field.
func (o *ScriptAPI) SetArguments(v []Argument) {
	o.Arguments = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ScriptAPI) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ScriptAPI) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ScriptAPI) SetComment(v string) {
	o.Comment = &v
}

// GetContextKeys returns the ContextKeys field value if set, zero value otherwise.
func (o *ScriptAPI) GetContextKeys() []string {
	if o == nil || o.ContextKeys == nil {
		var ret []string
		return ret
	}
	return *o.ContextKeys
}

// GetContextKeysOk returns a tuple with the ContextKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetContextKeysOk() (*[]string, bool) {
	if o == nil || o.ContextKeys == nil {
		return nil, false
	}
	return o.ContextKeys, true
}

// HasContextKeys returns a boolean if a field has been set.
func (o *ScriptAPI) HasContextKeys() bool {
	if o != nil && o.ContextKeys != nil {
		return true
	}

	return false
}

// SetContextKeys gets a reference to the given []string and assigns it to the ContextKeys field.
func (o *ScriptAPI) SetContextKeys(v []string) {
	o.ContextKeys = &v
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise.
func (o *ScriptAPI) GetDependsOn() map[string][]string {
	if o == nil || o.DependsOn == nil {
		var ret map[string][]string
		return ret
	}
	return *o.DependsOn
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetDependsOnOk() (*map[string][]string, bool) {
	if o == nil || o.DependsOn == nil {
		return nil, false
	}
	return o.DependsOn, true
}

// HasDependsOn returns a boolean if a field has been set.
func (o *ScriptAPI) HasDependsOn() bool {
	if o != nil && o.DependsOn != nil {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given map[string][]string and assigns it to the DependsOn field.
func (o *ScriptAPI) SetDependsOn(v map[string][]string) {
	o.DependsOn = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *ScriptAPI) GetDeprecated() bool {
	if o == nil || o.Deprecated == nil {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetDeprecatedOk() (*bool, bool) {
	if o == nil || o.Deprecated == nil {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *ScriptAPI) HasDeprecated() bool {
	if o != nil && o.Deprecated != nil {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *ScriptAPI) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetDetached returns the Detached field value if set, zero value otherwise.
func (o *ScriptAPI) GetDetached() bool {
	if o == nil || o.Detached == nil {
		var ret bool
		return ret
	}
	return *o.Detached
}

// GetDetachedOk returns a tuple with the Detached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetDetachedOk() (*bool, bool) {
	if o == nil || o.Detached == nil {
		return nil, false
	}
	return o.Detached, true
}

// HasDetached returns a boolean if a field has been set.
func (o *ScriptAPI) HasDetached() bool {
	if o != nil && o.Detached != nil {
		return true
	}

	return false
}

// SetDetached gets a reference to the given bool and assigns it to the Detached field.
func (o *ScriptAPI) SetDetached(v bool) {
	o.Detached = &v
}

// GetDockerImage returns the DockerImage field value if set, zero value otherwise.
func (o *ScriptAPI) GetDockerImage() string {
	if o == nil || o.DockerImage == nil {
		var ret string
		return ret
	}
	return *o.DockerImage
}

// GetDockerImageOk returns a tuple with the DockerImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetDockerImageOk() (*string, bool) {
	if o == nil || o.DockerImage == nil {
		return nil, false
	}
	return o.DockerImage, true
}

// HasDockerImage returns a boolean if a field has been set.
func (o *ScriptAPI) HasDockerImage() bool {
	if o != nil && o.DockerImage != nil {
		return true
	}

	return false
}

// SetDockerImage gets a reference to the given string and assigns it to the DockerImage field.
func (o *ScriptAPI) SetDockerImage(v string) {
	o.DockerImage = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ScriptAPI) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ScriptAPI) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ScriptAPI) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *ScriptAPI) GetHidden() bool {
	if o == nil || o.Hidden == nil {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetHiddenOk() (*bool, bool) {
	if o == nil || o.Hidden == nil {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *ScriptAPI) HasHidden() bool {
	if o != nil && o.Hidden != nil {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *ScriptAPI) SetHidden(v bool) {
	o.Hidden = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScriptAPI) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScriptAPI) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ScriptAPI) SetId(v string) {
	o.Id = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *ScriptAPI) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *ScriptAPI) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *ScriptAPI) SetLocked(v bool) {
	o.Locked = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *ScriptAPI) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *ScriptAPI) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *ScriptAPI) SetModified(v time.Time) {
	o.Modified = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ScriptAPI) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ScriptAPI) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ScriptAPI) SetName(v string) {
	o.Name = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *ScriptAPI) GetOutputs() []Output {
	if o == nil || o.Outputs == nil {
		var ret []Output
		return ret
	}
	return *o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetOutputsOk() (*[]Output, bool) {
	if o == nil || o.Outputs == nil {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *ScriptAPI) HasOutputs() bool {
	if o != nil && o.Outputs != nil {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []Output and assigns it to the Outputs field.
func (o *ScriptAPI) SetOutputs(v []Output) {
	o.Outputs = &v
}

// GetPermitted returns the Permitted field value if set, zero value otherwise.
func (o *ScriptAPI) GetPermitted() bool {
	if o == nil || o.Permitted == nil {
		var ret bool
		return ret
	}
	return *o.Permitted
}

// GetPermittedOk returns a tuple with the Permitted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetPermittedOk() (*bool, bool) {
	if o == nil || o.Permitted == nil {
		return nil, false
	}
	return o.Permitted, true
}

// HasPermitted returns a boolean if a field has been set.
func (o *ScriptAPI) HasPermitted() bool {
	if o != nil && o.Permitted != nil {
		return true
	}

	return false
}

// SetPermitted gets a reference to the given bool and assigns it to the Permitted field.
func (o *ScriptAPI) SetPermitted(v bool) {
	o.Permitted = &v
}

// GetPolling returns the Polling field value if set, zero value otherwise.
func (o *ScriptAPI) GetPolling() bool {
	if o == nil || o.Polling == nil {
		var ret bool
		return ret
	}
	return *o.Polling
}

// GetPollingOk returns a tuple with the Polling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetPollingOk() (*bool, bool) {
	if o == nil || o.Polling == nil {
		return nil, false
	}
	return o.Polling, true
}

// HasPolling returns a boolean if a field has been set.
func (o *ScriptAPI) HasPolling() bool {
	if o != nil && o.Polling != nil {
		return true
	}

	return false
}

// SetPolling gets a reference to the given bool and assigns it to the Polling field.
func (o *ScriptAPI) SetPolling(v bool) {
	o.Polling = &v
}

// GetPropagationLabels returns the PropagationLabels field value if set, zero value otherwise.
func (o *ScriptAPI) GetPropagationLabels() []string {
	if o == nil || o.PropagationLabels == nil {
		var ret []string
		return ret
	}
	return *o.PropagationLabels
}

// GetPropagationLabelsOk returns a tuple with the PropagationLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetPropagationLabelsOk() (*[]string, bool) {
	if o == nil || o.PropagationLabels == nil {
		return nil, false
	}
	return o.PropagationLabels, true
}

// HasPropagationLabels returns a boolean if a field has been set.
func (o *ScriptAPI) HasPropagationLabels() bool {
	if o != nil && o.PropagationLabels != nil {
		return true
	}

	return false
}

// SetPropagationLabels gets a reference to the given []string and assigns it to the PropagationLabels field.
func (o *ScriptAPI) SetPropagationLabels(v []string) {
	o.PropagationLabels = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *ScriptAPI) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *ScriptAPI) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *ScriptAPI) SetRoles(v []string) {
	o.Roles = &v
}

// GetRunAs returns the RunAs field value if set, zero value otherwise.
func (o *ScriptAPI) GetRunAs() string {
	if o == nil || o.RunAs == nil {
		var ret string
		return ret
	}
	return *o.RunAs
}

// GetRunAsOk returns a tuple with the RunAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetRunAsOk() (*string, bool) {
	if o == nil || o.RunAs == nil {
		return nil, false
	}
	return o.RunAs, true
}

// HasRunAs returns a boolean if a field has been set.
func (o *ScriptAPI) HasRunAs() bool {
	if o != nil && o.RunAs != nil {
		return true
	}

	return false
}

// SetRunAs gets a reference to the given string and assigns it to the RunAs field.
func (o *ScriptAPI) SetRunAs(v string) {
	o.RunAs = &v
}

// GetScriptTarget returns the ScriptTarget field value if set, zero value otherwise.
func (o *ScriptAPI) GetScriptTarget() int64 {
	if o == nil || o.ScriptTarget == nil {
		var ret int64
		return ret
	}
	return *o.ScriptTarget
}

// GetScriptTargetOk returns a tuple with the ScriptTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetScriptTargetOk() (*int64, bool) {
	if o == nil || o.ScriptTarget == nil {
		return nil, false
	}
	return o.ScriptTarget, true
}

// HasScriptTarget returns a boolean if a field has been set.
func (o *ScriptAPI) HasScriptTarget() bool {
	if o != nil && o.ScriptTarget != nil {
		return true
	}

	return false
}

// SetScriptTarget gets a reference to the given int64 and assigns it to the ScriptTarget field.
func (o *ScriptAPI) SetScriptTarget(v int64) {
	o.ScriptTarget = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *ScriptAPI) GetSystem() bool {
	if o == nil || o.System == nil {
		var ret bool
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetSystemOk() (*bool, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *ScriptAPI) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given bool and assigns it to the System field.
func (o *ScriptAPI) SetSystem(v bool) {
	o.System = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ScriptAPI) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ScriptAPI) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ScriptAPI) SetTags(v []string) {
	o.Tags = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScriptAPI) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScriptAPI) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScriptAPI) SetType(v string) {
	o.Type = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ScriptAPI) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ScriptAPI) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *ScriptAPI) SetUser(v string) {
	o.User = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ScriptAPI) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptAPI) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ScriptAPI) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *ScriptAPI) SetVersion(v int64) {
	o.Version = &v
}

func (o ScriptAPI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.ContextKeys != nil {
		toSerialize["contextKeys"] = o.ContextKeys
	}
	if o.DependsOn != nil {
		toSerialize["dependsOn"] = o.DependsOn
	}
	if o.Deprecated != nil {
		toSerialize["deprecated"] = o.Deprecated
	}
	if o.Detached != nil {
		toSerialize["detached"] = o.Detached
	}
	if o.DockerImage != nil {
		toSerialize["dockerImage"] = o.DockerImage
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Hidden != nil {
		toSerialize["hidden"] = o.Hidden
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Outputs != nil {
		toSerialize["outputs"] = o.Outputs
	}
	if o.Permitted != nil {
		toSerialize["permitted"] = o.Permitted
	}
	if o.Polling != nil {
		toSerialize["polling"] = o.Polling
	}
	if o.PropagationLabels != nil {
		toSerialize["propagationLabels"] = o.PropagationLabels
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.RunAs != nil {
		toSerialize["runAs"] = o.RunAs
	}
	if o.ScriptTarget != nil {
		toSerialize["scriptTarget"] = o.ScriptTarget
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableScriptAPI struct {
	value *ScriptAPI
	isSet bool
}

func (v NullableScriptAPI) Get() *ScriptAPI {
	return v.value
}

func (v *NullableScriptAPI) Set(val *ScriptAPI) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptAPI) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptAPI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptAPI(val *ScriptAPI) *NullableScriptAPI {
	return &NullableScriptAPI{value: val, isSet: true}
}

func (v NullableScriptAPI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptAPI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
