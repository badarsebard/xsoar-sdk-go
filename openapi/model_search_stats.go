/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// SearchStats struct for SearchStats
type SearchStats struct {
	Committed      *time.Time           `json:"committed,omitempty"`
	Duration       *int64               `json:"duration,omitempty"`
	FromDate       *time.Time           `json:"fromDate,omitempty"`
	Highlight      *map[string][]string `json:"highlight,omitempty"`
	Id             *string              `json:"id,omitempty"`
	Modified       *time.Time           `json:"modified,omitempty"`
	NumericId      *int64               `json:"numericId,omitempty"`
	PrimaryTerm    *int64               `json:"primaryTerm,omitempty"`
	Query          *string              `json:"query,omitempty"`
	SearchSource   *string              `json:"searchSource,omitempty"`
	SequenceNumber *int64               `json:"sequenceNumber,omitempty"`
	SortValues     *[]string            `json:"sortValues,omitempty"`
	ToDate         *time.Time           `json:"toDate,omitempty"`
	Username       *string              `json:"username,omitempty"`
	Version        *int64               `json:"version,omitempty"`
}

// NewSearchStats instantiates a new SearchStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchStats() *SearchStats {
	this := SearchStats{}
	return &this
}

// NewSearchStatsWithDefaults instantiates a new SearchStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchStatsWithDefaults() *SearchStats {
	this := SearchStats{}
	return &this
}

// GetCommitted returns the Committed field value if set, zero value otherwise.
func (o *SearchStats) GetCommitted() time.Time {
	if o == nil || o.Committed == nil {
		var ret time.Time
		return ret
	}
	return *o.Committed
}

// GetCommittedOk returns a tuple with the Committed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetCommittedOk() (*time.Time, bool) {
	if o == nil || o.Committed == nil {
		return nil, false
	}
	return o.Committed, true
}

// HasCommitted returns a boolean if a field has been set.
func (o *SearchStats) HasCommitted() bool {
	if o != nil && o.Committed != nil {
		return true
	}

	return false
}

// SetCommitted gets a reference to the given time.Time and assigns it to the Committed field.
func (o *SearchStats) SetCommitted(v time.Time) {
	o.Committed = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *SearchStats) GetDuration() int64 {
	if o == nil || o.Duration == nil {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetDurationOk() (*int64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *SearchStats) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *SearchStats) SetDuration(v int64) {
	o.Duration = &v
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *SearchStats) GetFromDate() time.Time {
	if o == nil || o.FromDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetFromDateOk() (*time.Time, bool) {
	if o == nil || o.FromDate == nil {
		return nil, false
	}
	return o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *SearchStats) HasFromDate() bool {
	if o != nil && o.FromDate != nil {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given time.Time and assigns it to the FromDate field.
func (o *SearchStats) SetFromDate(v time.Time) {
	o.FromDate = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *SearchStats) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *SearchStats) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *SearchStats) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SearchStats) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SearchStats) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SearchStats) SetId(v string) {
	o.Id = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *SearchStats) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *SearchStats) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *SearchStats) SetModified(v time.Time) {
	o.Modified = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *SearchStats) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *SearchStats) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *SearchStats) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *SearchStats) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *SearchStats) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *SearchStats) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SearchStats) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SearchStats) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *SearchStats) SetQuery(v string) {
	o.Query = &v
}

// GetSearchSource returns the SearchSource field value if set, zero value otherwise.
func (o *SearchStats) GetSearchSource() string {
	if o == nil || o.SearchSource == nil {
		var ret string
		return ret
	}
	return *o.SearchSource
}

// GetSearchSourceOk returns a tuple with the SearchSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetSearchSourceOk() (*string, bool) {
	if o == nil || o.SearchSource == nil {
		return nil, false
	}
	return o.SearchSource, true
}

// HasSearchSource returns a boolean if a field has been set.
func (o *SearchStats) HasSearchSource() bool {
	if o != nil && o.SearchSource != nil {
		return true
	}

	return false
}

// SetSearchSource gets a reference to the given string and assigns it to the SearchSource field.
func (o *SearchStats) SetSearchSource(v string) {
	o.SearchSource = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *SearchStats) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *SearchStats) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *SearchStats) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *SearchStats) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *SearchStats) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *SearchStats) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *SearchStats) GetToDate() time.Time {
	if o == nil || o.ToDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetToDateOk() (*time.Time, bool) {
	if o == nil || o.ToDate == nil {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *SearchStats) HasToDate() bool {
	if o != nil && o.ToDate != nil {
		return true
	}

	return false
}

// SetToDate gets a reference to the given time.Time and assigns it to the ToDate field.
func (o *SearchStats) SetToDate(v time.Time) {
	o.ToDate = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SearchStats) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SearchStats) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SearchStats) SetUsername(v string) {
	o.Username = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SearchStats) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStats) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SearchStats) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *SearchStats) SetVersion(v int64) {
	o.Version = &v
}

func (o SearchStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Committed != nil {
		toSerialize["committed"] = o.Committed
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.FromDate != nil {
		toSerialize["fromDate"] = o.FromDate
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.SearchSource != nil {
		toSerialize["searchSource"] = o.SearchSource
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.ToDate != nil {
		toSerialize["toDate"] = o.ToDate
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableSearchStats struct {
	value *SearchStats
	isSet bool
}

func (v NullableSearchStats) Get() *SearchStats {
	return v.value
}

func (v *NullableSearchStats) Set(val *SearchStats) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchStats) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchStats(val *SearchStats) *NullableSearchStats {
	return &NullableSearchStats{value: val, isSet: true}
}

func (v NullableSearchStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
