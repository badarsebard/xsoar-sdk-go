/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Section struct for Section
type Section struct {
	AutoPageBreak     *bool                              `json:"autoPageBreak,omitempty"`
	Automation        *ReportAutomation                  `json:"automation,omitempty"`
	Data              *map[string]interface{}            `json:"data,omitempty"`
	Description       *string                            `json:"description,omitempty"`
	DisplayType       *string                            `json:"displayType,omitempty"`
	EmptyNotification *string                            `json:"emptyNotification,omitempty"`
	FromDate          *string                            `json:"fromDate,omitempty"`
	Layout            *map[string]interface{}            `json:"layout,omitempty"`
	Query             *ReportQuery                       `json:"query,omitempty"`
	Title             *string                            `json:"title,omitempty"`
	TitleStyle        *map[string]map[string]interface{} `json:"titleStyle,omitempty"`
	ToDate            *string                            `json:"toDate,omitempty"`
	Type              *string                            `json:"type,omitempty"`
}

// NewSection instantiates a new Section object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSection() *Section {
	this := Section{}
	return &this
}

// NewSectionWithDefaults instantiates a new Section object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionWithDefaults() *Section {
	this := Section{}
	return &this
}

// GetAutoPageBreak returns the AutoPageBreak field value if set, zero value otherwise.
func (o *Section) GetAutoPageBreak() bool {
	if o == nil || o.AutoPageBreak == nil {
		var ret bool
		return ret
	}
	return *o.AutoPageBreak
}

// GetAutoPageBreakOk returns a tuple with the AutoPageBreak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetAutoPageBreakOk() (*bool, bool) {
	if o == nil || o.AutoPageBreak == nil {
		return nil, false
	}
	return o.AutoPageBreak, true
}

// HasAutoPageBreak returns a boolean if a field has been set.
func (o *Section) HasAutoPageBreak() bool {
	if o != nil && o.AutoPageBreak != nil {
		return true
	}

	return false
}

// SetAutoPageBreak gets a reference to the given bool and assigns it to the AutoPageBreak field.
func (o *Section) SetAutoPageBreak(v bool) {
	o.AutoPageBreak = &v
}

// GetAutomation returns the Automation field value if set, zero value otherwise.
func (o *Section) GetAutomation() ReportAutomation {
	if o == nil || o.Automation == nil {
		var ret ReportAutomation
		return ret
	}
	return *o.Automation
}

// GetAutomationOk returns a tuple with the Automation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetAutomationOk() (*ReportAutomation, bool) {
	if o == nil || o.Automation == nil {
		return nil, false
	}
	return o.Automation, true
}

// HasAutomation returns a boolean if a field has been set.
func (o *Section) HasAutomation() bool {
	if o != nil && o.Automation != nil {
		return true
	}

	return false
}

// SetAutomation gets a reference to the given ReportAutomation and assigns it to the Automation field.
func (o *Section) SetAutomation(v ReportAutomation) {
	o.Automation = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Section) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Section) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *Section) SetData(v map[string]interface{}) {
	o.Data = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Section) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Section) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Section) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayType returns the DisplayType field value if set, zero value otherwise.
func (o *Section) GetDisplayType() string {
	if o == nil || o.DisplayType == nil {
		var ret string
		return ret
	}
	return *o.DisplayType
}

// GetDisplayTypeOk returns a tuple with the DisplayType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetDisplayTypeOk() (*string, bool) {
	if o == nil || o.DisplayType == nil {
		return nil, false
	}
	return o.DisplayType, true
}

// HasDisplayType returns a boolean if a field has been set.
func (o *Section) HasDisplayType() bool {
	if o != nil && o.DisplayType != nil {
		return true
	}

	return false
}

// SetDisplayType gets a reference to the given string and assigns it to the DisplayType field.
func (o *Section) SetDisplayType(v string) {
	o.DisplayType = &v
}

// GetEmptyNotification returns the EmptyNotification field value if set, zero value otherwise.
func (o *Section) GetEmptyNotification() string {
	if o == nil || o.EmptyNotification == nil {
		var ret string
		return ret
	}
	return *o.EmptyNotification
}

// GetEmptyNotificationOk returns a tuple with the EmptyNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetEmptyNotificationOk() (*string, bool) {
	if o == nil || o.EmptyNotification == nil {
		return nil, false
	}
	return o.EmptyNotification, true
}

// HasEmptyNotification returns a boolean if a field has been set.
func (o *Section) HasEmptyNotification() bool {
	if o != nil && o.EmptyNotification != nil {
		return true
	}

	return false
}

// SetEmptyNotification gets a reference to the given string and assigns it to the EmptyNotification field.
func (o *Section) SetEmptyNotification(v string) {
	o.EmptyNotification = &v
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *Section) GetFromDate() string {
	if o == nil || o.FromDate == nil {
		var ret string
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetFromDateOk() (*string, bool) {
	if o == nil || o.FromDate == nil {
		return nil, false
	}
	return o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *Section) HasFromDate() bool {
	if o != nil && o.FromDate != nil {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given string and assigns it to the FromDate field.
func (o *Section) SetFromDate(v string) {
	o.FromDate = &v
}

// GetLayout returns the Layout field value if set, zero value otherwise.
func (o *Section) GetLayout() map[string]interface{} {
	if o == nil || o.Layout == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetLayoutOk() (*map[string]interface{}, bool) {
	if o == nil || o.Layout == nil {
		return nil, false
	}
	return o.Layout, true
}

// HasLayout returns a boolean if a field has been set.
func (o *Section) HasLayout() bool {
	if o != nil && o.Layout != nil {
		return true
	}

	return false
}

// SetLayout gets a reference to the given map[string]interface{} and assigns it to the Layout field.
func (o *Section) SetLayout(v map[string]interface{}) {
	o.Layout = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Section) GetQuery() ReportQuery {
	if o == nil || o.Query == nil {
		var ret ReportQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetQueryOk() (*ReportQuery, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Section) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given ReportQuery and assigns it to the Query field.
func (o *Section) SetQuery(v ReportQuery) {
	o.Query = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Section) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Section) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Section) SetTitle(v string) {
	o.Title = &v
}

// GetTitleStyle returns the TitleStyle field value if set, zero value otherwise.
func (o *Section) GetTitleStyle() map[string]map[string]interface{} {
	if o == nil || o.TitleStyle == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.TitleStyle
}

// GetTitleStyleOk returns a tuple with the TitleStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetTitleStyleOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.TitleStyle == nil {
		return nil, false
	}
	return o.TitleStyle, true
}

// HasTitleStyle returns a boolean if a field has been set.
func (o *Section) HasTitleStyle() bool {
	if o != nil && o.TitleStyle != nil {
		return true
	}

	return false
}

// SetTitleStyle gets a reference to the given map[string]map[string]interface{} and assigns it to the TitleStyle field.
func (o *Section) SetTitleStyle(v map[string]map[string]interface{}) {
	o.TitleStyle = &v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *Section) GetToDate() string {
	if o == nil || o.ToDate == nil {
		var ret string
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetToDateOk() (*string, bool) {
	if o == nil || o.ToDate == nil {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *Section) HasToDate() bool {
	if o != nil && o.ToDate != nil {
		return true
	}

	return false
}

// SetToDate gets a reference to the given string and assigns it to the ToDate field.
func (o *Section) SetToDate(v string) {
	o.ToDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Section) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Section) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Section) SetType(v string) {
	o.Type = &v
}

func (o Section) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AutoPageBreak != nil {
		toSerialize["autoPageBreak"] = o.AutoPageBreak
	}
	if o.Automation != nil {
		toSerialize["automation"] = o.Automation
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayType != nil {
		toSerialize["displayType"] = o.DisplayType
	}
	if o.EmptyNotification != nil {
		toSerialize["emptyNotification"] = o.EmptyNotification
	}
	if o.FromDate != nil {
		toSerialize["fromDate"] = o.FromDate
	}
	if o.Layout != nil {
		toSerialize["layout"] = o.Layout
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.TitleStyle != nil {
		toSerialize["titleStyle"] = o.TitleStyle
	}
	if o.ToDate != nil {
		toSerialize["toDate"] = o.ToDate
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSection struct {
	value *Section
	isSet bool
}

func (v NullableSection) Get() *Section {
	return v.value
}

func (v *NullableSection) Set(val *Section) {
	v.value = val
	v.isSet = true
}

func (v NullableSection) IsSet() bool {
	return v.isSet
}

func (v *NullableSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSection(val *Section) *NullableSection {
	return &NullableSection{value: val, isSet: true}
}

func (v NullableSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
