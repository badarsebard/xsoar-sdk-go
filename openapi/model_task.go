/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Task Task is the basic task in the task repository that can be associated to an incident via playbook
type Task struct {
	Brand          *string              `json:"brand,omitempty"`
	ClonedFrom     *string              `json:"clonedFrom,omitempty"`
	Comment        *string              `json:"comment,omitempty"`
	Conditions     *[]string            `json:"conditions,omitempty"`
	Description    *string              `json:"description,omitempty"`
	Highlight      *map[string][]string `json:"highlight,omitempty"`
	Id             *string              `json:"id,omitempty"`
	IsCommand      *bool                `json:"isCommand,omitempty"`
	IsLocked       *bool                `json:"isLocked,omitempty"`
	IsTitleTask    *bool                `json:"isTitleTask,omitempty"`
	Modified       *time.Time           `json:"modified,omitempty"`
	Name           *string              `json:"name,omitempty"`
	NumericId      *int64               `json:"numericId,omitempty"`
	PlaybookId     *string              `json:"playbookId,omitempty"`
	PlaybookName   *string              `json:"playbookName,omitempty"`
	PrimaryTerm    *int64               `json:"primaryTerm,omitempty"`
	ScriptId       *string              `json:"scriptId,omitempty"`
	SequenceNumber *int64               `json:"sequenceNumber,omitempty"`
	SortValues     *[]string            `json:"sortValues,omitempty"`
	Tags           *[]string            `json:"tags,omitempty"`
	// TaskType is the Task in the playbook context as a node
	Type    *string `json:"type,omitempty"`
	Version *int64  `json:"version,omitempty"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask() *Task {
	this := Task{}
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *Task) GetBrand() string {
	if o == nil || o.Brand == nil {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetBrandOk() (*string, bool) {
	if o == nil || o.Brand == nil {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *Task) HasBrand() bool {
	if o != nil && o.Brand != nil {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *Task) SetBrand(v string) {
	o.Brand = &v
}

// GetClonedFrom returns the ClonedFrom field value if set, zero value otherwise.
func (o *Task) GetClonedFrom() string {
	if o == nil || o.ClonedFrom == nil {
		var ret string
		return ret
	}
	return *o.ClonedFrom
}

// GetClonedFromOk returns a tuple with the ClonedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetClonedFromOk() (*string, bool) {
	if o == nil || o.ClonedFrom == nil {
		return nil, false
	}
	return o.ClonedFrom, true
}

// HasClonedFrom returns a boolean if a field has been set.
func (o *Task) HasClonedFrom() bool {
	if o != nil && o.ClonedFrom != nil {
		return true
	}

	return false
}

// SetClonedFrom gets a reference to the given string and assigns it to the ClonedFrom field.
func (o *Task) SetClonedFrom(v string) {
	o.ClonedFrom = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Task) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Task) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Task) SetComment(v string) {
	o.Comment = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *Task) GetConditions() []string {
	if o == nil || o.Conditions == nil {
		var ret []string
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetConditionsOk() (*[]string, bool) {
	if o == nil || o.Conditions == nil {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *Task) HasConditions() bool {
	if o != nil && o.Conditions != nil {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []string and assigns it to the Conditions field.
func (o *Task) SetConditions(v []string) {
	o.Conditions = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Task) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Task) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Task) SetDescription(v string) {
	o.Description = &v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *Task) GetHighlight() map[string][]string {
	if o == nil || o.Highlight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetHighlightOk() (*map[string][]string, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *Task) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string][]string and assigns it to the Highlight field.
func (o *Task) SetHighlight(v map[string][]string) {
	o.Highlight = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Task) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Task) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Task) SetId(v string) {
	o.Id = &v
}

// GetIsCommand returns the IsCommand field value if set, zero value otherwise.
func (o *Task) GetIsCommand() bool {
	if o == nil || o.IsCommand == nil {
		var ret bool
		return ret
	}
	return *o.IsCommand
}

// GetIsCommandOk returns a tuple with the IsCommand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetIsCommandOk() (*bool, bool) {
	if o == nil || o.IsCommand == nil {
		return nil, false
	}
	return o.IsCommand, true
}

// HasIsCommand returns a boolean if a field has been set.
func (o *Task) HasIsCommand() bool {
	if o != nil && o.IsCommand != nil {
		return true
	}

	return false
}

// SetIsCommand gets a reference to the given bool and assigns it to the IsCommand field.
func (o *Task) SetIsCommand(v bool) {
	o.IsCommand = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *Task) GetIsLocked() bool {
	if o == nil || o.IsLocked == nil {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetIsLockedOk() (*bool, bool) {
	if o == nil || o.IsLocked == nil {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *Task) HasIsLocked() bool {
	if o != nil && o.IsLocked != nil {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *Task) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetIsTitleTask returns the IsTitleTask field value if set, zero value otherwise.
func (o *Task) GetIsTitleTask() bool {
	if o == nil || o.IsTitleTask == nil {
		var ret bool
		return ret
	}
	return *o.IsTitleTask
}

// GetIsTitleTaskOk returns a tuple with the IsTitleTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetIsTitleTaskOk() (*bool, bool) {
	if o == nil || o.IsTitleTask == nil {
		return nil, false
	}
	return o.IsTitleTask, true
}

// HasIsTitleTask returns a boolean if a field has been set.
func (o *Task) HasIsTitleTask() bool {
	if o != nil && o.IsTitleTask != nil {
		return true
	}

	return false
}

// SetIsTitleTask gets a reference to the given bool and assigns it to the IsTitleTask field.
func (o *Task) SetIsTitleTask(v bool) {
	o.IsTitleTask = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Task) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Task) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Task) SetModified(v time.Time) {
	o.Modified = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Task) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Task) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Task) SetName(v string) {
	o.Name = &v
}

// GetNumericId returns the NumericId field value if set, zero value otherwise.
func (o *Task) GetNumericId() int64 {
	if o == nil || o.NumericId == nil {
		var ret int64
		return ret
	}
	return *o.NumericId
}

// GetNumericIdOk returns a tuple with the NumericId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetNumericIdOk() (*int64, bool) {
	if o == nil || o.NumericId == nil {
		return nil, false
	}
	return o.NumericId, true
}

// HasNumericId returns a boolean if a field has been set.
func (o *Task) HasNumericId() bool {
	if o != nil && o.NumericId != nil {
		return true
	}

	return false
}

// SetNumericId gets a reference to the given int64 and assigns it to the NumericId field.
func (o *Task) SetNumericId(v int64) {
	o.NumericId = &v
}

// GetPlaybookId returns the PlaybookId field value if set, zero value otherwise.
func (o *Task) GetPlaybookId() string {
	if o == nil || o.PlaybookId == nil {
		var ret string
		return ret
	}
	return *o.PlaybookId
}

// GetPlaybookIdOk returns a tuple with the PlaybookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPlaybookIdOk() (*string, bool) {
	if o == nil || o.PlaybookId == nil {
		return nil, false
	}
	return o.PlaybookId, true
}

// HasPlaybookId returns a boolean if a field has been set.
func (o *Task) HasPlaybookId() bool {
	if o != nil && o.PlaybookId != nil {
		return true
	}

	return false
}

// SetPlaybookId gets a reference to the given string and assigns it to the PlaybookId field.
func (o *Task) SetPlaybookId(v string) {
	o.PlaybookId = &v
}

// GetPlaybookName returns the PlaybookName field value if set, zero value otherwise.
func (o *Task) GetPlaybookName() string {
	if o == nil || o.PlaybookName == nil {
		var ret string
		return ret
	}
	return *o.PlaybookName
}

// GetPlaybookNameOk returns a tuple with the PlaybookName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPlaybookNameOk() (*string, bool) {
	if o == nil || o.PlaybookName == nil {
		return nil, false
	}
	return o.PlaybookName, true
}

// HasPlaybookName returns a boolean if a field has been set.
func (o *Task) HasPlaybookName() bool {
	if o != nil && o.PlaybookName != nil {
		return true
	}

	return false
}

// SetPlaybookName gets a reference to the given string and assigns it to the PlaybookName field.
func (o *Task) SetPlaybookName(v string) {
	o.PlaybookName = &v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise.
func (o *Task) GetPrimaryTerm() int64 {
	if o == nil || o.PrimaryTerm == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPrimaryTermOk() (*int64, bool) {
	if o == nil || o.PrimaryTerm == nil {
		return nil, false
	}
	return o.PrimaryTerm, true
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *Task) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm != nil {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given int64 and assigns it to the PrimaryTerm field.
func (o *Task) SetPrimaryTerm(v int64) {
	o.PrimaryTerm = &v
}

// GetScriptId returns the ScriptId field value if set, zero value otherwise.
func (o *Task) GetScriptId() string {
	if o == nil || o.ScriptId == nil {
		var ret string
		return ret
	}
	return *o.ScriptId
}

// GetScriptIdOk returns a tuple with the ScriptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetScriptIdOk() (*string, bool) {
	if o == nil || o.ScriptId == nil {
		return nil, false
	}
	return o.ScriptId, true
}

// HasScriptId returns a boolean if a field has been set.
func (o *Task) HasScriptId() bool {
	if o != nil && o.ScriptId != nil {
		return true
	}

	return false
}

// SetScriptId gets a reference to the given string and assigns it to the ScriptId field.
func (o *Task) SetScriptId(v string) {
	o.ScriptId = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *Task) GetSequenceNumber() int64 {
	if o == nil || o.SequenceNumber == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *Task) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *Task) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetSortValues returns the SortValues field value if set, zero value otherwise.
func (o *Task) GetSortValues() []string {
	if o == nil || o.SortValues == nil {
		var ret []string
		return ret
	}
	return *o.SortValues
}

// GetSortValuesOk returns a tuple with the SortValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetSortValuesOk() (*[]string, bool) {
	if o == nil || o.SortValues == nil {
		return nil, false
	}
	return o.SortValues, true
}

// HasSortValues returns a boolean if a field has been set.
func (o *Task) HasSortValues() bool {
	if o != nil && o.SortValues != nil {
		return true
	}

	return false
}

// SetSortValues gets a reference to the given []string and assigns it to the SortValues field.
func (o *Task) SetSortValues(v []string) {
	o.SortValues = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Task) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Task) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Task) SetTags(v []string) {
	o.Tags = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Task) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Task) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Task) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Task) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Task) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *Task) SetVersion(v int64) {
	o.Version = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Brand != nil {
		toSerialize["brand"] = o.Brand
	}
	if o.ClonedFrom != nil {
		toSerialize["clonedFrom"] = o.ClonedFrom
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsCommand != nil {
		toSerialize["isCommand"] = o.IsCommand
	}
	if o.IsLocked != nil {
		toSerialize["isLocked"] = o.IsLocked
	}
	if o.IsTitleTask != nil {
		toSerialize["isTitleTask"] = o.IsTitleTask
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NumericId != nil {
		toSerialize["numericId"] = o.NumericId
	}
	if o.PlaybookId != nil {
		toSerialize["playbookId"] = o.PlaybookId
	}
	if o.PlaybookName != nil {
		toSerialize["playbookName"] = o.PlaybookName
	}
	if o.PrimaryTerm != nil {
		toSerialize["primaryTerm"] = o.PrimaryTerm
	}
	if o.ScriptId != nil {
		toSerialize["scriptId"] = o.ScriptId
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.SortValues != nil {
		toSerialize["sortValues"] = o.SortValues
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
