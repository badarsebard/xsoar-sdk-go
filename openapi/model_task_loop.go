/*
Cortex XSOAR API

This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TaskLoop TaskLoop contains loop details
type TaskLoop struct {
	Brand            *string                `json:"brand,omitempty"`
	BuiltinCondition *[][]ArgAtomicFilter   `json:"builtinCondition,omitempty"`
	ExitCondition    *string                `json:"exitCondition,omitempty"`
	ForEach          *bool                  `json:"forEach,omitempty"`
	IsCommand        *bool                  `json:"isCommand,omitempty"`
	Max              *int64                 `json:"max,omitempty"`
	ScriptArguments  *map[string]AdvanceArg `json:"scriptArguments,omitempty"`
	ScriptId         *string                `json:"scriptId,omitempty"`
	ScriptName       *string                `json:"scriptName,omitempty"`
	Wait             *int64                 `json:"wait,omitempty"`
}

// NewTaskLoop instantiates a new TaskLoop object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskLoop() *TaskLoop {
	this := TaskLoop{}
	return &this
}

// NewTaskLoopWithDefaults instantiates a new TaskLoop object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskLoopWithDefaults() *TaskLoop {
	this := TaskLoop{}
	return &this
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *TaskLoop) GetBrand() string {
	if o == nil || o.Brand == nil {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskLoop) GetBrandOk() (*string, bool) {
	if o == nil || o.Brand == nil {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *TaskLoop) HasBrand() bool {
	if o != nil && o.Brand != nil {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *TaskLoop) SetBrand(v string) {
	o.Brand = &v
}

// GetBuiltinCondition returns the BuiltinCondition field value if set, zero value otherwise.
func (o *TaskLoop) GetBuiltinCondition() [][]ArgAtomicFilter {
	if o == nil || o.BuiltinCondition == nil {
		var ret [][]ArgAtomicFilter
		return ret
	}
	return *o.BuiltinCondition
}

// GetBuiltinConditionOk returns a tuple with the BuiltinCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskLoop) GetBuiltinConditionOk() (*[][]ArgAtomicFilter, bool) {
	if o == nil || o.BuiltinCondition == nil {
		return nil, false
	}
	return o.BuiltinCondition, true
}

// HasBuiltinCondition returns a boolean if a field has been set.
func (o *TaskLoop) HasBuiltinCondition() bool {
	if o != nil && o.BuiltinCondition != nil {
		return true
	}

	return false
}

// SetBuiltinCondition gets a reference to the given [][]ArgAtomicFilter and assigns it to the BuiltinCondition field.
func (o *TaskLoop) SetBuiltinCondition(v [][]ArgAtomicFilter) {
	o.BuiltinCondition = &v
}

// GetExitCondition returns the ExitCondition field value if set, zero value otherwise.
func (o *TaskLoop) GetExitCondition() string {
	if o == nil || o.ExitCondition == nil {
		var ret string
		return ret
	}
	return *o.ExitCondition
}

// GetExitConditionOk returns a tuple with the ExitCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskLoop) GetExitConditionOk() (*string, bool) {
	if o == nil || o.ExitCondition == nil {
		return nil, false
	}
	return o.ExitCondition, true
}

// HasExitCondition returns a boolean if a field has been set.
func (o *TaskLoop) HasExitCondition() bool {
	if o != nil && o.ExitCondition != nil {
		return true
	}

	return false
}

// SetExitCondition gets a reference to the given string and assigns it to the ExitCondition field.
func (o *TaskLoop) SetExitCondition(v string) {
	o.ExitCondition = &v
}

// GetForEach returns the ForEach field value if set, zero value otherwise.
func (o *TaskLoop) GetForEach() bool {
	if o == nil || o.ForEach == nil {
		var ret bool
		return ret
	}
	return *o.ForEach
}

// GetForEachOk returns a tuple with the ForEach field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskLoop) GetForEachOk() (*bool, bool) {
	if o == nil || o.ForEach == nil {
		return nil, false
	}
	return o.ForEach, true
}

// HasForEach returns a boolean if a field has been set.
func (o *TaskLoop) HasForEach() bool {
	if o != nil && o.ForEach != nil {
		return true
	}

	return false
}

// SetForEach gets a reference to the given bool and assigns it to the ForEach field.
func (o *TaskLoop) SetForEach(v bool) {
	o.ForEach = &v
}

// GetIsCommand returns the IsCommand field value if set, zero value otherwise.
func (o *TaskLoop) GetIsCommand() bool {
	if o == nil || o.IsCommand == nil {
		var ret bool
		return ret
	}
	return *o.IsCommand
}

// GetIsCommandOk returns a tuple with the IsCommand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskLoop) GetIsCommandOk() (*bool, bool) {
	if o == nil || o.IsCommand == nil {
		return nil, false
	}
	return o.IsCommand, true
}

// HasIsCommand returns a boolean if a field has been set.
func (o *TaskLoop) HasIsCommand() bool {
	if o != nil && o.IsCommand != nil {
		return true
	}

	return false
}

// SetIsCommand gets a reference to the given bool and assigns it to the IsCommand field.
func (o *TaskLoop) SetIsCommand(v bool) {
	o.IsCommand = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *TaskLoop) GetMax() int64 {
	if o == nil || o.Max == nil {
		var ret int64
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskLoop) GetMaxOk() (*int64, bool) {
	if o == nil || o.Max == nil {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *TaskLoop) HasMax() bool {
	if o != nil && o.Max != nil {
		return true
	}

	return false
}

// SetMax gets a reference to the given int64 and assigns it to the Max field.
func (o *TaskLoop) SetMax(v int64) {
	o.Max = &v
}

// GetScriptArguments returns the ScriptArguments field value if set, zero value otherwise.
func (o *TaskLoop) GetScriptArguments() map[string]AdvanceArg {
	if o == nil || o.ScriptArguments == nil {
		var ret map[string]AdvanceArg
		return ret
	}
	return *o.ScriptArguments
}

// GetScriptArgumentsOk returns a tuple with the ScriptArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskLoop) GetScriptArgumentsOk() (*map[string]AdvanceArg, bool) {
	if o == nil || o.ScriptArguments == nil {
		return nil, false
	}
	return o.ScriptArguments, true
}

// HasScriptArguments returns a boolean if a field has been set.
func (o *TaskLoop) HasScriptArguments() bool {
	if o != nil && o.ScriptArguments != nil {
		return true
	}

	return false
}

// SetScriptArguments gets a reference to the given map[string]AdvanceArg and assigns it to the ScriptArguments field.
func (o *TaskLoop) SetScriptArguments(v map[string]AdvanceArg) {
	o.ScriptArguments = &v
}

// GetScriptId returns the ScriptId field value if set, zero value otherwise.
func (o *TaskLoop) GetScriptId() string {
	if o == nil || o.ScriptId == nil {
		var ret string
		return ret
	}
	return *o.ScriptId
}

// GetScriptIdOk returns a tuple with the ScriptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskLoop) GetScriptIdOk() (*string, bool) {
	if o == nil || o.ScriptId == nil {
		return nil, false
	}
	return o.ScriptId, true
}

// HasScriptId returns a boolean if a field has been set.
func (o *TaskLoop) HasScriptId() bool {
	if o != nil && o.ScriptId != nil {
		return true
	}

	return false
}

// SetScriptId gets a reference to the given string and assigns it to the ScriptId field.
func (o *TaskLoop) SetScriptId(v string) {
	o.ScriptId = &v
}

// GetScriptName returns the ScriptName field value if set, zero value otherwise.
func (o *TaskLoop) GetScriptName() string {
	if o == nil || o.ScriptName == nil {
		var ret string
		return ret
	}
	return *o.ScriptName
}

// GetScriptNameOk returns a tuple with the ScriptName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskLoop) GetScriptNameOk() (*string, bool) {
	if o == nil || o.ScriptName == nil {
		return nil, false
	}
	return o.ScriptName, true
}

// HasScriptName returns a boolean if a field has been set.
func (o *TaskLoop) HasScriptName() bool {
	if o != nil && o.ScriptName != nil {
		return true
	}

	return false
}

// SetScriptName gets a reference to the given string and assigns it to the ScriptName field.
func (o *TaskLoop) SetScriptName(v string) {
	o.ScriptName = &v
}

// GetWait returns the Wait field value if set, zero value otherwise.
func (o *TaskLoop) GetWait() int64 {
	if o == nil || o.Wait == nil {
		var ret int64
		return ret
	}
	return *o.Wait
}

// GetWaitOk returns a tuple with the Wait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskLoop) GetWaitOk() (*int64, bool) {
	if o == nil || o.Wait == nil {
		return nil, false
	}
	return o.Wait, true
}

// HasWait returns a boolean if a field has been set.
func (o *TaskLoop) HasWait() bool {
	if o != nil && o.Wait != nil {
		return true
	}

	return false
}

// SetWait gets a reference to the given int64 and assigns it to the Wait field.
func (o *TaskLoop) SetWait(v int64) {
	o.Wait = &v
}

func (o TaskLoop) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Brand != nil {
		toSerialize["brand"] = o.Brand
	}
	if o.BuiltinCondition != nil {
		toSerialize["builtinCondition"] = o.BuiltinCondition
	}
	if o.ExitCondition != nil {
		toSerialize["exitCondition"] = o.ExitCondition
	}
	if o.ForEach != nil {
		toSerialize["forEach"] = o.ForEach
	}
	if o.IsCommand != nil {
		toSerialize["isCommand"] = o.IsCommand
	}
	if o.Max != nil {
		toSerialize["max"] = o.Max
	}
	if o.ScriptArguments != nil {
		toSerialize["scriptArguments"] = o.ScriptArguments
	}
	if o.ScriptId != nil {
		toSerialize["scriptId"] = o.ScriptId
	}
	if o.ScriptName != nil {
		toSerialize["scriptName"] = o.ScriptName
	}
	if o.Wait != nil {
		toSerialize["wait"] = o.Wait
	}
	return json.Marshal(toSerialize)
}

type NullableTaskLoop struct {
	value *TaskLoop
	isSet bool
}

func (v NullableTaskLoop) Get() *TaskLoop {
	return v.value
}

func (v *NullableTaskLoop) Set(val *TaskLoop) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskLoop) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskLoop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskLoop(val *TaskLoop) *NullableTaskLoop {
	return &NullableTaskLoop{value: val, isSet: true}
}

func (v NullableTaskLoop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskLoop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
